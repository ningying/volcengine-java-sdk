/*
 * ecs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.ecs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.ecs.model.LocalVolumeForDescribeDedicatedHostTypesOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DedicatedHostTypeForDescribeDedicatedHostTypesOutput
 */



public class DedicatedHostTypeForDescribeDedicatedHostTypesOutput {
  @SerializedName("Cores")
  private Integer cores = null;

  @SerializedName("DedicatedHostTypeId")
  private String dedicatedHostTypeId = null;

  @SerializedName("IsSupportedCpuOvercommitRatio")
  private Boolean isSupportedCpuOvercommitRatio = null;

  @SerializedName("LocalVolumes")
  private List<LocalVolumeForDescribeDedicatedHostTypesOutput> localVolumes = null;

  @SerializedName("MaxCpuOvercommitRatio")
  private Float maxCpuOvercommitRatio = null;

  @SerializedName("ProcessorModel")
  private String processorModel = null;

  @SerializedName("Sockets")
  private Integer sockets = null;

  @SerializedName("SupportInstanceTypeFamilies")
  private List<String> supportInstanceTypeFamilies = null;

  @SerializedName("SupportInstanceTypesList")
  private List<String> supportInstanceTypesList = null;

  @SerializedName("TotalMemory")
  private Integer totalMemory = null;

  @SerializedName("TotalVcpus")
  private Integer totalVcpus = null;

  public DedicatedHostTypeForDescribeDedicatedHostTypesOutput cores(Integer cores) {
    this.cores = cores;
    return this;
  }

   /**
   * Get cores
   * @return cores
  **/
  @Schema(description = "")
  public Integer getCores() {
    return cores;
  }

  public void setCores(Integer cores) {
    this.cores = cores;
  }

  public DedicatedHostTypeForDescribeDedicatedHostTypesOutput dedicatedHostTypeId(String dedicatedHostTypeId) {
    this.dedicatedHostTypeId = dedicatedHostTypeId;
    return this;
  }

   /**
   * Get dedicatedHostTypeId
   * @return dedicatedHostTypeId
  **/
  @Schema(description = "")
  public String getDedicatedHostTypeId() {
    return dedicatedHostTypeId;
  }

  public void setDedicatedHostTypeId(String dedicatedHostTypeId) {
    this.dedicatedHostTypeId = dedicatedHostTypeId;
  }

  public DedicatedHostTypeForDescribeDedicatedHostTypesOutput isSupportedCpuOvercommitRatio(Boolean isSupportedCpuOvercommitRatio) {
    this.isSupportedCpuOvercommitRatio = isSupportedCpuOvercommitRatio;
    return this;
  }

   /**
   * Get isSupportedCpuOvercommitRatio
   * @return isSupportedCpuOvercommitRatio
  **/
  @Schema(description = "")
  public Boolean isIsSupportedCpuOvercommitRatio() {
    return isSupportedCpuOvercommitRatio;
  }

  public void setIsSupportedCpuOvercommitRatio(Boolean isSupportedCpuOvercommitRatio) {
    this.isSupportedCpuOvercommitRatio = isSupportedCpuOvercommitRatio;
  }

  public DedicatedHostTypeForDescribeDedicatedHostTypesOutput localVolumes(List<LocalVolumeForDescribeDedicatedHostTypesOutput> localVolumes) {
    this.localVolumes = localVolumes;
    return this;
  }

  public DedicatedHostTypeForDescribeDedicatedHostTypesOutput addLocalVolumesItem(LocalVolumeForDescribeDedicatedHostTypesOutput localVolumesItem) {
    if (this.localVolumes == null) {
      this.localVolumes = new ArrayList<LocalVolumeForDescribeDedicatedHostTypesOutput>();
    }
    this.localVolumes.add(localVolumesItem);
    return this;
  }

   /**
   * Get localVolumes
   * @return localVolumes
  **/
  @Valid
  @Schema(description = "")
  public List<LocalVolumeForDescribeDedicatedHostTypesOutput> getLocalVolumes() {
    return localVolumes;
  }

  public void setLocalVolumes(List<LocalVolumeForDescribeDedicatedHostTypesOutput> localVolumes) {
    this.localVolumes = localVolumes;
  }

  public DedicatedHostTypeForDescribeDedicatedHostTypesOutput maxCpuOvercommitRatio(Float maxCpuOvercommitRatio) {
    this.maxCpuOvercommitRatio = maxCpuOvercommitRatio;
    return this;
  }

   /**
   * Get maxCpuOvercommitRatio
   * @return maxCpuOvercommitRatio
  **/
  @Schema(description = "")
  public Float getMaxCpuOvercommitRatio() {
    return maxCpuOvercommitRatio;
  }

  public void setMaxCpuOvercommitRatio(Float maxCpuOvercommitRatio) {
    this.maxCpuOvercommitRatio = maxCpuOvercommitRatio;
  }

  public DedicatedHostTypeForDescribeDedicatedHostTypesOutput processorModel(String processorModel) {
    this.processorModel = processorModel;
    return this;
  }

   /**
   * Get processorModel
   * @return processorModel
  **/
  @Schema(description = "")
  public String getProcessorModel() {
    return processorModel;
  }

  public void setProcessorModel(String processorModel) {
    this.processorModel = processorModel;
  }

  public DedicatedHostTypeForDescribeDedicatedHostTypesOutput sockets(Integer sockets) {
    this.sockets = sockets;
    return this;
  }

   /**
   * Get sockets
   * @return sockets
  **/
  @Schema(description = "")
  public Integer getSockets() {
    return sockets;
  }

  public void setSockets(Integer sockets) {
    this.sockets = sockets;
  }

  public DedicatedHostTypeForDescribeDedicatedHostTypesOutput supportInstanceTypeFamilies(List<String> supportInstanceTypeFamilies) {
    this.supportInstanceTypeFamilies = supportInstanceTypeFamilies;
    return this;
  }

  public DedicatedHostTypeForDescribeDedicatedHostTypesOutput addSupportInstanceTypeFamiliesItem(String supportInstanceTypeFamiliesItem) {
    if (this.supportInstanceTypeFamilies == null) {
      this.supportInstanceTypeFamilies = new ArrayList<String>();
    }
    this.supportInstanceTypeFamilies.add(supportInstanceTypeFamiliesItem);
    return this;
  }

   /**
   * Get supportInstanceTypeFamilies
   * @return supportInstanceTypeFamilies
  **/
  @Schema(description = "")
  public List<String> getSupportInstanceTypeFamilies() {
    return supportInstanceTypeFamilies;
  }

  public void setSupportInstanceTypeFamilies(List<String> supportInstanceTypeFamilies) {
    this.supportInstanceTypeFamilies = supportInstanceTypeFamilies;
  }

  public DedicatedHostTypeForDescribeDedicatedHostTypesOutput supportInstanceTypesList(List<String> supportInstanceTypesList) {
    this.supportInstanceTypesList = supportInstanceTypesList;
    return this;
  }

  public DedicatedHostTypeForDescribeDedicatedHostTypesOutput addSupportInstanceTypesListItem(String supportInstanceTypesListItem) {
    if (this.supportInstanceTypesList == null) {
      this.supportInstanceTypesList = new ArrayList<String>();
    }
    this.supportInstanceTypesList.add(supportInstanceTypesListItem);
    return this;
  }

   /**
   * Get supportInstanceTypesList
   * @return supportInstanceTypesList
  **/
  @Schema(description = "")
  public List<String> getSupportInstanceTypesList() {
    return supportInstanceTypesList;
  }

  public void setSupportInstanceTypesList(List<String> supportInstanceTypesList) {
    this.supportInstanceTypesList = supportInstanceTypesList;
  }

  public DedicatedHostTypeForDescribeDedicatedHostTypesOutput totalMemory(Integer totalMemory) {
    this.totalMemory = totalMemory;
    return this;
  }

   /**
   * Get totalMemory
   * @return totalMemory
  **/
  @Schema(description = "")
  public Integer getTotalMemory() {
    return totalMemory;
  }

  public void setTotalMemory(Integer totalMemory) {
    this.totalMemory = totalMemory;
  }

  public DedicatedHostTypeForDescribeDedicatedHostTypesOutput totalVcpus(Integer totalVcpus) {
    this.totalVcpus = totalVcpus;
    return this;
  }

   /**
   * Get totalVcpus
   * @return totalVcpus
  **/
  @Schema(description = "")
  public Integer getTotalVcpus() {
    return totalVcpus;
  }

  public void setTotalVcpus(Integer totalVcpus) {
    this.totalVcpus = totalVcpus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DedicatedHostTypeForDescribeDedicatedHostTypesOutput dedicatedHostTypeForDescribeDedicatedHostTypesOutput = (DedicatedHostTypeForDescribeDedicatedHostTypesOutput) o;
    return Objects.equals(this.cores, dedicatedHostTypeForDescribeDedicatedHostTypesOutput.cores) &&
        Objects.equals(this.dedicatedHostTypeId, dedicatedHostTypeForDescribeDedicatedHostTypesOutput.dedicatedHostTypeId) &&
        Objects.equals(this.isSupportedCpuOvercommitRatio, dedicatedHostTypeForDescribeDedicatedHostTypesOutput.isSupportedCpuOvercommitRatio) &&
        Objects.equals(this.localVolumes, dedicatedHostTypeForDescribeDedicatedHostTypesOutput.localVolumes) &&
        Objects.equals(this.maxCpuOvercommitRatio, dedicatedHostTypeForDescribeDedicatedHostTypesOutput.maxCpuOvercommitRatio) &&
        Objects.equals(this.processorModel, dedicatedHostTypeForDescribeDedicatedHostTypesOutput.processorModel) &&
        Objects.equals(this.sockets, dedicatedHostTypeForDescribeDedicatedHostTypesOutput.sockets) &&
        Objects.equals(this.supportInstanceTypeFamilies, dedicatedHostTypeForDescribeDedicatedHostTypesOutput.supportInstanceTypeFamilies) &&
        Objects.equals(this.supportInstanceTypesList, dedicatedHostTypeForDescribeDedicatedHostTypesOutput.supportInstanceTypesList) &&
        Objects.equals(this.totalMemory, dedicatedHostTypeForDescribeDedicatedHostTypesOutput.totalMemory) &&
        Objects.equals(this.totalVcpus, dedicatedHostTypeForDescribeDedicatedHostTypesOutput.totalVcpus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cores, dedicatedHostTypeId, isSupportedCpuOvercommitRatio, localVolumes, maxCpuOvercommitRatio, processorModel, sockets, supportInstanceTypeFamilies, supportInstanceTypesList, totalMemory, totalVcpus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DedicatedHostTypeForDescribeDedicatedHostTypesOutput {\n");
    
    sb.append("    cores: ").append(toIndentedString(cores)).append("\n");
    sb.append("    dedicatedHostTypeId: ").append(toIndentedString(dedicatedHostTypeId)).append("\n");
    sb.append("    isSupportedCpuOvercommitRatio: ").append(toIndentedString(isSupportedCpuOvercommitRatio)).append("\n");
    sb.append("    localVolumes: ").append(toIndentedString(localVolumes)).append("\n");
    sb.append("    maxCpuOvercommitRatio: ").append(toIndentedString(maxCpuOvercommitRatio)).append("\n");
    sb.append("    processorModel: ").append(toIndentedString(processorModel)).append("\n");
    sb.append("    sockets: ").append(toIndentedString(sockets)).append("\n");
    sb.append("    supportInstanceTypeFamilies: ").append(toIndentedString(supportInstanceTypeFamilies)).append("\n");
    sb.append("    supportInstanceTypesList: ").append(toIndentedString(supportInstanceTypesList)).append("\n");
    sb.append("    totalMemory: ").append(toIndentedString(totalMemory)).append("\n");
    sb.append("    totalVcpus: ").append(toIndentedString(totalVcpus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
