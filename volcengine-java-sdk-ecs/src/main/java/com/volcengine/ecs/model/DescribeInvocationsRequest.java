/*
 * ecs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.ecs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.ecs.model.TagFilterForDescribeInvocationsInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DescribeInvocationsRequest
 */



public class DescribeInvocationsRequest {
  @SerializedName("CommandId")
  private String commandId = null;

  @SerializedName("CommandName")
  private String commandName = null;

  @SerializedName("CommandType")
  private String commandType = null;

  @SerializedName("ContentEncoding")
  private String contentEncoding = null;

  @SerializedName("InvocationId")
  private String invocationId = null;

  @SerializedName("InvocationName")
  private String invocationName = null;

  @SerializedName("InvocationStatus")
  private String invocationStatus = null;

  @SerializedName("PageNumber")
  private Integer pageNumber = null;

  @SerializedName("PageSize")
  private Integer pageSize = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("RepeatMode")
  private String repeatMode = null;

  @SerializedName("TagFilters")
  private List<TagFilterForDescribeInvocationsInput> tagFilters = null;

  public DescribeInvocationsRequest commandId(String commandId) {
    this.commandId = commandId;
    return this;
  }

   /**
   * Get commandId
   * @return commandId
  **/
  @Schema(description = "")
  public String getCommandId() {
    return commandId;
  }

  public void setCommandId(String commandId) {
    this.commandId = commandId;
  }

  public DescribeInvocationsRequest commandName(String commandName) {
    this.commandName = commandName;
    return this;
  }

   /**
   * Get commandName
   * @return commandName
  **/
  @Schema(description = "")
  public String getCommandName() {
    return commandName;
  }

  public void setCommandName(String commandName) {
    this.commandName = commandName;
  }

  public DescribeInvocationsRequest commandType(String commandType) {
    this.commandType = commandType;
    return this;
  }

   /**
   * Get commandType
   * @return commandType
  **/
  @Schema(description = "")
  public String getCommandType() {
    return commandType;
  }

  public void setCommandType(String commandType) {
    this.commandType = commandType;
  }

  public DescribeInvocationsRequest contentEncoding(String contentEncoding) {
    this.contentEncoding = contentEncoding;
    return this;
  }

   /**
   * Get contentEncoding
   * @return contentEncoding
  **/
  @Schema(description = "")
  public String getContentEncoding() {
    return contentEncoding;
  }

  public void setContentEncoding(String contentEncoding) {
    this.contentEncoding = contentEncoding;
  }

  public DescribeInvocationsRequest invocationId(String invocationId) {
    this.invocationId = invocationId;
    return this;
  }

   /**
   * Get invocationId
   * @return invocationId
  **/
  @Schema(description = "")
  public String getInvocationId() {
    return invocationId;
  }

  public void setInvocationId(String invocationId) {
    this.invocationId = invocationId;
  }

  public DescribeInvocationsRequest invocationName(String invocationName) {
    this.invocationName = invocationName;
    return this;
  }

   /**
   * Get invocationName
   * @return invocationName
  **/
  @Schema(description = "")
  public String getInvocationName() {
    return invocationName;
  }

  public void setInvocationName(String invocationName) {
    this.invocationName = invocationName;
  }

  public DescribeInvocationsRequest invocationStatus(String invocationStatus) {
    this.invocationStatus = invocationStatus;
    return this;
  }

   /**
   * Get invocationStatus
   * @return invocationStatus
  **/
  @Schema(description = "")
  public String getInvocationStatus() {
    return invocationStatus;
  }

  public void setInvocationStatus(String invocationStatus) {
    this.invocationStatus = invocationStatus;
  }

  public DescribeInvocationsRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @Schema(description = "")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public DescribeInvocationsRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public DescribeInvocationsRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public DescribeInvocationsRequest repeatMode(String repeatMode) {
    this.repeatMode = repeatMode;
    return this;
  }

   /**
   * Get repeatMode
   * @return repeatMode
  **/
  @Schema(description = "")
  public String getRepeatMode() {
    return repeatMode;
  }

  public void setRepeatMode(String repeatMode) {
    this.repeatMode = repeatMode;
  }

  public DescribeInvocationsRequest tagFilters(List<TagFilterForDescribeInvocationsInput> tagFilters) {
    this.tagFilters = tagFilters;
    return this;
  }

  public DescribeInvocationsRequest addTagFiltersItem(TagFilterForDescribeInvocationsInput tagFiltersItem) {
    if (this.tagFilters == null) {
      this.tagFilters = new ArrayList<TagFilterForDescribeInvocationsInput>();
    }
    this.tagFilters.add(tagFiltersItem);
    return this;
  }

   /**
   * Get tagFilters
   * @return tagFilters
  **/
  @Valid
  @Schema(description = "")
  public List<TagFilterForDescribeInvocationsInput> getTagFilters() {
    return tagFilters;
  }

  public void setTagFilters(List<TagFilterForDescribeInvocationsInput> tagFilters) {
    this.tagFilters = tagFilters;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeInvocationsRequest describeInvocationsRequest = (DescribeInvocationsRequest) o;
    return Objects.equals(this.commandId, describeInvocationsRequest.commandId) &&
        Objects.equals(this.commandName, describeInvocationsRequest.commandName) &&
        Objects.equals(this.commandType, describeInvocationsRequest.commandType) &&
        Objects.equals(this.contentEncoding, describeInvocationsRequest.contentEncoding) &&
        Objects.equals(this.invocationId, describeInvocationsRequest.invocationId) &&
        Objects.equals(this.invocationName, describeInvocationsRequest.invocationName) &&
        Objects.equals(this.invocationStatus, describeInvocationsRequest.invocationStatus) &&
        Objects.equals(this.pageNumber, describeInvocationsRequest.pageNumber) &&
        Objects.equals(this.pageSize, describeInvocationsRequest.pageSize) &&
        Objects.equals(this.projectName, describeInvocationsRequest.projectName) &&
        Objects.equals(this.repeatMode, describeInvocationsRequest.repeatMode) &&
        Objects.equals(this.tagFilters, describeInvocationsRequest.tagFilters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commandId, commandName, commandType, contentEncoding, invocationId, invocationName, invocationStatus, pageNumber, pageSize, projectName, repeatMode, tagFilters);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeInvocationsRequest {\n");
    
    sb.append("    commandId: ").append(toIndentedString(commandId)).append("\n");
    sb.append("    commandName: ").append(toIndentedString(commandName)).append("\n");
    sb.append("    commandType: ").append(toIndentedString(commandType)).append("\n");
    sb.append("    contentEncoding: ").append(toIndentedString(contentEncoding)).append("\n");
    sb.append("    invocationId: ").append(toIndentedString(invocationId)).append("\n");
    sb.append("    invocationName: ").append(toIndentedString(invocationName)).append("\n");
    sb.append("    invocationStatus: ").append(toIndentedString(invocationStatus)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    repeatMode: ").append(toIndentedString(repeatMode)).append("\n");
    sb.append("    tagFilters: ").append(toIndentedString(tagFilters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
