/*
 * cdn
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.cdn.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.cdn.model.RequestHeaderInstanceForSubmitPreloadTaskInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * SubmitPreloadTaskRequest
 */



public class SubmitPreloadTaskRequest {
  @SerializedName("Area")
  private String area = null;

  @SerializedName("ConcurrentLimit")
  private Long concurrentLimit = null;

  @SerializedName("Layer")
  private String layer = null;

  @SerializedName("RequestHeaderInstances")
  private List<RequestHeaderInstanceForSubmitPreloadTaskInput> requestHeaderInstances = null;

  @SerializedName("Urls")
  private String urls = null;

  public SubmitPreloadTaskRequest area(String area) {
    this.area = area;
    return this;
  }

   /**
   * Get area
   * @return area
  **/
  @Schema(description = "")
  public String getArea() {
    return area;
  }

  public void setArea(String area) {
    this.area = area;
  }

  public SubmitPreloadTaskRequest concurrentLimit(Long concurrentLimit) {
    this.concurrentLimit = concurrentLimit;
    return this;
  }

   /**
   * Get concurrentLimit
   * @return concurrentLimit
  **/
  @Schema(description = "")
  public Long getConcurrentLimit() {
    return concurrentLimit;
  }

  public void setConcurrentLimit(Long concurrentLimit) {
    this.concurrentLimit = concurrentLimit;
  }

  public SubmitPreloadTaskRequest layer(String layer) {
    this.layer = layer;
    return this;
  }

   /**
   * Get layer
   * @return layer
  **/
  @Schema(description = "")
  public String getLayer() {
    return layer;
  }

  public void setLayer(String layer) {
    this.layer = layer;
  }

  public SubmitPreloadTaskRequest requestHeaderInstances(List<RequestHeaderInstanceForSubmitPreloadTaskInput> requestHeaderInstances) {
    this.requestHeaderInstances = requestHeaderInstances;
    return this;
  }

  public SubmitPreloadTaskRequest addRequestHeaderInstancesItem(RequestHeaderInstanceForSubmitPreloadTaskInput requestHeaderInstancesItem) {
    if (this.requestHeaderInstances == null) {
      this.requestHeaderInstances = new ArrayList<RequestHeaderInstanceForSubmitPreloadTaskInput>();
    }
    this.requestHeaderInstances.add(requestHeaderInstancesItem);
    return this;
  }

   /**
   * Get requestHeaderInstances
   * @return requestHeaderInstances
  **/
  @Valid
  @Schema(description = "")
  public List<RequestHeaderInstanceForSubmitPreloadTaskInput> getRequestHeaderInstances() {
    return requestHeaderInstances;
  }

  public void setRequestHeaderInstances(List<RequestHeaderInstanceForSubmitPreloadTaskInput> requestHeaderInstances) {
    this.requestHeaderInstances = requestHeaderInstances;
  }

  public SubmitPreloadTaskRequest urls(String urls) {
    this.urls = urls;
    return this;
  }

   /**
   * Get urls
   * @return urls
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getUrls() {
    return urls;
  }

  public void setUrls(String urls) {
    this.urls = urls;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmitPreloadTaskRequest submitPreloadTaskRequest = (SubmitPreloadTaskRequest) o;
    return Objects.equals(this.area, submitPreloadTaskRequest.area) &&
        Objects.equals(this.concurrentLimit, submitPreloadTaskRequest.concurrentLimit) &&
        Objects.equals(this.layer, submitPreloadTaskRequest.layer) &&
        Objects.equals(this.requestHeaderInstances, submitPreloadTaskRequest.requestHeaderInstances) &&
        Objects.equals(this.urls, submitPreloadTaskRequest.urls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(area, concurrentLimit, layer, requestHeaderInstances, urls);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmitPreloadTaskRequest {\n");
    
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    concurrentLimit: ").append(toIndentedString(concurrentLimit)).append("\n");
    sb.append("    layer: ").append(toIndentedString(layer)).append("\n");
    sb.append("    requestHeaderInstances: ").append(toIndentedString(requestHeaderInstances)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
