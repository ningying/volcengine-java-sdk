/*
 * cdn
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.cdn.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.cdn.model.AreaAccessRuleForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.BandwidthLimitForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.BrowserCacheForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.CacheForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.CacheHostForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.CacheKeyForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.CompressionForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.ConditionalOriginForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.CustomErrorPageForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.CustomizeAccessRuleForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.DownloadSpeedLimitForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.HTTPSForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.HttpForcedRedirectForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.IPv6ForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.IpAccessRuleForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.IpFreqLimitForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.IpSpeedLimitForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.MethodDeniedRuleForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.MultiRangeForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.NegativeCacheForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.OfflineCacheForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.OriginAccessRuleForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.OriginArgForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.OriginCertCheckForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.OriginForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.OriginRetryForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.OriginRewriteForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.OriginSniForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.PageOptimizationForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.QuicForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.RedirectionRewriteForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.RefererAccessRuleForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.RemoteAuthForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.RequestBlockRuleForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.RequestHeaderForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.ResponseHeaderForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.RewriteHLSForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.SignedUrlAuthForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.TimeoutForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.UaAccessRuleForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.UrlNormalizeForDescribeCdnConfigOutput;
import com.volcengine.cdn.model.VideoDragForDescribeCdnConfigOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DomainConfigForDescribeCdnConfigOutput
 */



public class DomainConfigForDescribeCdnConfigOutput {
  @SerializedName("AreaAccessRule")
  private AreaAccessRuleForDescribeCdnConfigOutput areaAccessRule = null;

  @SerializedName("BackupCname")
  private String backupCname = null;

  @SerializedName("BandwidthLimit")
  private BandwidthLimitForDescribeCdnConfigOutput bandwidthLimit = null;

  @SerializedName("BrowserCache")
  private List<BrowserCacheForDescribeCdnConfigOutput> browserCache = null;

  @SerializedName("Cache")
  private List<CacheForDescribeCdnConfigOutput> cache = null;

  @SerializedName("CacheHost")
  private CacheHostForDescribeCdnConfigOutput cacheHost = null;

  @SerializedName("CacheKey")
  private List<CacheKeyForDescribeCdnConfigOutput> cacheKey = null;

  @SerializedName("Cname")
  private String cname = null;

  @SerializedName("Compression")
  private CompressionForDescribeCdnConfigOutput compression = null;

  @SerializedName("ConditionalOrigin")
  private ConditionalOriginForDescribeCdnConfigOutput conditionalOrigin = null;

  @SerializedName("CreateTime")
  private Long createTime = null;

  @SerializedName("CustomErrorPage")
  private CustomErrorPageForDescribeCdnConfigOutput customErrorPage = null;

  @SerializedName("CustomizeAccessRule")
  private CustomizeAccessRuleForDescribeCdnConfigOutput customizeAccessRule = null;

  @SerializedName("Domain")
  private String domain = null;

  @SerializedName("DownloadSpeedLimit")
  private DownloadSpeedLimitForDescribeCdnConfigOutput downloadSpeedLimit = null;

  @SerializedName("FollowRedirect")
  private Boolean followRedirect = null;

  @SerializedName("HTTPS")
  private HTTPSForDescribeCdnConfigOutput HTTPS = null;

  @SerializedName("HttpForcedRedirect")
  private HttpForcedRedirectForDescribeCdnConfigOutput httpForcedRedirect = null;

  @SerializedName("IPv6")
  private IPv6ForDescribeCdnConfigOutput ipv6 = null;

  @SerializedName("IpAccessRule")
  private IpAccessRuleForDescribeCdnConfigOutput ipAccessRule = null;

  @SerializedName("IpFreqLimit")
  private IpFreqLimitForDescribeCdnConfigOutput ipFreqLimit = null;

  @SerializedName("IpSpeedLimit")
  private IpSpeedLimitForDescribeCdnConfigOutput ipSpeedLimit = null;

  @SerializedName("LockStatus")
  private String lockStatus = null;

  @SerializedName("MethodDeniedRule")
  private MethodDeniedRuleForDescribeCdnConfigOutput methodDeniedRule = null;

  @SerializedName("MultiRange")
  private MultiRangeForDescribeCdnConfigOutput multiRange = null;

  @SerializedName("NegativeCache")
  private List<NegativeCacheForDescribeCdnConfigOutput> negativeCache = null;

  @SerializedName("OfflineCache")
  private OfflineCacheForDescribeCdnConfigOutput offlineCache = null;

  @SerializedName("Origin")
  private List<OriginForDescribeCdnConfigOutput> origin = null;

  @SerializedName("OriginAccessRule")
  private OriginAccessRuleForDescribeCdnConfigOutput originAccessRule = null;

  @SerializedName("OriginArg")
  private List<OriginArgForDescribeCdnConfigOutput> originArg = null;

  @SerializedName("OriginCertCheck")
  private OriginCertCheckForDescribeCdnConfigOutput originCertCheck = null;

  @SerializedName("OriginHost")
  private String originHost = null;

  @SerializedName("OriginIPv6")
  private String originIPv6 = null;

  @SerializedName("OriginProtocol")
  private String originProtocol = null;

  @SerializedName("OriginRange")
  private Boolean originRange = null;

  @SerializedName("OriginRetry")
  private OriginRetryForDescribeCdnConfigOutput originRetry = null;

  @SerializedName("OriginRewrite")
  private OriginRewriteForDescribeCdnConfigOutput originRewrite = null;

  @SerializedName("OriginSni")
  private OriginSniForDescribeCdnConfigOutput originSni = null;

  @SerializedName("PageOptimization")
  private PageOptimizationForDescribeCdnConfigOutput pageOptimization = null;

  @SerializedName("Project")
  private String project = null;

  @SerializedName("Quic")
  private QuicForDescribeCdnConfigOutput quic = null;

  @SerializedName("RedirectionRewrite")
  private RedirectionRewriteForDescribeCdnConfigOutput redirectionRewrite = null;

  @SerializedName("RefererAccessRule")
  private RefererAccessRuleForDescribeCdnConfigOutput refererAccessRule = null;

  @SerializedName("RemoteAuth")
  private RemoteAuthForDescribeCdnConfigOutput remoteAuth = null;

  @SerializedName("RequestBlockRule")
  private RequestBlockRuleForDescribeCdnConfigOutput requestBlockRule = null;

  @SerializedName("RequestHeader")
  private List<RequestHeaderForDescribeCdnConfigOutput> requestHeader = null;

  @SerializedName("ResponseHeader")
  private List<ResponseHeaderForDescribeCdnConfigOutput> responseHeader = null;

  @SerializedName("RewriteHLS")
  private RewriteHLSForDescribeCdnConfigOutput rewriteHLS = null;

  @SerializedName("ServiceRegion")
  private String serviceRegion = null;

  @SerializedName("ServiceType")
  private String serviceType = null;

  @SerializedName("SignedUrlAuth")
  private SignedUrlAuthForDescribeCdnConfigOutput signedUrlAuth = null;

  @SerializedName("Status")
  private String status = null;

  @SerializedName("Timeout")
  private TimeoutForDescribeCdnConfigOutput timeout = null;

  @SerializedName("UaAccessRule")
  private UaAccessRuleForDescribeCdnConfigOutput uaAccessRule = null;

  @SerializedName("UpdateTime")
  private Long updateTime = null;

  @SerializedName("UrlNormalize")
  private UrlNormalizeForDescribeCdnConfigOutput urlNormalize = null;

  @SerializedName("VideoDrag")
  private VideoDragForDescribeCdnConfigOutput videoDrag = null;

  public DomainConfigForDescribeCdnConfigOutput areaAccessRule(AreaAccessRuleForDescribeCdnConfigOutput areaAccessRule) {
    this.areaAccessRule = areaAccessRule;
    return this;
  }

   /**
   * Get areaAccessRule
   * @return areaAccessRule
  **/
  @Valid
  @Schema(description = "")
  public AreaAccessRuleForDescribeCdnConfigOutput getAreaAccessRule() {
    return areaAccessRule;
  }

  public void setAreaAccessRule(AreaAccessRuleForDescribeCdnConfigOutput areaAccessRule) {
    this.areaAccessRule = areaAccessRule;
  }

  public DomainConfigForDescribeCdnConfigOutput backupCname(String backupCname) {
    this.backupCname = backupCname;
    return this;
  }

   /**
   * Get backupCname
   * @return backupCname
  **/
  @Schema(description = "")
  public String getBackupCname() {
    return backupCname;
  }

  public void setBackupCname(String backupCname) {
    this.backupCname = backupCname;
  }

  public DomainConfigForDescribeCdnConfigOutput bandwidthLimit(BandwidthLimitForDescribeCdnConfigOutput bandwidthLimit) {
    this.bandwidthLimit = bandwidthLimit;
    return this;
  }

   /**
   * Get bandwidthLimit
   * @return bandwidthLimit
  **/
  @Valid
  @Schema(description = "")
  public BandwidthLimitForDescribeCdnConfigOutput getBandwidthLimit() {
    return bandwidthLimit;
  }

  public void setBandwidthLimit(BandwidthLimitForDescribeCdnConfigOutput bandwidthLimit) {
    this.bandwidthLimit = bandwidthLimit;
  }

  public DomainConfigForDescribeCdnConfigOutput browserCache(List<BrowserCacheForDescribeCdnConfigOutput> browserCache) {
    this.browserCache = browserCache;
    return this;
  }

  public DomainConfigForDescribeCdnConfigOutput addBrowserCacheItem(BrowserCacheForDescribeCdnConfigOutput browserCacheItem) {
    if (this.browserCache == null) {
      this.browserCache = new ArrayList<BrowserCacheForDescribeCdnConfigOutput>();
    }
    this.browserCache.add(browserCacheItem);
    return this;
  }

   /**
   * Get browserCache
   * @return browserCache
  **/
  @Valid
  @Schema(description = "")
  public List<BrowserCacheForDescribeCdnConfigOutput> getBrowserCache() {
    return browserCache;
  }

  public void setBrowserCache(List<BrowserCacheForDescribeCdnConfigOutput> browserCache) {
    this.browserCache = browserCache;
  }

  public DomainConfigForDescribeCdnConfigOutput cache(List<CacheForDescribeCdnConfigOutput> cache) {
    this.cache = cache;
    return this;
  }

  public DomainConfigForDescribeCdnConfigOutput addCacheItem(CacheForDescribeCdnConfigOutput cacheItem) {
    if (this.cache == null) {
      this.cache = new ArrayList<CacheForDescribeCdnConfigOutput>();
    }
    this.cache.add(cacheItem);
    return this;
  }

   /**
   * Get cache
   * @return cache
  **/
  @Valid
  @Schema(description = "")
  public List<CacheForDescribeCdnConfigOutput> getCache() {
    return cache;
  }

  public void setCache(List<CacheForDescribeCdnConfigOutput> cache) {
    this.cache = cache;
  }

  public DomainConfigForDescribeCdnConfigOutput cacheHost(CacheHostForDescribeCdnConfigOutput cacheHost) {
    this.cacheHost = cacheHost;
    return this;
  }

   /**
   * Get cacheHost
   * @return cacheHost
  **/
  @Valid
  @Schema(description = "")
  public CacheHostForDescribeCdnConfigOutput getCacheHost() {
    return cacheHost;
  }

  public void setCacheHost(CacheHostForDescribeCdnConfigOutput cacheHost) {
    this.cacheHost = cacheHost;
  }

  public DomainConfigForDescribeCdnConfigOutput cacheKey(List<CacheKeyForDescribeCdnConfigOutput> cacheKey) {
    this.cacheKey = cacheKey;
    return this;
  }

  public DomainConfigForDescribeCdnConfigOutput addCacheKeyItem(CacheKeyForDescribeCdnConfigOutput cacheKeyItem) {
    if (this.cacheKey == null) {
      this.cacheKey = new ArrayList<CacheKeyForDescribeCdnConfigOutput>();
    }
    this.cacheKey.add(cacheKeyItem);
    return this;
  }

   /**
   * Get cacheKey
   * @return cacheKey
  **/
  @Valid
  @Schema(description = "")
  public List<CacheKeyForDescribeCdnConfigOutput> getCacheKey() {
    return cacheKey;
  }

  public void setCacheKey(List<CacheKeyForDescribeCdnConfigOutput> cacheKey) {
    this.cacheKey = cacheKey;
  }

  public DomainConfigForDescribeCdnConfigOutput cname(String cname) {
    this.cname = cname;
    return this;
  }

   /**
   * Get cname
   * @return cname
  **/
  @Schema(description = "")
  public String getCname() {
    return cname;
  }

  public void setCname(String cname) {
    this.cname = cname;
  }

  public DomainConfigForDescribeCdnConfigOutput compression(CompressionForDescribeCdnConfigOutput compression) {
    this.compression = compression;
    return this;
  }

   /**
   * Get compression
   * @return compression
  **/
  @Valid
  @Schema(description = "")
  public CompressionForDescribeCdnConfigOutput getCompression() {
    return compression;
  }

  public void setCompression(CompressionForDescribeCdnConfigOutput compression) {
    this.compression = compression;
  }

  public DomainConfigForDescribeCdnConfigOutput conditionalOrigin(ConditionalOriginForDescribeCdnConfigOutput conditionalOrigin) {
    this.conditionalOrigin = conditionalOrigin;
    return this;
  }

   /**
   * Get conditionalOrigin
   * @return conditionalOrigin
  **/
  @Valid
  @Schema(description = "")
  public ConditionalOriginForDescribeCdnConfigOutput getConditionalOrigin() {
    return conditionalOrigin;
  }

  public void setConditionalOrigin(ConditionalOriginForDescribeCdnConfigOutput conditionalOrigin) {
    this.conditionalOrigin = conditionalOrigin;
  }

  public DomainConfigForDescribeCdnConfigOutput createTime(Long createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @Schema(description = "")
  public Long getCreateTime() {
    return createTime;
  }

  public void setCreateTime(Long createTime) {
    this.createTime = createTime;
  }

  public DomainConfigForDescribeCdnConfigOutput customErrorPage(CustomErrorPageForDescribeCdnConfigOutput customErrorPage) {
    this.customErrorPage = customErrorPage;
    return this;
  }

   /**
   * Get customErrorPage
   * @return customErrorPage
  **/
  @Valid
  @Schema(description = "")
  public CustomErrorPageForDescribeCdnConfigOutput getCustomErrorPage() {
    return customErrorPage;
  }

  public void setCustomErrorPage(CustomErrorPageForDescribeCdnConfigOutput customErrorPage) {
    this.customErrorPage = customErrorPage;
  }

  public DomainConfigForDescribeCdnConfigOutput customizeAccessRule(CustomizeAccessRuleForDescribeCdnConfigOutput customizeAccessRule) {
    this.customizeAccessRule = customizeAccessRule;
    return this;
  }

   /**
   * Get customizeAccessRule
   * @return customizeAccessRule
  **/
  @Valid
  @Schema(description = "")
  public CustomizeAccessRuleForDescribeCdnConfigOutput getCustomizeAccessRule() {
    return customizeAccessRule;
  }

  public void setCustomizeAccessRule(CustomizeAccessRuleForDescribeCdnConfigOutput customizeAccessRule) {
    this.customizeAccessRule = customizeAccessRule;
  }

  public DomainConfigForDescribeCdnConfigOutput domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @Schema(description = "")
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }

  public DomainConfigForDescribeCdnConfigOutput downloadSpeedLimit(DownloadSpeedLimitForDescribeCdnConfigOutput downloadSpeedLimit) {
    this.downloadSpeedLimit = downloadSpeedLimit;
    return this;
  }

   /**
   * Get downloadSpeedLimit
   * @return downloadSpeedLimit
  **/
  @Valid
  @Schema(description = "")
  public DownloadSpeedLimitForDescribeCdnConfigOutput getDownloadSpeedLimit() {
    return downloadSpeedLimit;
  }

  public void setDownloadSpeedLimit(DownloadSpeedLimitForDescribeCdnConfigOutput downloadSpeedLimit) {
    this.downloadSpeedLimit = downloadSpeedLimit;
  }

  public DomainConfigForDescribeCdnConfigOutput followRedirect(Boolean followRedirect) {
    this.followRedirect = followRedirect;
    return this;
  }

   /**
   * Get followRedirect
   * @return followRedirect
  **/
  @Schema(description = "")
  public Boolean isFollowRedirect() {
    return followRedirect;
  }

  public void setFollowRedirect(Boolean followRedirect) {
    this.followRedirect = followRedirect;
  }

  public DomainConfigForDescribeCdnConfigOutput HTTPS(HTTPSForDescribeCdnConfigOutput HTTPS) {
    this.HTTPS = HTTPS;
    return this;
  }

   /**
   * Get HTTPS
   * @return HTTPS
  **/
  @Valid
  @Schema(description = "")
  public HTTPSForDescribeCdnConfigOutput getHTTPS() {
    return HTTPS;
  }

  public void setHTTPS(HTTPSForDescribeCdnConfigOutput HTTPS) {
    this.HTTPS = HTTPS;
  }

  public DomainConfigForDescribeCdnConfigOutput httpForcedRedirect(HttpForcedRedirectForDescribeCdnConfigOutput httpForcedRedirect) {
    this.httpForcedRedirect = httpForcedRedirect;
    return this;
  }

   /**
   * Get httpForcedRedirect
   * @return httpForcedRedirect
  **/
  @Valid
  @Schema(description = "")
  public HttpForcedRedirectForDescribeCdnConfigOutput getHttpForcedRedirect() {
    return httpForcedRedirect;
  }

  public void setHttpForcedRedirect(HttpForcedRedirectForDescribeCdnConfigOutput httpForcedRedirect) {
    this.httpForcedRedirect = httpForcedRedirect;
  }

  public DomainConfigForDescribeCdnConfigOutput ipv6(IPv6ForDescribeCdnConfigOutput ipv6) {
    this.ipv6 = ipv6;
    return this;
  }

   /**
   * Get ipv6
   * @return ipv6
  **/
  @Valid
  @Schema(description = "")
  public IPv6ForDescribeCdnConfigOutput getIpv6() {
    return ipv6;
  }

  public void setIpv6(IPv6ForDescribeCdnConfigOutput ipv6) {
    this.ipv6 = ipv6;
  }

  public DomainConfigForDescribeCdnConfigOutput ipAccessRule(IpAccessRuleForDescribeCdnConfigOutput ipAccessRule) {
    this.ipAccessRule = ipAccessRule;
    return this;
  }

   /**
   * Get ipAccessRule
   * @return ipAccessRule
  **/
  @Valid
  @Schema(description = "")
  public IpAccessRuleForDescribeCdnConfigOutput getIpAccessRule() {
    return ipAccessRule;
  }

  public void setIpAccessRule(IpAccessRuleForDescribeCdnConfigOutput ipAccessRule) {
    this.ipAccessRule = ipAccessRule;
  }

  public DomainConfigForDescribeCdnConfigOutput ipFreqLimit(IpFreqLimitForDescribeCdnConfigOutput ipFreqLimit) {
    this.ipFreqLimit = ipFreqLimit;
    return this;
  }

   /**
   * Get ipFreqLimit
   * @return ipFreqLimit
  **/
  @Valid
  @Schema(description = "")
  public IpFreqLimitForDescribeCdnConfigOutput getIpFreqLimit() {
    return ipFreqLimit;
  }

  public void setIpFreqLimit(IpFreqLimitForDescribeCdnConfigOutput ipFreqLimit) {
    this.ipFreqLimit = ipFreqLimit;
  }

  public DomainConfigForDescribeCdnConfigOutput ipSpeedLimit(IpSpeedLimitForDescribeCdnConfigOutput ipSpeedLimit) {
    this.ipSpeedLimit = ipSpeedLimit;
    return this;
  }

   /**
   * Get ipSpeedLimit
   * @return ipSpeedLimit
  **/
  @Valid
  @Schema(description = "")
  public IpSpeedLimitForDescribeCdnConfigOutput getIpSpeedLimit() {
    return ipSpeedLimit;
  }

  public void setIpSpeedLimit(IpSpeedLimitForDescribeCdnConfigOutput ipSpeedLimit) {
    this.ipSpeedLimit = ipSpeedLimit;
  }

  public DomainConfigForDescribeCdnConfigOutput lockStatus(String lockStatus) {
    this.lockStatus = lockStatus;
    return this;
  }

   /**
   * Get lockStatus
   * @return lockStatus
  **/
  @Schema(description = "")
  public String getLockStatus() {
    return lockStatus;
  }

  public void setLockStatus(String lockStatus) {
    this.lockStatus = lockStatus;
  }

  public DomainConfigForDescribeCdnConfigOutput methodDeniedRule(MethodDeniedRuleForDescribeCdnConfigOutput methodDeniedRule) {
    this.methodDeniedRule = methodDeniedRule;
    return this;
  }

   /**
   * Get methodDeniedRule
   * @return methodDeniedRule
  **/
  @Valid
  @Schema(description = "")
  public MethodDeniedRuleForDescribeCdnConfigOutput getMethodDeniedRule() {
    return methodDeniedRule;
  }

  public void setMethodDeniedRule(MethodDeniedRuleForDescribeCdnConfigOutput methodDeniedRule) {
    this.methodDeniedRule = methodDeniedRule;
  }

  public DomainConfigForDescribeCdnConfigOutput multiRange(MultiRangeForDescribeCdnConfigOutput multiRange) {
    this.multiRange = multiRange;
    return this;
  }

   /**
   * Get multiRange
   * @return multiRange
  **/
  @Valid
  @Schema(description = "")
  public MultiRangeForDescribeCdnConfigOutput getMultiRange() {
    return multiRange;
  }

  public void setMultiRange(MultiRangeForDescribeCdnConfigOutput multiRange) {
    this.multiRange = multiRange;
  }

  public DomainConfigForDescribeCdnConfigOutput negativeCache(List<NegativeCacheForDescribeCdnConfigOutput> negativeCache) {
    this.negativeCache = negativeCache;
    return this;
  }

  public DomainConfigForDescribeCdnConfigOutput addNegativeCacheItem(NegativeCacheForDescribeCdnConfigOutput negativeCacheItem) {
    if (this.negativeCache == null) {
      this.negativeCache = new ArrayList<NegativeCacheForDescribeCdnConfigOutput>();
    }
    this.negativeCache.add(negativeCacheItem);
    return this;
  }

   /**
   * Get negativeCache
   * @return negativeCache
  **/
  @Valid
  @Schema(description = "")
  public List<NegativeCacheForDescribeCdnConfigOutput> getNegativeCache() {
    return negativeCache;
  }

  public void setNegativeCache(List<NegativeCacheForDescribeCdnConfigOutput> negativeCache) {
    this.negativeCache = negativeCache;
  }

  public DomainConfigForDescribeCdnConfigOutput offlineCache(OfflineCacheForDescribeCdnConfigOutput offlineCache) {
    this.offlineCache = offlineCache;
    return this;
  }

   /**
   * Get offlineCache
   * @return offlineCache
  **/
  @Valid
  @Schema(description = "")
  public OfflineCacheForDescribeCdnConfigOutput getOfflineCache() {
    return offlineCache;
  }

  public void setOfflineCache(OfflineCacheForDescribeCdnConfigOutput offlineCache) {
    this.offlineCache = offlineCache;
  }

  public DomainConfigForDescribeCdnConfigOutput origin(List<OriginForDescribeCdnConfigOutput> origin) {
    this.origin = origin;
    return this;
  }

  public DomainConfigForDescribeCdnConfigOutput addOriginItem(OriginForDescribeCdnConfigOutput originItem) {
    if (this.origin == null) {
      this.origin = new ArrayList<OriginForDescribeCdnConfigOutput>();
    }
    this.origin.add(originItem);
    return this;
  }

   /**
   * Get origin
   * @return origin
  **/
  @Valid
  @Schema(description = "")
  public List<OriginForDescribeCdnConfigOutput> getOrigin() {
    return origin;
  }

  public void setOrigin(List<OriginForDescribeCdnConfigOutput> origin) {
    this.origin = origin;
  }

  public DomainConfigForDescribeCdnConfigOutput originAccessRule(OriginAccessRuleForDescribeCdnConfigOutput originAccessRule) {
    this.originAccessRule = originAccessRule;
    return this;
  }

   /**
   * Get originAccessRule
   * @return originAccessRule
  **/
  @Valid
  @Schema(description = "")
  public OriginAccessRuleForDescribeCdnConfigOutput getOriginAccessRule() {
    return originAccessRule;
  }

  public void setOriginAccessRule(OriginAccessRuleForDescribeCdnConfigOutput originAccessRule) {
    this.originAccessRule = originAccessRule;
  }

  public DomainConfigForDescribeCdnConfigOutput originArg(List<OriginArgForDescribeCdnConfigOutput> originArg) {
    this.originArg = originArg;
    return this;
  }

  public DomainConfigForDescribeCdnConfigOutput addOriginArgItem(OriginArgForDescribeCdnConfigOutput originArgItem) {
    if (this.originArg == null) {
      this.originArg = new ArrayList<OriginArgForDescribeCdnConfigOutput>();
    }
    this.originArg.add(originArgItem);
    return this;
  }

   /**
   * Get originArg
   * @return originArg
  **/
  @Valid
  @Schema(description = "")
  public List<OriginArgForDescribeCdnConfigOutput> getOriginArg() {
    return originArg;
  }

  public void setOriginArg(List<OriginArgForDescribeCdnConfigOutput> originArg) {
    this.originArg = originArg;
  }

  public DomainConfigForDescribeCdnConfigOutput originCertCheck(OriginCertCheckForDescribeCdnConfigOutput originCertCheck) {
    this.originCertCheck = originCertCheck;
    return this;
  }

   /**
   * Get originCertCheck
   * @return originCertCheck
  **/
  @Valid
  @Schema(description = "")
  public OriginCertCheckForDescribeCdnConfigOutput getOriginCertCheck() {
    return originCertCheck;
  }

  public void setOriginCertCheck(OriginCertCheckForDescribeCdnConfigOutput originCertCheck) {
    this.originCertCheck = originCertCheck;
  }

  public DomainConfigForDescribeCdnConfigOutput originHost(String originHost) {
    this.originHost = originHost;
    return this;
  }

   /**
   * Get originHost
   * @return originHost
  **/
  @Schema(description = "")
  public String getOriginHost() {
    return originHost;
  }

  public void setOriginHost(String originHost) {
    this.originHost = originHost;
  }

  public DomainConfigForDescribeCdnConfigOutput originIPv6(String originIPv6) {
    this.originIPv6 = originIPv6;
    return this;
  }

   /**
   * Get originIPv6
   * @return originIPv6
  **/
  @Schema(description = "")
  public String getOriginIPv6() {
    return originIPv6;
  }

  public void setOriginIPv6(String originIPv6) {
    this.originIPv6 = originIPv6;
  }

  public DomainConfigForDescribeCdnConfigOutput originProtocol(String originProtocol) {
    this.originProtocol = originProtocol;
    return this;
  }

   /**
   * Get originProtocol
   * @return originProtocol
  **/
  @Schema(description = "")
  public String getOriginProtocol() {
    return originProtocol;
  }

  public void setOriginProtocol(String originProtocol) {
    this.originProtocol = originProtocol;
  }

  public DomainConfigForDescribeCdnConfigOutput originRange(Boolean originRange) {
    this.originRange = originRange;
    return this;
  }

   /**
   * Get originRange
   * @return originRange
  **/
  @Schema(description = "")
  public Boolean isOriginRange() {
    return originRange;
  }

  public void setOriginRange(Boolean originRange) {
    this.originRange = originRange;
  }

  public DomainConfigForDescribeCdnConfigOutput originRetry(OriginRetryForDescribeCdnConfigOutput originRetry) {
    this.originRetry = originRetry;
    return this;
  }

   /**
   * Get originRetry
   * @return originRetry
  **/
  @Valid
  @Schema(description = "")
  public OriginRetryForDescribeCdnConfigOutput getOriginRetry() {
    return originRetry;
  }

  public void setOriginRetry(OriginRetryForDescribeCdnConfigOutput originRetry) {
    this.originRetry = originRetry;
  }

  public DomainConfigForDescribeCdnConfigOutput originRewrite(OriginRewriteForDescribeCdnConfigOutput originRewrite) {
    this.originRewrite = originRewrite;
    return this;
  }

   /**
   * Get originRewrite
   * @return originRewrite
  **/
  @Valid
  @Schema(description = "")
  public OriginRewriteForDescribeCdnConfigOutput getOriginRewrite() {
    return originRewrite;
  }

  public void setOriginRewrite(OriginRewriteForDescribeCdnConfigOutput originRewrite) {
    this.originRewrite = originRewrite;
  }

  public DomainConfigForDescribeCdnConfigOutput originSni(OriginSniForDescribeCdnConfigOutput originSni) {
    this.originSni = originSni;
    return this;
  }

   /**
   * Get originSni
   * @return originSni
  **/
  @Valid
  @Schema(description = "")
  public OriginSniForDescribeCdnConfigOutput getOriginSni() {
    return originSni;
  }

  public void setOriginSni(OriginSniForDescribeCdnConfigOutput originSni) {
    this.originSni = originSni;
  }

  public DomainConfigForDescribeCdnConfigOutput pageOptimization(PageOptimizationForDescribeCdnConfigOutput pageOptimization) {
    this.pageOptimization = pageOptimization;
    return this;
  }

   /**
   * Get pageOptimization
   * @return pageOptimization
  **/
  @Valid
  @Schema(description = "")
  public PageOptimizationForDescribeCdnConfigOutput getPageOptimization() {
    return pageOptimization;
  }

  public void setPageOptimization(PageOptimizationForDescribeCdnConfigOutput pageOptimization) {
    this.pageOptimization = pageOptimization;
  }

  public DomainConfigForDescribeCdnConfigOutput project(String project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @Schema(description = "")
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }

  public DomainConfigForDescribeCdnConfigOutput quic(QuicForDescribeCdnConfigOutput quic) {
    this.quic = quic;
    return this;
  }

   /**
   * Get quic
   * @return quic
  **/
  @Valid
  @Schema(description = "")
  public QuicForDescribeCdnConfigOutput getQuic() {
    return quic;
  }

  public void setQuic(QuicForDescribeCdnConfigOutput quic) {
    this.quic = quic;
  }

  public DomainConfigForDescribeCdnConfigOutput redirectionRewrite(RedirectionRewriteForDescribeCdnConfigOutput redirectionRewrite) {
    this.redirectionRewrite = redirectionRewrite;
    return this;
  }

   /**
   * Get redirectionRewrite
   * @return redirectionRewrite
  **/
  @Valid
  @Schema(description = "")
  public RedirectionRewriteForDescribeCdnConfigOutput getRedirectionRewrite() {
    return redirectionRewrite;
  }

  public void setRedirectionRewrite(RedirectionRewriteForDescribeCdnConfigOutput redirectionRewrite) {
    this.redirectionRewrite = redirectionRewrite;
  }

  public DomainConfigForDescribeCdnConfigOutput refererAccessRule(RefererAccessRuleForDescribeCdnConfigOutput refererAccessRule) {
    this.refererAccessRule = refererAccessRule;
    return this;
  }

   /**
   * Get refererAccessRule
   * @return refererAccessRule
  **/
  @Valid
  @Schema(description = "")
  public RefererAccessRuleForDescribeCdnConfigOutput getRefererAccessRule() {
    return refererAccessRule;
  }

  public void setRefererAccessRule(RefererAccessRuleForDescribeCdnConfigOutput refererAccessRule) {
    this.refererAccessRule = refererAccessRule;
  }

  public DomainConfigForDescribeCdnConfigOutput remoteAuth(RemoteAuthForDescribeCdnConfigOutput remoteAuth) {
    this.remoteAuth = remoteAuth;
    return this;
  }

   /**
   * Get remoteAuth
   * @return remoteAuth
  **/
  @Valid
  @Schema(description = "")
  public RemoteAuthForDescribeCdnConfigOutput getRemoteAuth() {
    return remoteAuth;
  }

  public void setRemoteAuth(RemoteAuthForDescribeCdnConfigOutput remoteAuth) {
    this.remoteAuth = remoteAuth;
  }

  public DomainConfigForDescribeCdnConfigOutput requestBlockRule(RequestBlockRuleForDescribeCdnConfigOutput requestBlockRule) {
    this.requestBlockRule = requestBlockRule;
    return this;
  }

   /**
   * Get requestBlockRule
   * @return requestBlockRule
  **/
  @Valid
  @Schema(description = "")
  public RequestBlockRuleForDescribeCdnConfigOutput getRequestBlockRule() {
    return requestBlockRule;
  }

  public void setRequestBlockRule(RequestBlockRuleForDescribeCdnConfigOutput requestBlockRule) {
    this.requestBlockRule = requestBlockRule;
  }

  public DomainConfigForDescribeCdnConfigOutput requestHeader(List<RequestHeaderForDescribeCdnConfigOutput> requestHeader) {
    this.requestHeader = requestHeader;
    return this;
  }

  public DomainConfigForDescribeCdnConfigOutput addRequestHeaderItem(RequestHeaderForDescribeCdnConfigOutput requestHeaderItem) {
    if (this.requestHeader == null) {
      this.requestHeader = new ArrayList<RequestHeaderForDescribeCdnConfigOutput>();
    }
    this.requestHeader.add(requestHeaderItem);
    return this;
  }

   /**
   * Get requestHeader
   * @return requestHeader
  **/
  @Valid
  @Schema(description = "")
  public List<RequestHeaderForDescribeCdnConfigOutput> getRequestHeader() {
    return requestHeader;
  }

  public void setRequestHeader(List<RequestHeaderForDescribeCdnConfigOutput> requestHeader) {
    this.requestHeader = requestHeader;
  }

  public DomainConfigForDescribeCdnConfigOutput responseHeader(List<ResponseHeaderForDescribeCdnConfigOutput> responseHeader) {
    this.responseHeader = responseHeader;
    return this;
  }

  public DomainConfigForDescribeCdnConfigOutput addResponseHeaderItem(ResponseHeaderForDescribeCdnConfigOutput responseHeaderItem) {
    if (this.responseHeader == null) {
      this.responseHeader = new ArrayList<ResponseHeaderForDescribeCdnConfigOutput>();
    }
    this.responseHeader.add(responseHeaderItem);
    return this;
  }

   /**
   * Get responseHeader
   * @return responseHeader
  **/
  @Valid
  @Schema(description = "")
  public List<ResponseHeaderForDescribeCdnConfigOutput> getResponseHeader() {
    return responseHeader;
  }

  public void setResponseHeader(List<ResponseHeaderForDescribeCdnConfigOutput> responseHeader) {
    this.responseHeader = responseHeader;
  }

  public DomainConfigForDescribeCdnConfigOutput rewriteHLS(RewriteHLSForDescribeCdnConfigOutput rewriteHLS) {
    this.rewriteHLS = rewriteHLS;
    return this;
  }

   /**
   * Get rewriteHLS
   * @return rewriteHLS
  **/
  @Valid
  @Schema(description = "")
  public RewriteHLSForDescribeCdnConfigOutput getRewriteHLS() {
    return rewriteHLS;
  }

  public void setRewriteHLS(RewriteHLSForDescribeCdnConfigOutput rewriteHLS) {
    this.rewriteHLS = rewriteHLS;
  }

  public DomainConfigForDescribeCdnConfigOutput serviceRegion(String serviceRegion) {
    this.serviceRegion = serviceRegion;
    return this;
  }

   /**
   * Get serviceRegion
   * @return serviceRegion
  **/
  @Schema(description = "")
  public String getServiceRegion() {
    return serviceRegion;
  }

  public void setServiceRegion(String serviceRegion) {
    this.serviceRegion = serviceRegion;
  }

  public DomainConfigForDescribeCdnConfigOutput serviceType(String serviceType) {
    this.serviceType = serviceType;
    return this;
  }

   /**
   * Get serviceType
   * @return serviceType
  **/
  @Schema(description = "")
  public String getServiceType() {
    return serviceType;
  }

  public void setServiceType(String serviceType) {
    this.serviceType = serviceType;
  }

  public DomainConfigForDescribeCdnConfigOutput signedUrlAuth(SignedUrlAuthForDescribeCdnConfigOutput signedUrlAuth) {
    this.signedUrlAuth = signedUrlAuth;
    return this;
  }

   /**
   * Get signedUrlAuth
   * @return signedUrlAuth
  **/
  @Valid
  @Schema(description = "")
  public SignedUrlAuthForDescribeCdnConfigOutput getSignedUrlAuth() {
    return signedUrlAuth;
  }

  public void setSignedUrlAuth(SignedUrlAuthForDescribeCdnConfigOutput signedUrlAuth) {
    this.signedUrlAuth = signedUrlAuth;
  }

  public DomainConfigForDescribeCdnConfigOutput status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public DomainConfigForDescribeCdnConfigOutput timeout(TimeoutForDescribeCdnConfigOutput timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * Get timeout
   * @return timeout
  **/
  @Valid
  @Schema(description = "")
  public TimeoutForDescribeCdnConfigOutput getTimeout() {
    return timeout;
  }

  public void setTimeout(TimeoutForDescribeCdnConfigOutput timeout) {
    this.timeout = timeout;
  }

  public DomainConfigForDescribeCdnConfigOutput uaAccessRule(UaAccessRuleForDescribeCdnConfigOutput uaAccessRule) {
    this.uaAccessRule = uaAccessRule;
    return this;
  }

   /**
   * Get uaAccessRule
   * @return uaAccessRule
  **/
  @Valid
  @Schema(description = "")
  public UaAccessRuleForDescribeCdnConfigOutput getUaAccessRule() {
    return uaAccessRule;
  }

  public void setUaAccessRule(UaAccessRuleForDescribeCdnConfigOutput uaAccessRule) {
    this.uaAccessRule = uaAccessRule;
  }

  public DomainConfigForDescribeCdnConfigOutput updateTime(Long updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public Long getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(Long updateTime) {
    this.updateTime = updateTime;
  }

  public DomainConfigForDescribeCdnConfigOutput urlNormalize(UrlNormalizeForDescribeCdnConfigOutput urlNormalize) {
    this.urlNormalize = urlNormalize;
    return this;
  }

   /**
   * Get urlNormalize
   * @return urlNormalize
  **/
  @Valid
  @Schema(description = "")
  public UrlNormalizeForDescribeCdnConfigOutput getUrlNormalize() {
    return urlNormalize;
  }

  public void setUrlNormalize(UrlNormalizeForDescribeCdnConfigOutput urlNormalize) {
    this.urlNormalize = urlNormalize;
  }

  public DomainConfigForDescribeCdnConfigOutput videoDrag(VideoDragForDescribeCdnConfigOutput videoDrag) {
    this.videoDrag = videoDrag;
    return this;
  }

   /**
   * Get videoDrag
   * @return videoDrag
  **/
  @Valid
  @Schema(description = "")
  public VideoDragForDescribeCdnConfigOutput getVideoDrag() {
    return videoDrag;
  }

  public void setVideoDrag(VideoDragForDescribeCdnConfigOutput videoDrag) {
    this.videoDrag = videoDrag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainConfigForDescribeCdnConfigOutput domainConfigForDescribeCdnConfigOutput = (DomainConfigForDescribeCdnConfigOutput) o;
    return Objects.equals(this.areaAccessRule, domainConfigForDescribeCdnConfigOutput.areaAccessRule) &&
        Objects.equals(this.backupCname, domainConfigForDescribeCdnConfigOutput.backupCname) &&
        Objects.equals(this.bandwidthLimit, domainConfigForDescribeCdnConfigOutput.bandwidthLimit) &&
        Objects.equals(this.browserCache, domainConfigForDescribeCdnConfigOutput.browserCache) &&
        Objects.equals(this.cache, domainConfigForDescribeCdnConfigOutput.cache) &&
        Objects.equals(this.cacheHost, domainConfigForDescribeCdnConfigOutput.cacheHost) &&
        Objects.equals(this.cacheKey, domainConfigForDescribeCdnConfigOutput.cacheKey) &&
        Objects.equals(this.cname, domainConfigForDescribeCdnConfigOutput.cname) &&
        Objects.equals(this.compression, domainConfigForDescribeCdnConfigOutput.compression) &&
        Objects.equals(this.conditionalOrigin, domainConfigForDescribeCdnConfigOutput.conditionalOrigin) &&
        Objects.equals(this.createTime, domainConfigForDescribeCdnConfigOutput.createTime) &&
        Objects.equals(this.customErrorPage, domainConfigForDescribeCdnConfigOutput.customErrorPage) &&
        Objects.equals(this.customizeAccessRule, domainConfigForDescribeCdnConfigOutput.customizeAccessRule) &&
        Objects.equals(this.domain, domainConfigForDescribeCdnConfigOutput.domain) &&
        Objects.equals(this.downloadSpeedLimit, domainConfigForDescribeCdnConfigOutput.downloadSpeedLimit) &&
        Objects.equals(this.followRedirect, domainConfigForDescribeCdnConfigOutput.followRedirect) &&
        Objects.equals(this.HTTPS, domainConfigForDescribeCdnConfigOutput.HTTPS) &&
        Objects.equals(this.httpForcedRedirect, domainConfigForDescribeCdnConfigOutput.httpForcedRedirect) &&
        Objects.equals(this.ipv6, domainConfigForDescribeCdnConfigOutput.ipv6) &&
        Objects.equals(this.ipAccessRule, domainConfigForDescribeCdnConfigOutput.ipAccessRule) &&
        Objects.equals(this.ipFreqLimit, domainConfigForDescribeCdnConfigOutput.ipFreqLimit) &&
        Objects.equals(this.ipSpeedLimit, domainConfigForDescribeCdnConfigOutput.ipSpeedLimit) &&
        Objects.equals(this.lockStatus, domainConfigForDescribeCdnConfigOutput.lockStatus) &&
        Objects.equals(this.methodDeniedRule, domainConfigForDescribeCdnConfigOutput.methodDeniedRule) &&
        Objects.equals(this.multiRange, domainConfigForDescribeCdnConfigOutput.multiRange) &&
        Objects.equals(this.negativeCache, domainConfigForDescribeCdnConfigOutput.negativeCache) &&
        Objects.equals(this.offlineCache, domainConfigForDescribeCdnConfigOutput.offlineCache) &&
        Objects.equals(this.origin, domainConfigForDescribeCdnConfigOutput.origin) &&
        Objects.equals(this.originAccessRule, domainConfigForDescribeCdnConfigOutput.originAccessRule) &&
        Objects.equals(this.originArg, domainConfigForDescribeCdnConfigOutput.originArg) &&
        Objects.equals(this.originCertCheck, domainConfigForDescribeCdnConfigOutput.originCertCheck) &&
        Objects.equals(this.originHost, domainConfigForDescribeCdnConfigOutput.originHost) &&
        Objects.equals(this.originIPv6, domainConfigForDescribeCdnConfigOutput.originIPv6) &&
        Objects.equals(this.originProtocol, domainConfigForDescribeCdnConfigOutput.originProtocol) &&
        Objects.equals(this.originRange, domainConfigForDescribeCdnConfigOutput.originRange) &&
        Objects.equals(this.originRetry, domainConfigForDescribeCdnConfigOutput.originRetry) &&
        Objects.equals(this.originRewrite, domainConfigForDescribeCdnConfigOutput.originRewrite) &&
        Objects.equals(this.originSni, domainConfigForDescribeCdnConfigOutput.originSni) &&
        Objects.equals(this.pageOptimization, domainConfigForDescribeCdnConfigOutput.pageOptimization) &&
        Objects.equals(this.project, domainConfigForDescribeCdnConfigOutput.project) &&
        Objects.equals(this.quic, domainConfigForDescribeCdnConfigOutput.quic) &&
        Objects.equals(this.redirectionRewrite, domainConfigForDescribeCdnConfigOutput.redirectionRewrite) &&
        Objects.equals(this.refererAccessRule, domainConfigForDescribeCdnConfigOutput.refererAccessRule) &&
        Objects.equals(this.remoteAuth, domainConfigForDescribeCdnConfigOutput.remoteAuth) &&
        Objects.equals(this.requestBlockRule, domainConfigForDescribeCdnConfigOutput.requestBlockRule) &&
        Objects.equals(this.requestHeader, domainConfigForDescribeCdnConfigOutput.requestHeader) &&
        Objects.equals(this.responseHeader, domainConfigForDescribeCdnConfigOutput.responseHeader) &&
        Objects.equals(this.rewriteHLS, domainConfigForDescribeCdnConfigOutput.rewriteHLS) &&
        Objects.equals(this.serviceRegion, domainConfigForDescribeCdnConfigOutput.serviceRegion) &&
        Objects.equals(this.serviceType, domainConfigForDescribeCdnConfigOutput.serviceType) &&
        Objects.equals(this.signedUrlAuth, domainConfigForDescribeCdnConfigOutput.signedUrlAuth) &&
        Objects.equals(this.status, domainConfigForDescribeCdnConfigOutput.status) &&
        Objects.equals(this.timeout, domainConfigForDescribeCdnConfigOutput.timeout) &&
        Objects.equals(this.uaAccessRule, domainConfigForDescribeCdnConfigOutput.uaAccessRule) &&
        Objects.equals(this.updateTime, domainConfigForDescribeCdnConfigOutput.updateTime) &&
        Objects.equals(this.urlNormalize, domainConfigForDescribeCdnConfigOutput.urlNormalize) &&
        Objects.equals(this.videoDrag, domainConfigForDescribeCdnConfigOutput.videoDrag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(areaAccessRule, backupCname, bandwidthLimit, browserCache, cache, cacheHost, cacheKey, cname, compression, conditionalOrigin, createTime, customErrorPage, customizeAccessRule, domain, downloadSpeedLimit, followRedirect, HTTPS, httpForcedRedirect, ipv6, ipAccessRule, ipFreqLimit, ipSpeedLimit, lockStatus, methodDeniedRule, multiRange, negativeCache, offlineCache, origin, originAccessRule, originArg, originCertCheck, originHost, originIPv6, originProtocol, originRange, originRetry, originRewrite, originSni, pageOptimization, project, quic, redirectionRewrite, refererAccessRule, remoteAuth, requestBlockRule, requestHeader, responseHeader, rewriteHLS, serviceRegion, serviceType, signedUrlAuth, status, timeout, uaAccessRule, updateTime, urlNormalize, videoDrag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainConfigForDescribeCdnConfigOutput {\n");
    
    sb.append("    areaAccessRule: ").append(toIndentedString(areaAccessRule)).append("\n");
    sb.append("    backupCname: ").append(toIndentedString(backupCname)).append("\n");
    sb.append("    bandwidthLimit: ").append(toIndentedString(bandwidthLimit)).append("\n");
    sb.append("    browserCache: ").append(toIndentedString(browserCache)).append("\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    cacheHost: ").append(toIndentedString(cacheHost)).append("\n");
    sb.append("    cacheKey: ").append(toIndentedString(cacheKey)).append("\n");
    sb.append("    cname: ").append(toIndentedString(cname)).append("\n");
    sb.append("    compression: ").append(toIndentedString(compression)).append("\n");
    sb.append("    conditionalOrigin: ").append(toIndentedString(conditionalOrigin)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    customErrorPage: ").append(toIndentedString(customErrorPage)).append("\n");
    sb.append("    customizeAccessRule: ").append(toIndentedString(customizeAccessRule)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    downloadSpeedLimit: ").append(toIndentedString(downloadSpeedLimit)).append("\n");
    sb.append("    followRedirect: ").append(toIndentedString(followRedirect)).append("\n");
    sb.append("    HTTPS: ").append(toIndentedString(HTTPS)).append("\n");
    sb.append("    httpForcedRedirect: ").append(toIndentedString(httpForcedRedirect)).append("\n");
    sb.append("    ipv6: ").append(toIndentedString(ipv6)).append("\n");
    sb.append("    ipAccessRule: ").append(toIndentedString(ipAccessRule)).append("\n");
    sb.append("    ipFreqLimit: ").append(toIndentedString(ipFreqLimit)).append("\n");
    sb.append("    ipSpeedLimit: ").append(toIndentedString(ipSpeedLimit)).append("\n");
    sb.append("    lockStatus: ").append(toIndentedString(lockStatus)).append("\n");
    sb.append("    methodDeniedRule: ").append(toIndentedString(methodDeniedRule)).append("\n");
    sb.append("    multiRange: ").append(toIndentedString(multiRange)).append("\n");
    sb.append("    negativeCache: ").append(toIndentedString(negativeCache)).append("\n");
    sb.append("    offlineCache: ").append(toIndentedString(offlineCache)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    originAccessRule: ").append(toIndentedString(originAccessRule)).append("\n");
    sb.append("    originArg: ").append(toIndentedString(originArg)).append("\n");
    sb.append("    originCertCheck: ").append(toIndentedString(originCertCheck)).append("\n");
    sb.append("    originHost: ").append(toIndentedString(originHost)).append("\n");
    sb.append("    originIPv6: ").append(toIndentedString(originIPv6)).append("\n");
    sb.append("    originProtocol: ").append(toIndentedString(originProtocol)).append("\n");
    sb.append("    originRange: ").append(toIndentedString(originRange)).append("\n");
    sb.append("    originRetry: ").append(toIndentedString(originRetry)).append("\n");
    sb.append("    originRewrite: ").append(toIndentedString(originRewrite)).append("\n");
    sb.append("    originSni: ").append(toIndentedString(originSni)).append("\n");
    sb.append("    pageOptimization: ").append(toIndentedString(pageOptimization)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    quic: ").append(toIndentedString(quic)).append("\n");
    sb.append("    redirectionRewrite: ").append(toIndentedString(redirectionRewrite)).append("\n");
    sb.append("    refererAccessRule: ").append(toIndentedString(refererAccessRule)).append("\n");
    sb.append("    remoteAuth: ").append(toIndentedString(remoteAuth)).append("\n");
    sb.append("    requestBlockRule: ").append(toIndentedString(requestBlockRule)).append("\n");
    sb.append("    requestHeader: ").append(toIndentedString(requestHeader)).append("\n");
    sb.append("    responseHeader: ").append(toIndentedString(responseHeader)).append("\n");
    sb.append("    rewriteHLS: ").append(toIndentedString(rewriteHLS)).append("\n");
    sb.append("    serviceRegion: ").append(toIndentedString(serviceRegion)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    signedUrlAuth: ").append(toIndentedString(signedUrlAuth)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    uaAccessRule: ").append(toIndentedString(uaAccessRule)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    urlNormalize: ").append(toIndentedString(urlNormalize)).append("\n");
    sb.append("    videoDrag: ").append(toIndentedString(videoDrag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
