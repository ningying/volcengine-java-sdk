/*
 * certificate_service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.certificateservice.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.certificateservice.model.IssuerForCertificateGetInstanceOutput;
import com.volcengine.certificateservice.model.SubjectForCertificateGetInstanceOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * EncryptionCertificateDetailForCertificateGetInstanceOutput
 */



public class EncryptionCertificateDetailForCertificateGetInstanceOutput {
  @SerializedName("Chain")
  private List<String> chain = null;

  @SerializedName("FingerPrintSha1")
  private String fingerPrintSha1 = null;

  @SerializedName("FingerPrintSha256")
  private String fingerPrintSha256 = null;

  @SerializedName("Issuer")
  private IssuerForCertificateGetInstanceOutput issuer = null;

  @SerializedName("KeyAlgorithm")
  private String keyAlgorithm = null;

  @SerializedName("PrivateKey")
  private String privateKey = null;

  @SerializedName("SerialNumber")
  private String serialNumber = null;

  @SerializedName("SignatureAlgorithm")
  private String signatureAlgorithm = null;

  @SerializedName("Subject")
  private SubjectForCertificateGetInstanceOutput subject = null;

  public EncryptionCertificateDetailForCertificateGetInstanceOutput chain(List<String> chain) {
    this.chain = chain;
    return this;
  }

  public EncryptionCertificateDetailForCertificateGetInstanceOutput addChainItem(String chainItem) {
    if (this.chain == null) {
      this.chain = new ArrayList<String>();
    }
    this.chain.add(chainItem);
    return this;
  }

   /**
   * Get chain
   * @return chain
  **/
  @Schema(description = "")
  public List<String> getChain() {
    return chain;
  }

  public void setChain(List<String> chain) {
    this.chain = chain;
  }

  public EncryptionCertificateDetailForCertificateGetInstanceOutput fingerPrintSha1(String fingerPrintSha1) {
    this.fingerPrintSha1 = fingerPrintSha1;
    return this;
  }

   /**
   * Get fingerPrintSha1
   * @return fingerPrintSha1
  **/
  @Schema(description = "")
  public String getFingerPrintSha1() {
    return fingerPrintSha1;
  }

  public void setFingerPrintSha1(String fingerPrintSha1) {
    this.fingerPrintSha1 = fingerPrintSha1;
  }

  public EncryptionCertificateDetailForCertificateGetInstanceOutput fingerPrintSha256(String fingerPrintSha256) {
    this.fingerPrintSha256 = fingerPrintSha256;
    return this;
  }

   /**
   * Get fingerPrintSha256
   * @return fingerPrintSha256
  **/
  @Schema(description = "")
  public String getFingerPrintSha256() {
    return fingerPrintSha256;
  }

  public void setFingerPrintSha256(String fingerPrintSha256) {
    this.fingerPrintSha256 = fingerPrintSha256;
  }

  public EncryptionCertificateDetailForCertificateGetInstanceOutput issuer(IssuerForCertificateGetInstanceOutput issuer) {
    this.issuer = issuer;
    return this;
  }

   /**
   * Get issuer
   * @return issuer
  **/
  @Valid
  @Schema(description = "")
  public IssuerForCertificateGetInstanceOutput getIssuer() {
    return issuer;
  }

  public void setIssuer(IssuerForCertificateGetInstanceOutput issuer) {
    this.issuer = issuer;
  }

  public EncryptionCertificateDetailForCertificateGetInstanceOutput keyAlgorithm(String keyAlgorithm) {
    this.keyAlgorithm = keyAlgorithm;
    return this;
  }

   /**
   * Get keyAlgorithm
   * @return keyAlgorithm
  **/
  @Schema(description = "")
  public String getKeyAlgorithm() {
    return keyAlgorithm;
  }

  public void setKeyAlgorithm(String keyAlgorithm) {
    this.keyAlgorithm = keyAlgorithm;
  }

  public EncryptionCertificateDetailForCertificateGetInstanceOutput privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

   /**
   * Get privateKey
   * @return privateKey
  **/
  @Schema(description = "")
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }

  public EncryptionCertificateDetailForCertificateGetInstanceOutput serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * Get serialNumber
   * @return serialNumber
  **/
  @Schema(description = "")
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }

  public EncryptionCertificateDetailForCertificateGetInstanceOutput signatureAlgorithm(String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
    return this;
  }

   /**
   * Get signatureAlgorithm
   * @return signatureAlgorithm
  **/
  @Schema(description = "")
  public String getSignatureAlgorithm() {
    return signatureAlgorithm;
  }

  public void setSignatureAlgorithm(String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
  }

  public EncryptionCertificateDetailForCertificateGetInstanceOutput subject(SubjectForCertificateGetInstanceOutput subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @Valid
  @Schema(description = "")
  public SubjectForCertificateGetInstanceOutput getSubject() {
    return subject;
  }

  public void setSubject(SubjectForCertificateGetInstanceOutput subject) {
    this.subject = subject;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncryptionCertificateDetailForCertificateGetInstanceOutput encryptionCertificateDetailForCertificateGetInstanceOutput = (EncryptionCertificateDetailForCertificateGetInstanceOutput) o;
    return Objects.equals(this.chain, encryptionCertificateDetailForCertificateGetInstanceOutput.chain) &&
        Objects.equals(this.fingerPrintSha1, encryptionCertificateDetailForCertificateGetInstanceOutput.fingerPrintSha1) &&
        Objects.equals(this.fingerPrintSha256, encryptionCertificateDetailForCertificateGetInstanceOutput.fingerPrintSha256) &&
        Objects.equals(this.issuer, encryptionCertificateDetailForCertificateGetInstanceOutput.issuer) &&
        Objects.equals(this.keyAlgorithm, encryptionCertificateDetailForCertificateGetInstanceOutput.keyAlgorithm) &&
        Objects.equals(this.privateKey, encryptionCertificateDetailForCertificateGetInstanceOutput.privateKey) &&
        Objects.equals(this.serialNumber, encryptionCertificateDetailForCertificateGetInstanceOutput.serialNumber) &&
        Objects.equals(this.signatureAlgorithm, encryptionCertificateDetailForCertificateGetInstanceOutput.signatureAlgorithm) &&
        Objects.equals(this.subject, encryptionCertificateDetailForCertificateGetInstanceOutput.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chain, fingerPrintSha1, fingerPrintSha256, issuer, keyAlgorithm, privateKey, serialNumber, signatureAlgorithm, subject);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncryptionCertificateDetailForCertificateGetInstanceOutput {\n");
    
    sb.append("    chain: ").append(toIndentedString(chain)).append("\n");
    sb.append("    fingerPrintSha1: ").append(toIndentedString(fingerPrintSha1)).append("\n");
    sb.append("    fingerPrintSha256: ").append(toIndentedString(fingerPrintSha256)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    keyAlgorithm: ").append(toIndentedString(keyAlgorithm)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    signatureAlgorithm: ").append(toIndentedString(signatureAlgorithm)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
