/*
 * certificate_service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.certificateservice.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.certificateservice.model.TagFilterForCertificateGetInstanceListInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CertificateGetInstanceListRequest
 */



public class CertificateGetInstanceListRequest {
  @SerializedName("CertificateExpireAfter")
  private String certificateExpireAfter = null;

  @SerializedName("CertificateExpireBefore")
  private String certificateExpireBefore = null;

  @SerializedName("CommonName")
  private String commonName = null;

  @SerializedName("Domain")
  private String domain = null;

  @SerializedName("InstanceIds")
  private List<String> instanceIds = null;

  /**
   * Gets or Sets instanceType
   */
  @JsonAdapter(InstanceTypeEnum.Adapter.class)
  public enum InstanceTypeEnum {
    @SerializedName("Free")
    FREE("Free"),
    @SerializedName("Test")
    TEST("Test"),
    @SerializedName("Paid")
    PAID("Paid"),
    @SerializedName("Imported")
    IMPORTED("Imported");

    private String value;

    InstanceTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static InstanceTypeEnum fromValue(String input) {
      for (InstanceTypeEnum b : InstanceTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<InstanceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstanceTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public InstanceTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return InstanceTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("InstanceType")
  private InstanceTypeEnum instanceType = null;

  @SerializedName("IsRevoked")
  private Boolean isRevoked = null;

  @SerializedName("IsValid")
  private Boolean isValid = null;

  @SerializedName("PageNumber")
  private Integer pageNumber = null;

  @SerializedName("PageSize")
  private Integer pageSize = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("NotSubmitted")
    NOTSUBMITTED("NotSubmitted"),
    @SerializedName("Pending")
    PENDING("Pending"),
    @SerializedName("Issued")
    ISSUED("Issued"),
    @SerializedName("Cancelling")
    CANCELLING("Cancelling"),
    @SerializedName("Canceled")
    CANCELED("Canceled"),
    @SerializedName("Revoking")
    REVOKING("Revoking"),
    @SerializedName("Revoked")
    REVOKED("Revoked"),
    @SerializedName("Failed")
    FAILED("Failed"),
    @SerializedName("Unknown")
    UNKNOWN("Unknown");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Status")
  private List<StatusEnum> status = null;

  @SerializedName("Tag")
  private String tag = null;

  @SerializedName("TagFilters")
  private List<TagFilterForCertificateGetInstanceListInput> tagFilters = null;

  public CertificateGetInstanceListRequest certificateExpireAfter(String certificateExpireAfter) {
    this.certificateExpireAfter = certificateExpireAfter;
    return this;
  }

   /**
   * Get certificateExpireAfter
   * @return certificateExpireAfter
  **/
  @Schema(description = "")
  public String getCertificateExpireAfter() {
    return certificateExpireAfter;
  }

  public void setCertificateExpireAfter(String certificateExpireAfter) {
    this.certificateExpireAfter = certificateExpireAfter;
  }

  public CertificateGetInstanceListRequest certificateExpireBefore(String certificateExpireBefore) {
    this.certificateExpireBefore = certificateExpireBefore;
    return this;
  }

   /**
   * Get certificateExpireBefore
   * @return certificateExpireBefore
  **/
  @Schema(description = "")
  public String getCertificateExpireBefore() {
    return certificateExpireBefore;
  }

  public void setCertificateExpireBefore(String certificateExpireBefore) {
    this.certificateExpireBefore = certificateExpireBefore;
  }

  public CertificateGetInstanceListRequest commonName(String commonName) {
    this.commonName = commonName;
    return this;
  }

   /**
   * Get commonName
   * @return commonName
  **/
  @Schema(description = "")
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }

  public CertificateGetInstanceListRequest domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @Schema(description = "")
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }

  public CertificateGetInstanceListRequest instanceIds(List<String> instanceIds) {
    this.instanceIds = instanceIds;
    return this;
  }

  public CertificateGetInstanceListRequest addInstanceIdsItem(String instanceIdsItem) {
    if (this.instanceIds == null) {
      this.instanceIds = new ArrayList<String>();
    }
    this.instanceIds.add(instanceIdsItem);
    return this;
  }

   /**
   * Get instanceIds
   * @return instanceIds
  **/
  @Schema(description = "")
  public List<String> getInstanceIds() {
    return instanceIds;
  }

  public void setInstanceIds(List<String> instanceIds) {
    this.instanceIds = instanceIds;
  }

  public CertificateGetInstanceListRequest instanceType(InstanceTypeEnum instanceType) {
    this.instanceType = instanceType;
    return this;
  }

   /**
   * Get instanceType
   * @return instanceType
  **/
  @Schema(description = "")
  public InstanceTypeEnum getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(InstanceTypeEnum instanceType) {
    this.instanceType = instanceType;
  }

  public CertificateGetInstanceListRequest isRevoked(Boolean isRevoked) {
    this.isRevoked = isRevoked;
    return this;
  }

   /**
   * Get isRevoked
   * @return isRevoked
  **/
  @Schema(description = "")
  public Boolean isIsRevoked() {
    return isRevoked;
  }

  public void setIsRevoked(Boolean isRevoked) {
    this.isRevoked = isRevoked;
  }

  public CertificateGetInstanceListRequest isValid(Boolean isValid) {
    this.isValid = isValid;
    return this;
  }

   /**
   * Get isValid
   * @return isValid
  **/
  @Schema(description = "")
  public Boolean isIsValid() {
    return isValid;
  }

  public void setIsValid(Boolean isValid) {
    this.isValid = isValid;
  }

  public CertificateGetInstanceListRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @Schema(description = "")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public CertificateGetInstanceListRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public CertificateGetInstanceListRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public CertificateGetInstanceListRequest status(List<StatusEnum> status) {
    this.status = status;
    return this;
  }

  public CertificateGetInstanceListRequest addStatusItem(StatusEnum statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<StatusEnum>();
    }
    this.status.add(statusItem);
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public List<StatusEnum> getStatus() {
    return status;
  }

  public void setStatus(List<StatusEnum> status) {
    this.status = status;
  }

  public CertificateGetInstanceListRequest tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @Schema(description = "")
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public CertificateGetInstanceListRequest tagFilters(List<TagFilterForCertificateGetInstanceListInput> tagFilters) {
    this.tagFilters = tagFilters;
    return this;
  }

  public CertificateGetInstanceListRequest addTagFiltersItem(TagFilterForCertificateGetInstanceListInput tagFiltersItem) {
    if (this.tagFilters == null) {
      this.tagFilters = new ArrayList<TagFilterForCertificateGetInstanceListInput>();
    }
    this.tagFilters.add(tagFiltersItem);
    return this;
  }

   /**
   * Get tagFilters
   * @return tagFilters
  **/
  @Valid
  @Schema(description = "")
  public List<TagFilterForCertificateGetInstanceListInput> getTagFilters() {
    return tagFilters;
  }

  public void setTagFilters(List<TagFilterForCertificateGetInstanceListInput> tagFilters) {
    this.tagFilters = tagFilters;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateGetInstanceListRequest certificateGetInstanceListRequest = (CertificateGetInstanceListRequest) o;
    return Objects.equals(this.certificateExpireAfter, certificateGetInstanceListRequest.certificateExpireAfter) &&
        Objects.equals(this.certificateExpireBefore, certificateGetInstanceListRequest.certificateExpireBefore) &&
        Objects.equals(this.commonName, certificateGetInstanceListRequest.commonName) &&
        Objects.equals(this.domain, certificateGetInstanceListRequest.domain) &&
        Objects.equals(this.instanceIds, certificateGetInstanceListRequest.instanceIds) &&
        Objects.equals(this.instanceType, certificateGetInstanceListRequest.instanceType) &&
        Objects.equals(this.isRevoked, certificateGetInstanceListRequest.isRevoked) &&
        Objects.equals(this.isValid, certificateGetInstanceListRequest.isValid) &&
        Objects.equals(this.pageNumber, certificateGetInstanceListRequest.pageNumber) &&
        Objects.equals(this.pageSize, certificateGetInstanceListRequest.pageSize) &&
        Objects.equals(this.projectName, certificateGetInstanceListRequest.projectName) &&
        Objects.equals(this.status, certificateGetInstanceListRequest.status) &&
        Objects.equals(this.tag, certificateGetInstanceListRequest.tag) &&
        Objects.equals(this.tagFilters, certificateGetInstanceListRequest.tagFilters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateExpireAfter, certificateExpireBefore, commonName, domain, instanceIds, instanceType, isRevoked, isValid, pageNumber, pageSize, projectName, status, tag, tagFilters);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateGetInstanceListRequest {\n");
    
    sb.append("    certificateExpireAfter: ").append(toIndentedString(certificateExpireAfter)).append("\n");
    sb.append("    certificateExpireBefore: ").append(toIndentedString(certificateExpireBefore)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    instanceIds: ").append(toIndentedString(instanceIds)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    isRevoked: ").append(toIndentedString(isRevoked)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    tagFilters: ").append(toIndentedString(tagFilters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
