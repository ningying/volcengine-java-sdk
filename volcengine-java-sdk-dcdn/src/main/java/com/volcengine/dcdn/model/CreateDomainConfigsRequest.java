/*
 * dcdn
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.dcdn.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.dcdn.model.BrCompressForCreateDomainConfigsInput;
import com.volcengine.dcdn.model.CacheForCreateDomainConfigsInput;
import com.volcengine.dcdn.model.ConvertConvertOriginForCreateDomainConfigsInput;
import com.volcengine.dcdn.model.GzipCompressForCreateDomainConfigsInput;
import com.volcengine.dcdn.model.HttpsForCreateDomainConfigsInput;
import com.volcengine.dcdn.model.IpAccessForCreateDomainConfigsInput;
import com.volcengine.dcdn.model.PreConnectForCreateDomainConfigsInput;
import com.volcengine.dcdn.model.RTTOptimizeForCreateDomainConfigsInput;
import com.volcengine.dcdn.model.RefererAccessForCreateDomainConfigsInput;
import com.volcengine.dcdn.model.StaticOptimizationForCreateDomainConfigsInput;
import com.volcengine.dcdn.model.UploadOptimizeForCreateDomainConfigsInput;
import com.volcengine.dcdn.model.UrlAccessForCreateDomainConfigsInput;
import com.volcengine.dcdn.model.UrlRedirectForCreateDomainConfigsInput;
import com.volcengine.dcdn.model.UserAgentAccessForCreateDomainConfigsInput;
import com.volcengine.dcdn.model.WebSocketForCreateDomainConfigsInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateDomainConfigsRequest
 */



public class CreateDomainConfigsRequest {
  @SerializedName("BrCompress")
  private BrCompressForCreateDomainConfigsInput brCompress = null;

  @SerializedName("BusinessScene")
  private String businessScene = null;

  @SerializedName("Cache")
  private CacheForCreateDomainConfigsInput cache = null;

  @SerializedName("Domains")
  private List<String> domains = null;

  @SerializedName("EnableFailOver")
  private Boolean enableFailOver = null;

  @SerializedName("GzipCompress")
  private GzipCompressForCreateDomainConfigsInput gzipCompress = null;

  @SerializedName("Https")
  private HttpsForCreateDomainConfigsInput https = null;

  @SerializedName("IPv6Switch")
  private Boolean ipv6Switch = null;

  @SerializedName("IpAccess")
  private IpAccessForCreateDomainConfigsInput ipAccess = null;

  @SerializedName("Origin")
  private ConvertConvertOriginForCreateDomainConfigsInput origin = null;

  @SerializedName("PreConnect")
  private PreConnectForCreateDomainConfigsInput preConnect = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("RTTOptimize")
  private RTTOptimizeForCreateDomainConfigsInput rtTOptimize = null;

  @SerializedName("RefererAccess")
  private RefererAccessForCreateDomainConfigsInput refererAccess = null;

  @SerializedName("Scope")
  private String scope = null;

  @SerializedName("ServiceType")
  private String serviceType = null;

  @SerializedName("StaticOptimization")
  private StaticOptimizationForCreateDomainConfigsInput staticOptimization = null;

  @SerializedName("StrategyType")
  private String strategyType = null;

  @SerializedName("UploadOptimize")
  private UploadOptimizeForCreateDomainConfigsInput uploadOptimize = null;

  @SerializedName("UrlAccess")
  private UrlAccessForCreateDomainConfigsInput urlAccess = null;

  @SerializedName("UrlRedirect")
  private UrlRedirectForCreateDomainConfigsInput urlRedirect = null;

  @SerializedName("UserAgentAccess")
  private UserAgentAccessForCreateDomainConfigsInput userAgentAccess = null;

  @SerializedName("WebSocket")
  private WebSocketForCreateDomainConfigsInput webSocket = null;

  public CreateDomainConfigsRequest brCompress(BrCompressForCreateDomainConfigsInput brCompress) {
    this.brCompress = brCompress;
    return this;
  }

   /**
   * Get brCompress
   * @return brCompress
  **/
  @Valid
  @Schema(description = "")
  public BrCompressForCreateDomainConfigsInput getBrCompress() {
    return brCompress;
  }

  public void setBrCompress(BrCompressForCreateDomainConfigsInput brCompress) {
    this.brCompress = brCompress;
  }

  public CreateDomainConfigsRequest businessScene(String businessScene) {
    this.businessScene = businessScene;
    return this;
  }

   /**
   * Get businessScene
   * @return businessScene
  **/
  @Schema(description = "")
  public String getBusinessScene() {
    return businessScene;
  }

  public void setBusinessScene(String businessScene) {
    this.businessScene = businessScene;
  }

  public CreateDomainConfigsRequest cache(CacheForCreateDomainConfigsInput cache) {
    this.cache = cache;
    return this;
  }

   /**
   * Get cache
   * @return cache
  **/
  @Valid
  @Schema(description = "")
  public CacheForCreateDomainConfigsInput getCache() {
    return cache;
  }

  public void setCache(CacheForCreateDomainConfigsInput cache) {
    this.cache = cache;
  }

  public CreateDomainConfigsRequest domains(List<String> domains) {
    this.domains = domains;
    return this;
  }

  public CreateDomainConfigsRequest addDomainsItem(String domainsItem) {
    if (this.domains == null) {
      this.domains = new ArrayList<String>();
    }
    this.domains.add(domainsItem);
    return this;
  }

   /**
   * Get domains
   * @return domains
  **/
  @Schema(description = "")
  public List<String> getDomains() {
    return domains;
  }

  public void setDomains(List<String> domains) {
    this.domains = domains;
  }

  public CreateDomainConfigsRequest enableFailOver(Boolean enableFailOver) {
    this.enableFailOver = enableFailOver;
    return this;
  }

   /**
   * Get enableFailOver
   * @return enableFailOver
  **/
  @Schema(description = "")
  public Boolean isEnableFailOver() {
    return enableFailOver;
  }

  public void setEnableFailOver(Boolean enableFailOver) {
    this.enableFailOver = enableFailOver;
  }

  public CreateDomainConfigsRequest gzipCompress(GzipCompressForCreateDomainConfigsInput gzipCompress) {
    this.gzipCompress = gzipCompress;
    return this;
  }

   /**
   * Get gzipCompress
   * @return gzipCompress
  **/
  @Valid
  @Schema(description = "")
  public GzipCompressForCreateDomainConfigsInput getGzipCompress() {
    return gzipCompress;
  }

  public void setGzipCompress(GzipCompressForCreateDomainConfigsInput gzipCompress) {
    this.gzipCompress = gzipCompress;
  }

  public CreateDomainConfigsRequest https(HttpsForCreateDomainConfigsInput https) {
    this.https = https;
    return this;
  }

   /**
   * Get https
   * @return https
  **/
  @Valid
  @Schema(description = "")
  public HttpsForCreateDomainConfigsInput getHttps() {
    return https;
  }

  public void setHttps(HttpsForCreateDomainConfigsInput https) {
    this.https = https;
  }

  public CreateDomainConfigsRequest ipv6Switch(Boolean ipv6Switch) {
    this.ipv6Switch = ipv6Switch;
    return this;
  }

   /**
   * Get ipv6Switch
   * @return ipv6Switch
  **/
  @Schema(description = "")
  public Boolean isIpv6Switch() {
    return ipv6Switch;
  }

  public void setIpv6Switch(Boolean ipv6Switch) {
    this.ipv6Switch = ipv6Switch;
  }

  public CreateDomainConfigsRequest ipAccess(IpAccessForCreateDomainConfigsInput ipAccess) {
    this.ipAccess = ipAccess;
    return this;
  }

   /**
   * Get ipAccess
   * @return ipAccess
  **/
  @Valid
  @Schema(description = "")
  public IpAccessForCreateDomainConfigsInput getIpAccess() {
    return ipAccess;
  }

  public void setIpAccess(IpAccessForCreateDomainConfigsInput ipAccess) {
    this.ipAccess = ipAccess;
  }

  public CreateDomainConfigsRequest origin(ConvertConvertOriginForCreateDomainConfigsInput origin) {
    this.origin = origin;
    return this;
  }

   /**
   * Get origin
   * @return origin
  **/
  @Valid
  @Schema(description = "")
  public ConvertConvertOriginForCreateDomainConfigsInput getOrigin() {
    return origin;
  }

  public void setOrigin(ConvertConvertOriginForCreateDomainConfigsInput origin) {
    this.origin = origin;
  }

  public CreateDomainConfigsRequest preConnect(PreConnectForCreateDomainConfigsInput preConnect) {
    this.preConnect = preConnect;
    return this;
  }

   /**
   * Get preConnect
   * @return preConnect
  **/
  @Valid
  @Schema(description = "")
  public PreConnectForCreateDomainConfigsInput getPreConnect() {
    return preConnect;
  }

  public void setPreConnect(PreConnectForCreateDomainConfigsInput preConnect) {
    this.preConnect = preConnect;
  }

  public CreateDomainConfigsRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public CreateDomainConfigsRequest rtTOptimize(RTTOptimizeForCreateDomainConfigsInput rtTOptimize) {
    this.rtTOptimize = rtTOptimize;
    return this;
  }

   /**
   * Get rtTOptimize
   * @return rtTOptimize
  **/
  @Valid
  @Schema(description = "")
  public RTTOptimizeForCreateDomainConfigsInput getRtTOptimize() {
    return rtTOptimize;
  }

  public void setRtTOptimize(RTTOptimizeForCreateDomainConfigsInput rtTOptimize) {
    this.rtTOptimize = rtTOptimize;
  }

  public CreateDomainConfigsRequest refererAccess(RefererAccessForCreateDomainConfigsInput refererAccess) {
    this.refererAccess = refererAccess;
    return this;
  }

   /**
   * Get refererAccess
   * @return refererAccess
  **/
  @Valid
  @Schema(description = "")
  public RefererAccessForCreateDomainConfigsInput getRefererAccess() {
    return refererAccess;
  }

  public void setRefererAccess(RefererAccessForCreateDomainConfigsInput refererAccess) {
    this.refererAccess = refererAccess;
  }

  public CreateDomainConfigsRequest scope(String scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @Schema(description = "")
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }

  public CreateDomainConfigsRequest serviceType(String serviceType) {
    this.serviceType = serviceType;
    return this;
  }

   /**
   * Get serviceType
   * @return serviceType
  **/
  @Schema(description = "")
  public String getServiceType() {
    return serviceType;
  }

  public void setServiceType(String serviceType) {
    this.serviceType = serviceType;
  }

  public CreateDomainConfigsRequest staticOptimization(StaticOptimizationForCreateDomainConfigsInput staticOptimization) {
    this.staticOptimization = staticOptimization;
    return this;
  }

   /**
   * Get staticOptimization
   * @return staticOptimization
  **/
  @Valid
  @Schema(description = "")
  public StaticOptimizationForCreateDomainConfigsInput getStaticOptimization() {
    return staticOptimization;
  }

  public void setStaticOptimization(StaticOptimizationForCreateDomainConfigsInput staticOptimization) {
    this.staticOptimization = staticOptimization;
  }

  public CreateDomainConfigsRequest strategyType(String strategyType) {
    this.strategyType = strategyType;
    return this;
  }

   /**
   * Get strategyType
   * @return strategyType
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getStrategyType() {
    return strategyType;
  }

  public void setStrategyType(String strategyType) {
    this.strategyType = strategyType;
  }

  public CreateDomainConfigsRequest uploadOptimize(UploadOptimizeForCreateDomainConfigsInput uploadOptimize) {
    this.uploadOptimize = uploadOptimize;
    return this;
  }

   /**
   * Get uploadOptimize
   * @return uploadOptimize
  **/
  @Valid
  @Schema(description = "")
  public UploadOptimizeForCreateDomainConfigsInput getUploadOptimize() {
    return uploadOptimize;
  }

  public void setUploadOptimize(UploadOptimizeForCreateDomainConfigsInput uploadOptimize) {
    this.uploadOptimize = uploadOptimize;
  }

  public CreateDomainConfigsRequest urlAccess(UrlAccessForCreateDomainConfigsInput urlAccess) {
    this.urlAccess = urlAccess;
    return this;
  }

   /**
   * Get urlAccess
   * @return urlAccess
  **/
  @Valid
  @Schema(description = "")
  public UrlAccessForCreateDomainConfigsInput getUrlAccess() {
    return urlAccess;
  }

  public void setUrlAccess(UrlAccessForCreateDomainConfigsInput urlAccess) {
    this.urlAccess = urlAccess;
  }

  public CreateDomainConfigsRequest urlRedirect(UrlRedirectForCreateDomainConfigsInput urlRedirect) {
    this.urlRedirect = urlRedirect;
    return this;
  }

   /**
   * Get urlRedirect
   * @return urlRedirect
  **/
  @Valid
  @Schema(description = "")
  public UrlRedirectForCreateDomainConfigsInput getUrlRedirect() {
    return urlRedirect;
  }

  public void setUrlRedirect(UrlRedirectForCreateDomainConfigsInput urlRedirect) {
    this.urlRedirect = urlRedirect;
  }

  public CreateDomainConfigsRequest userAgentAccess(UserAgentAccessForCreateDomainConfigsInput userAgentAccess) {
    this.userAgentAccess = userAgentAccess;
    return this;
  }

   /**
   * Get userAgentAccess
   * @return userAgentAccess
  **/
  @Valid
  @Schema(description = "")
  public UserAgentAccessForCreateDomainConfigsInput getUserAgentAccess() {
    return userAgentAccess;
  }

  public void setUserAgentAccess(UserAgentAccessForCreateDomainConfigsInput userAgentAccess) {
    this.userAgentAccess = userAgentAccess;
  }

  public CreateDomainConfigsRequest webSocket(WebSocketForCreateDomainConfigsInput webSocket) {
    this.webSocket = webSocket;
    return this;
  }

   /**
   * Get webSocket
   * @return webSocket
  **/
  @Valid
  @Schema(description = "")
  public WebSocketForCreateDomainConfigsInput getWebSocket() {
    return webSocket;
  }

  public void setWebSocket(WebSocketForCreateDomainConfigsInput webSocket) {
    this.webSocket = webSocket;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDomainConfigsRequest createDomainConfigsRequest = (CreateDomainConfigsRequest) o;
    return Objects.equals(this.brCompress, createDomainConfigsRequest.brCompress) &&
        Objects.equals(this.businessScene, createDomainConfigsRequest.businessScene) &&
        Objects.equals(this.cache, createDomainConfigsRequest.cache) &&
        Objects.equals(this.domains, createDomainConfigsRequest.domains) &&
        Objects.equals(this.enableFailOver, createDomainConfigsRequest.enableFailOver) &&
        Objects.equals(this.gzipCompress, createDomainConfigsRequest.gzipCompress) &&
        Objects.equals(this.https, createDomainConfigsRequest.https) &&
        Objects.equals(this.ipv6Switch, createDomainConfigsRequest.ipv6Switch) &&
        Objects.equals(this.ipAccess, createDomainConfigsRequest.ipAccess) &&
        Objects.equals(this.origin, createDomainConfigsRequest.origin) &&
        Objects.equals(this.preConnect, createDomainConfigsRequest.preConnect) &&
        Objects.equals(this.projectName, createDomainConfigsRequest.projectName) &&
        Objects.equals(this.rtTOptimize, createDomainConfigsRequest.rtTOptimize) &&
        Objects.equals(this.refererAccess, createDomainConfigsRequest.refererAccess) &&
        Objects.equals(this.scope, createDomainConfigsRequest.scope) &&
        Objects.equals(this.serviceType, createDomainConfigsRequest.serviceType) &&
        Objects.equals(this.staticOptimization, createDomainConfigsRequest.staticOptimization) &&
        Objects.equals(this.strategyType, createDomainConfigsRequest.strategyType) &&
        Objects.equals(this.uploadOptimize, createDomainConfigsRequest.uploadOptimize) &&
        Objects.equals(this.urlAccess, createDomainConfigsRequest.urlAccess) &&
        Objects.equals(this.urlRedirect, createDomainConfigsRequest.urlRedirect) &&
        Objects.equals(this.userAgentAccess, createDomainConfigsRequest.userAgentAccess) &&
        Objects.equals(this.webSocket, createDomainConfigsRequest.webSocket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brCompress, businessScene, cache, domains, enableFailOver, gzipCompress, https, ipv6Switch, ipAccess, origin, preConnect, projectName, rtTOptimize, refererAccess, scope, serviceType, staticOptimization, strategyType, uploadOptimize, urlAccess, urlRedirect, userAgentAccess, webSocket);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDomainConfigsRequest {\n");
    
    sb.append("    brCompress: ").append(toIndentedString(brCompress)).append("\n");
    sb.append("    businessScene: ").append(toIndentedString(businessScene)).append("\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    enableFailOver: ").append(toIndentedString(enableFailOver)).append("\n");
    sb.append("    gzipCompress: ").append(toIndentedString(gzipCompress)).append("\n");
    sb.append("    https: ").append(toIndentedString(https)).append("\n");
    sb.append("    ipv6Switch: ").append(toIndentedString(ipv6Switch)).append("\n");
    sb.append("    ipAccess: ").append(toIndentedString(ipAccess)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    preConnect: ").append(toIndentedString(preConnect)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    rtTOptimize: ").append(toIndentedString(rtTOptimize)).append("\n");
    sb.append("    refererAccess: ").append(toIndentedString(refererAccess)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    staticOptimization: ").append(toIndentedString(staticOptimization)).append("\n");
    sb.append("    strategyType: ").append(toIndentedString(strategyType)).append("\n");
    sb.append("    uploadOptimize: ").append(toIndentedString(uploadOptimize)).append("\n");
    sb.append("    urlAccess: ").append(toIndentedString(urlAccess)).append("\n");
    sb.append("    urlRedirect: ").append(toIndentedString(urlRedirect)).append("\n");
    sb.append("    userAgentAccess: ").append(toIndentedString(userAgentAccess)).append("\n");
    sb.append("    webSocket: ").append(toIndentedString(webSocket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
