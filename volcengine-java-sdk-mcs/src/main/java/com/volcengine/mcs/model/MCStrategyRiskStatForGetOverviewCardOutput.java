/*
 * mcs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.mcs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * MCStrategyRiskStatForGetOverviewCardOutput
 */



public class MCStrategyRiskStatForGetOverviewCardOutput {
  @SerializedName("Count")
  private Long count = null;

  /**
   * Gets or Sets riskType
   */
  @JsonAdapter(RiskTypeEnum.Adapter.class)
  public enum RiskTypeEnum {
    @SerializedName("storage")
    STORAGE("storage"),
    @SerializedName("identity_permission_management")
    IDENTITY_PERMISSION_MANAGEMENT("identity_permission_management"),
    @SerializedName("security")
    SECURITY("security"),
    @SerializedName("workload")
    WORKLOAD("workload"),
    @SerializedName("database")
    DATABASE("database"),
    @SerializedName("network")
    NETWORK("network");

    private String value;

    RiskTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RiskTypeEnum fromValue(String input) {
      for (RiskTypeEnum b : RiskTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RiskTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RiskTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RiskTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RiskTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("RiskType")
  private RiskTypeEnum riskType = null;

  public MCStrategyRiskStatForGetOverviewCardOutput count(Long count) {
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @Schema(description = "")
  public Long getCount() {
    return count;
  }

  public void setCount(Long count) {
    this.count = count;
  }

  public MCStrategyRiskStatForGetOverviewCardOutput riskType(RiskTypeEnum riskType) {
    this.riskType = riskType;
    return this;
  }

   /**
   * Get riskType
   * @return riskType
  **/
  @Schema(description = "")
  public RiskTypeEnum getRiskType() {
    return riskType;
  }

  public void setRiskType(RiskTypeEnum riskType) {
    this.riskType = riskType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MCStrategyRiskStatForGetOverviewCardOutput mcStrategyRiskStatForGetOverviewCardOutput = (MCStrategyRiskStatForGetOverviewCardOutput) o;
    return Objects.equals(this.count, mcStrategyRiskStatForGetOverviewCardOutput.count) &&
        Objects.equals(this.riskType, mcStrategyRiskStatForGetOverviewCardOutput.riskType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, riskType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MCStrategyRiskStatForGetOverviewCardOutput {\n");
    
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    riskType: ").append(toIndentedString(riskType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
