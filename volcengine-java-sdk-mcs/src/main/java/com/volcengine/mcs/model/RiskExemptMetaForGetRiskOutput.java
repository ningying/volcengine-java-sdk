/*
 * mcs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.mcs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * RiskExemptMetaForGetRiskOutput
 */



public class RiskExemptMetaForGetRiskOutput {
  @SerializedName("ExemptDesc")
  private String exemptDesc = null;

  @SerializedName("ExemptExpireTimeMilli")
  private Long exemptExpireTimeMilli = null;

  /**
   * Gets or Sets exemptReasonType
   */
  @JsonAdapter(ExemptReasonTypeEnum.Adapter.class)
  public enum ExemptReasonTypeEnum {
    @SerializedName("reason_type_ignored")
    REASON_TYPE_IGNORED("reason_type_ignored"),
    @SerializedName("reason_type_repaired")
    REASON_TYPE_REPAIRED("reason_type_repaired");

    private String value;

    ExemptReasonTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ExemptReasonTypeEnum fromValue(String input) {
      for (ExemptReasonTypeEnum b : ExemptReasonTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ExemptReasonTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExemptReasonTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ExemptReasonTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ExemptReasonTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ExemptReasonType")
  private ExemptReasonTypeEnum exemptReasonType = null;

  public RiskExemptMetaForGetRiskOutput exemptDesc(String exemptDesc) {
    this.exemptDesc = exemptDesc;
    return this;
  }

   /**
   * Get exemptDesc
   * @return exemptDesc
  **/
  @Schema(description = "")
  public String getExemptDesc() {
    return exemptDesc;
  }

  public void setExemptDesc(String exemptDesc) {
    this.exemptDesc = exemptDesc;
  }

  public RiskExemptMetaForGetRiskOutput exemptExpireTimeMilli(Long exemptExpireTimeMilli) {
    this.exemptExpireTimeMilli = exemptExpireTimeMilli;
    return this;
  }

   /**
   * Get exemptExpireTimeMilli
   * @return exemptExpireTimeMilli
  **/
  @Schema(description = "")
  public Long getExemptExpireTimeMilli() {
    return exemptExpireTimeMilli;
  }

  public void setExemptExpireTimeMilli(Long exemptExpireTimeMilli) {
    this.exemptExpireTimeMilli = exemptExpireTimeMilli;
  }

  public RiskExemptMetaForGetRiskOutput exemptReasonType(ExemptReasonTypeEnum exemptReasonType) {
    this.exemptReasonType = exemptReasonType;
    return this;
  }

   /**
   * Get exemptReasonType
   * @return exemptReasonType
  **/
  @Schema(description = "")
  public ExemptReasonTypeEnum getExemptReasonType() {
    return exemptReasonType;
  }

  public void setExemptReasonType(ExemptReasonTypeEnum exemptReasonType) {
    this.exemptReasonType = exemptReasonType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RiskExemptMetaForGetRiskOutput riskExemptMetaForGetRiskOutput = (RiskExemptMetaForGetRiskOutput) o;
    return Objects.equals(this.exemptDesc, riskExemptMetaForGetRiskOutput.exemptDesc) &&
        Objects.equals(this.exemptExpireTimeMilli, riskExemptMetaForGetRiskOutput.exemptExpireTimeMilli) &&
        Objects.equals(this.exemptReasonType, riskExemptMetaForGetRiskOutput.exemptReasonType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exemptDesc, exemptExpireTimeMilli, exemptReasonType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RiskExemptMetaForGetRiskOutput {\n");
    
    sb.append("    exemptDesc: ").append(toIndentedString(exemptDesc)).append("\n");
    sb.append("    exemptExpireTimeMilli: ").append(toIndentedString(exemptExpireTimeMilli)).append("\n");
    sb.append("    exemptReasonType: ").append(toIndentedString(exemptReasonType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
