/*
 * mcs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.mcs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.mcs.model.AffectedResourceForGetRiskOutput;
import com.volcengine.mcs.model.RiskExemptMetaForGetRiskOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * RiskBaseInfoForGetRiskOutput
 */



public class RiskBaseInfoForGetRiskOutput {
  @SerializedName("AffectedResource")
  private AffectedResourceForGetRiskOutput affectedResource = null;

  @SerializedName("LastDetectTimeMilli")
  private Long lastDetectTimeMilli = null;

  @SerializedName("LastDiscoverTimeMilli")
  private Long lastDiscoverTimeMilli = null;

  /**
   * Gets or Sets resourceStatus
   */
  @JsonAdapter(ResourceStatusEnum.Adapter.class)
  public enum ResourceStatusEnum {
    @SerializedName("exist")
    EXIST("exist"),
    @SerializedName("not-exist")
    NOT_EXIST("not-exist");

    private String value;

    ResourceStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResourceStatusEnum fromValue(String input) {
      for (ResourceStatusEnum b : ResourceStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResourceStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceStatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ResourceStatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ResourceStatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ResourceStatus")
  private ResourceStatusEnum resourceStatus = null;

  @SerializedName("RiskExemptMeta")
  private RiskExemptMetaForGetRiskOutput riskExemptMeta = null;

  @SerializedName("RiskID")
  private String riskID = null;

  /**
   * Gets or Sets riskLevel
   */
  @JsonAdapter(RiskLevelEnum.Adapter.class)
  public enum RiskLevelEnum {
    @SerializedName("700-critical")
    _700_CRITICAL("700-critical"),
    @SerializedName("500-high")
    _500_HIGH("500-high"),
    @SerializedName("300-mid")
    _300_MID("300-mid"),
    @SerializedName("100-low")
    _100_LOW("100-low"),
    @SerializedName("050-security")
    _050_SECURITY("050-security");

    private String value;

    RiskLevelEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RiskLevelEnum fromValue(String input) {
      for (RiskLevelEnum b : RiskLevelEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RiskLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RiskLevelEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RiskLevelEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RiskLevelEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("RiskLevel")
  private RiskLevelEnum riskLevel = null;

  @SerializedName("RiskMetaID")
  private String riskMetaID = null;

  /**
   * Gets or Sets riskModelType
   */
  @JsonAdapter(RiskModelTypeEnum.Adapter.class)
  public enum RiskModelTypeEnum {
    @SerializedName("risk_model_alert")
    RISK_MODEL_ALERT("risk_model_alert"),
    @SerializedName("risk_model_vulnerability")
    RISK_MODEL_VULNERABILITY("risk_model_vulnerability"),
    @SerializedName("risk_model_baseline")
    RISK_MODEL_BASELINE("risk_model_baseline"),
    @SerializedName("risk_model_mc_strategy")
    RISK_MODEL_MC_STRATEGY("risk_model_mc_strategy"),
    @SerializedName("risk_model_attack_chain_analysis")
    RISK_MODEL_ATTACK_CHAIN_ANALYSIS("risk_model_attack_chain_analysis");

    private String value;

    RiskModelTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RiskModelTypeEnum fromValue(String input) {
      for (RiskModelTypeEnum b : RiskModelTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RiskModelTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RiskModelTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RiskModelTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RiskModelTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("RiskModelType")
  private RiskModelTypeEnum riskModelType = null;

  @SerializedName("RiskName")
  private String riskName = null;

  @SerializedName("RiskProcessStatus")
  private String riskProcessStatus = null;

  /**
   * Gets or Sets riskStatus
   */
  @JsonAdapter(RiskStatusEnum.Adapter.class)
  public enum RiskStatusEnum {
    @SerializedName("handled")
    HANDLED("handled"),
    @SerializedName("partial_handled")
    PARTIAL_HANDLED("partial_handled"),
    @SerializedName("unhandled")
    UNHANDLED("unhandled"),
    @SerializedName("whitened")
    WHITENED("whitened");

    private String value;

    RiskStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RiskStatusEnum fromValue(String input) {
      for (RiskStatusEnum b : RiskStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RiskStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RiskStatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RiskStatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RiskStatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("RiskStatus")
  private RiskStatusEnum riskStatus = null;

  /**
   * Gets or Sets riskTypes
   */
  @JsonAdapter(RiskTypesEnum.Adapter.class)
  public enum RiskTypesEnum {
    @SerializedName("week_password")
    WEEK_PASSWORD("week_password"),
    @SerializedName("config_error")
    CONFIG_ERROR("config_error"),
    @SerializedName("auth_bypass")
    AUTH_BYPASS("auth_bypass"),
    @SerializedName("unauthorized")
    UNAUTHORIZED("unauthorized"),
    @SerializedName("suspicious_leakage")
    SUSPICIOUS_LEAKAGE("suspicious_leakage"),
    @SerializedName("compliance_problem")
    COMPLIANCE_PROBLEM("compliance_problem"),
    @SerializedName("crypto_risk")
    CRYPTO_RISK("crypto_risk"),
    @SerializedName("others")
    OTHERS("others"),
    @SerializedName("component_risk")
    COMPONENT_RISK("component_risk");

    private String value;

    RiskTypesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RiskTypesEnum fromValue(String input) {
      for (RiskTypesEnum b : RiskTypesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RiskTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RiskTypesEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RiskTypesEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RiskTypesEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("RiskTypes")
  private List<RiskTypesEnum> riskTypes = null;

  @SerializedName("SupportRepair")
  private Boolean supportRepair = null;

  @SerializedName("SupportVerify")
  private Boolean supportVerify = null;

  public RiskBaseInfoForGetRiskOutput affectedResource(AffectedResourceForGetRiskOutput affectedResource) {
    this.affectedResource = affectedResource;
    return this;
  }

   /**
   * Get affectedResource
   * @return affectedResource
  **/
  @Valid
  @Schema(description = "")
  public AffectedResourceForGetRiskOutput getAffectedResource() {
    return affectedResource;
  }

  public void setAffectedResource(AffectedResourceForGetRiskOutput affectedResource) {
    this.affectedResource = affectedResource;
  }

  public RiskBaseInfoForGetRiskOutput lastDetectTimeMilli(Long lastDetectTimeMilli) {
    this.lastDetectTimeMilli = lastDetectTimeMilli;
    return this;
  }

   /**
   * Get lastDetectTimeMilli
   * @return lastDetectTimeMilli
  **/
  @Schema(description = "")
  public Long getLastDetectTimeMilli() {
    return lastDetectTimeMilli;
  }

  public void setLastDetectTimeMilli(Long lastDetectTimeMilli) {
    this.lastDetectTimeMilli = lastDetectTimeMilli;
  }

  public RiskBaseInfoForGetRiskOutput lastDiscoverTimeMilli(Long lastDiscoverTimeMilli) {
    this.lastDiscoverTimeMilli = lastDiscoverTimeMilli;
    return this;
  }

   /**
   * Get lastDiscoverTimeMilli
   * @return lastDiscoverTimeMilli
  **/
  @Schema(description = "")
  public Long getLastDiscoverTimeMilli() {
    return lastDiscoverTimeMilli;
  }

  public void setLastDiscoverTimeMilli(Long lastDiscoverTimeMilli) {
    this.lastDiscoverTimeMilli = lastDiscoverTimeMilli;
  }

  public RiskBaseInfoForGetRiskOutput resourceStatus(ResourceStatusEnum resourceStatus) {
    this.resourceStatus = resourceStatus;
    return this;
  }

   /**
   * Get resourceStatus
   * @return resourceStatus
  **/
  @Schema(description = "")
  public ResourceStatusEnum getResourceStatus() {
    return resourceStatus;
  }

  public void setResourceStatus(ResourceStatusEnum resourceStatus) {
    this.resourceStatus = resourceStatus;
  }

  public RiskBaseInfoForGetRiskOutput riskExemptMeta(RiskExemptMetaForGetRiskOutput riskExemptMeta) {
    this.riskExemptMeta = riskExemptMeta;
    return this;
  }

   /**
   * Get riskExemptMeta
   * @return riskExemptMeta
  **/
  @Valid
  @Schema(description = "")
  public RiskExemptMetaForGetRiskOutput getRiskExemptMeta() {
    return riskExemptMeta;
  }

  public void setRiskExemptMeta(RiskExemptMetaForGetRiskOutput riskExemptMeta) {
    this.riskExemptMeta = riskExemptMeta;
  }

  public RiskBaseInfoForGetRiskOutput riskID(String riskID) {
    this.riskID = riskID;
    return this;
  }

   /**
   * Get riskID
   * @return riskID
  **/
  @Schema(description = "")
  public String getRiskID() {
    return riskID;
  }

  public void setRiskID(String riskID) {
    this.riskID = riskID;
  }

  public RiskBaseInfoForGetRiskOutput riskLevel(RiskLevelEnum riskLevel) {
    this.riskLevel = riskLevel;
    return this;
  }

   /**
   * Get riskLevel
   * @return riskLevel
  **/
  @Schema(description = "")
  public RiskLevelEnum getRiskLevel() {
    return riskLevel;
  }

  public void setRiskLevel(RiskLevelEnum riskLevel) {
    this.riskLevel = riskLevel;
  }

  public RiskBaseInfoForGetRiskOutput riskMetaID(String riskMetaID) {
    this.riskMetaID = riskMetaID;
    return this;
  }

   /**
   * Get riskMetaID
   * @return riskMetaID
  **/
  @Schema(description = "")
  public String getRiskMetaID() {
    return riskMetaID;
  }

  public void setRiskMetaID(String riskMetaID) {
    this.riskMetaID = riskMetaID;
  }

  public RiskBaseInfoForGetRiskOutput riskModelType(RiskModelTypeEnum riskModelType) {
    this.riskModelType = riskModelType;
    return this;
  }

   /**
   * Get riskModelType
   * @return riskModelType
  **/
  @Schema(description = "")
  public RiskModelTypeEnum getRiskModelType() {
    return riskModelType;
  }

  public void setRiskModelType(RiskModelTypeEnum riskModelType) {
    this.riskModelType = riskModelType;
  }

  public RiskBaseInfoForGetRiskOutput riskName(String riskName) {
    this.riskName = riskName;
    return this;
  }

   /**
   * Get riskName
   * @return riskName
  **/
  @Schema(description = "")
  public String getRiskName() {
    return riskName;
  }

  public void setRiskName(String riskName) {
    this.riskName = riskName;
  }

  public RiskBaseInfoForGetRiskOutput riskProcessStatus(String riskProcessStatus) {
    this.riskProcessStatus = riskProcessStatus;
    return this;
  }

   /**
   * Get riskProcessStatus
   * @return riskProcessStatus
  **/
  @Schema(description = "")
  public String getRiskProcessStatus() {
    return riskProcessStatus;
  }

  public void setRiskProcessStatus(String riskProcessStatus) {
    this.riskProcessStatus = riskProcessStatus;
  }

  public RiskBaseInfoForGetRiskOutput riskStatus(RiskStatusEnum riskStatus) {
    this.riskStatus = riskStatus;
    return this;
  }

   /**
   * Get riskStatus
   * @return riskStatus
  **/
  @Schema(description = "")
  public RiskStatusEnum getRiskStatus() {
    return riskStatus;
  }

  public void setRiskStatus(RiskStatusEnum riskStatus) {
    this.riskStatus = riskStatus;
  }

  public RiskBaseInfoForGetRiskOutput riskTypes(List<RiskTypesEnum> riskTypes) {
    this.riskTypes = riskTypes;
    return this;
  }

  public RiskBaseInfoForGetRiskOutput addRiskTypesItem(RiskTypesEnum riskTypesItem) {
    if (this.riskTypes == null) {
      this.riskTypes = new ArrayList<RiskTypesEnum>();
    }
    this.riskTypes.add(riskTypesItem);
    return this;
  }

   /**
   * Get riskTypes
   * @return riskTypes
  **/
  @Schema(description = "")
  public List<RiskTypesEnum> getRiskTypes() {
    return riskTypes;
  }

  public void setRiskTypes(List<RiskTypesEnum> riskTypes) {
    this.riskTypes = riskTypes;
  }

  public RiskBaseInfoForGetRiskOutput supportRepair(Boolean supportRepair) {
    this.supportRepair = supportRepair;
    return this;
  }

   /**
   * Get supportRepair
   * @return supportRepair
  **/
  @Schema(description = "")
  public Boolean isSupportRepair() {
    return supportRepair;
  }

  public void setSupportRepair(Boolean supportRepair) {
    this.supportRepair = supportRepair;
  }

  public RiskBaseInfoForGetRiskOutput supportVerify(Boolean supportVerify) {
    this.supportVerify = supportVerify;
    return this;
  }

   /**
   * Get supportVerify
   * @return supportVerify
  **/
  @Schema(description = "")
  public Boolean isSupportVerify() {
    return supportVerify;
  }

  public void setSupportVerify(Boolean supportVerify) {
    this.supportVerify = supportVerify;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RiskBaseInfoForGetRiskOutput riskBaseInfoForGetRiskOutput = (RiskBaseInfoForGetRiskOutput) o;
    return Objects.equals(this.affectedResource, riskBaseInfoForGetRiskOutput.affectedResource) &&
        Objects.equals(this.lastDetectTimeMilli, riskBaseInfoForGetRiskOutput.lastDetectTimeMilli) &&
        Objects.equals(this.lastDiscoverTimeMilli, riskBaseInfoForGetRiskOutput.lastDiscoverTimeMilli) &&
        Objects.equals(this.resourceStatus, riskBaseInfoForGetRiskOutput.resourceStatus) &&
        Objects.equals(this.riskExemptMeta, riskBaseInfoForGetRiskOutput.riskExemptMeta) &&
        Objects.equals(this.riskID, riskBaseInfoForGetRiskOutput.riskID) &&
        Objects.equals(this.riskLevel, riskBaseInfoForGetRiskOutput.riskLevel) &&
        Objects.equals(this.riskMetaID, riskBaseInfoForGetRiskOutput.riskMetaID) &&
        Objects.equals(this.riskModelType, riskBaseInfoForGetRiskOutput.riskModelType) &&
        Objects.equals(this.riskName, riskBaseInfoForGetRiskOutput.riskName) &&
        Objects.equals(this.riskProcessStatus, riskBaseInfoForGetRiskOutput.riskProcessStatus) &&
        Objects.equals(this.riskStatus, riskBaseInfoForGetRiskOutput.riskStatus) &&
        Objects.equals(this.riskTypes, riskBaseInfoForGetRiskOutput.riskTypes) &&
        Objects.equals(this.supportRepair, riskBaseInfoForGetRiskOutput.supportRepair) &&
        Objects.equals(this.supportVerify, riskBaseInfoForGetRiskOutput.supportVerify);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedResource, lastDetectTimeMilli, lastDiscoverTimeMilli, resourceStatus, riskExemptMeta, riskID, riskLevel, riskMetaID, riskModelType, riskName, riskProcessStatus, riskStatus, riskTypes, supportRepair, supportVerify);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RiskBaseInfoForGetRiskOutput {\n");
    
    sb.append("    affectedResource: ").append(toIndentedString(affectedResource)).append("\n");
    sb.append("    lastDetectTimeMilli: ").append(toIndentedString(lastDetectTimeMilli)).append("\n");
    sb.append("    lastDiscoverTimeMilli: ").append(toIndentedString(lastDiscoverTimeMilli)).append("\n");
    sb.append("    resourceStatus: ").append(toIndentedString(resourceStatus)).append("\n");
    sb.append("    riskExemptMeta: ").append(toIndentedString(riskExemptMeta)).append("\n");
    sb.append("    riskID: ").append(toIndentedString(riskID)).append("\n");
    sb.append("    riskLevel: ").append(toIndentedString(riskLevel)).append("\n");
    sb.append("    riskMetaID: ").append(toIndentedString(riskMetaID)).append("\n");
    sb.append("    riskModelType: ").append(toIndentedString(riskModelType)).append("\n");
    sb.append("    riskName: ").append(toIndentedString(riskName)).append("\n");
    sb.append("    riskProcessStatus: ").append(toIndentedString(riskProcessStatus)).append("\n");
    sb.append("    riskStatus: ").append(toIndentedString(riskStatus)).append("\n");
    sb.append("    riskTypes: ").append(toIndentedString(riskTypes)).append("\n");
    sb.append("    supportRepair: ").append(toIndentedString(supportRepair)).append("\n");
    sb.append("    supportVerify: ").append(toIndentedString(supportVerify)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
