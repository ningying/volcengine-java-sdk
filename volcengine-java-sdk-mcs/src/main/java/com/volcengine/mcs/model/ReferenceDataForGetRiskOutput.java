/*
 * mcs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.mcs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.mcs.model.StrategyDBIngressMinimumACLForGetRiskOutput;
import com.volcengine.mcs.model.StrategyOSSBucketLimitAnonymousACLForGetRiskOutput;
import com.volcengine.mcs.model.StrategyOSSBucketServerEncryptForGetRiskOutput;
import com.volcengine.mcs.model.StrategyOSSBucketVersionBakRecoveryForGetRiskOutput;
import com.volcengine.mcs.model.StrategySLBACLOpenForGetRiskOutput;
import com.volcengine.mcs.model.StrategySLBMinimumForwardStrategyForGetRiskOutput;
import com.volcengine.mcs.model.StrategySecurityGroupIngressMinimumACLForGetRiskOutput;
import com.volcengine.mcs.model.StrategyVMDefendBurstSolutionForGetRiskOutput;
import com.volcengine.mcs.model.StrategyVMIdentityAuthSSHKeyPairForGetRiskOutput;
import com.volcengine.mcs.model.StrategyVMSecurityGroupRuleLimitPortAccessForGetRiskOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ReferenceDataForGetRiskOutput
 */



public class ReferenceDataForGetRiskOutput {
  @SerializedName("StrategyDBIngressMinimumACL")
  private StrategyDBIngressMinimumACLForGetRiskOutput strategyDBIngressMinimumACL = null;

  @SerializedName("StrategyOSSBucketLimitAnonymousACL")
  private StrategyOSSBucketLimitAnonymousACLForGetRiskOutput strategyOSSBucketLimitAnonymousACL = null;

  @SerializedName("StrategyOSSBucketServerEncrypt")
  private StrategyOSSBucketServerEncryptForGetRiskOutput strategyOSSBucketServerEncrypt = null;

  @SerializedName("StrategyOSSBucketVersionBakRecovery")
  private StrategyOSSBucketVersionBakRecoveryForGetRiskOutput strategyOSSBucketVersionBakRecovery = null;

  @SerializedName("StrategySLBACLOpen")
  private StrategySLBACLOpenForGetRiskOutput strategySLBACLOpen = null;

  @SerializedName("StrategySLBMinimumForwardStrategy")
  private StrategySLBMinimumForwardStrategyForGetRiskOutput strategySLBMinimumForwardStrategy = null;

  @SerializedName("StrategySecurityGroupIngressMinimumACL")
  private StrategySecurityGroupIngressMinimumACLForGetRiskOutput strategySecurityGroupIngressMinimumACL = null;

  @SerializedName("StrategyVMDefendBurstSolution")
  private StrategyVMDefendBurstSolutionForGetRiskOutput strategyVMDefendBurstSolution = null;

  @SerializedName("StrategyVMIdentityAuthSSHKeyPair")
  private StrategyVMIdentityAuthSSHKeyPairForGetRiskOutput strategyVMIdentityAuthSSHKeyPair = null;

  @SerializedName("StrategyVMSecurityGroupRuleLimitPortAccess")
  private StrategyVMSecurityGroupRuleLimitPortAccessForGetRiskOutput strategyVMSecurityGroupRuleLimitPortAccess = null;

  public ReferenceDataForGetRiskOutput strategyDBIngressMinimumACL(StrategyDBIngressMinimumACLForGetRiskOutput strategyDBIngressMinimumACL) {
    this.strategyDBIngressMinimumACL = strategyDBIngressMinimumACL;
    return this;
  }

   /**
   * Get strategyDBIngressMinimumACL
   * @return strategyDBIngressMinimumACL
  **/
  @Valid
  @Schema(description = "")
  public StrategyDBIngressMinimumACLForGetRiskOutput getStrategyDBIngressMinimumACL() {
    return strategyDBIngressMinimumACL;
  }

  public void setStrategyDBIngressMinimumACL(StrategyDBIngressMinimumACLForGetRiskOutput strategyDBIngressMinimumACL) {
    this.strategyDBIngressMinimumACL = strategyDBIngressMinimumACL;
  }

  public ReferenceDataForGetRiskOutput strategyOSSBucketLimitAnonymousACL(StrategyOSSBucketLimitAnonymousACLForGetRiskOutput strategyOSSBucketLimitAnonymousACL) {
    this.strategyOSSBucketLimitAnonymousACL = strategyOSSBucketLimitAnonymousACL;
    return this;
  }

   /**
   * Get strategyOSSBucketLimitAnonymousACL
   * @return strategyOSSBucketLimitAnonymousACL
  **/
  @Valid
  @Schema(description = "")
  public StrategyOSSBucketLimitAnonymousACLForGetRiskOutput getStrategyOSSBucketLimitAnonymousACL() {
    return strategyOSSBucketLimitAnonymousACL;
  }

  public void setStrategyOSSBucketLimitAnonymousACL(StrategyOSSBucketLimitAnonymousACLForGetRiskOutput strategyOSSBucketLimitAnonymousACL) {
    this.strategyOSSBucketLimitAnonymousACL = strategyOSSBucketLimitAnonymousACL;
  }

  public ReferenceDataForGetRiskOutput strategyOSSBucketServerEncrypt(StrategyOSSBucketServerEncryptForGetRiskOutput strategyOSSBucketServerEncrypt) {
    this.strategyOSSBucketServerEncrypt = strategyOSSBucketServerEncrypt;
    return this;
  }

   /**
   * Get strategyOSSBucketServerEncrypt
   * @return strategyOSSBucketServerEncrypt
  **/
  @Valid
  @Schema(description = "")
  public StrategyOSSBucketServerEncryptForGetRiskOutput getStrategyOSSBucketServerEncrypt() {
    return strategyOSSBucketServerEncrypt;
  }

  public void setStrategyOSSBucketServerEncrypt(StrategyOSSBucketServerEncryptForGetRiskOutput strategyOSSBucketServerEncrypt) {
    this.strategyOSSBucketServerEncrypt = strategyOSSBucketServerEncrypt;
  }

  public ReferenceDataForGetRiskOutput strategyOSSBucketVersionBakRecovery(StrategyOSSBucketVersionBakRecoveryForGetRiskOutput strategyOSSBucketVersionBakRecovery) {
    this.strategyOSSBucketVersionBakRecovery = strategyOSSBucketVersionBakRecovery;
    return this;
  }

   /**
   * Get strategyOSSBucketVersionBakRecovery
   * @return strategyOSSBucketVersionBakRecovery
  **/
  @Valid
  @Schema(description = "")
  public StrategyOSSBucketVersionBakRecoveryForGetRiskOutput getStrategyOSSBucketVersionBakRecovery() {
    return strategyOSSBucketVersionBakRecovery;
  }

  public void setStrategyOSSBucketVersionBakRecovery(StrategyOSSBucketVersionBakRecoveryForGetRiskOutput strategyOSSBucketVersionBakRecovery) {
    this.strategyOSSBucketVersionBakRecovery = strategyOSSBucketVersionBakRecovery;
  }

  public ReferenceDataForGetRiskOutput strategySLBACLOpen(StrategySLBACLOpenForGetRiskOutput strategySLBACLOpen) {
    this.strategySLBACLOpen = strategySLBACLOpen;
    return this;
  }

   /**
   * Get strategySLBACLOpen
   * @return strategySLBACLOpen
  **/
  @Valid
  @Schema(description = "")
  public StrategySLBACLOpenForGetRiskOutput getStrategySLBACLOpen() {
    return strategySLBACLOpen;
  }

  public void setStrategySLBACLOpen(StrategySLBACLOpenForGetRiskOutput strategySLBACLOpen) {
    this.strategySLBACLOpen = strategySLBACLOpen;
  }

  public ReferenceDataForGetRiskOutput strategySLBMinimumForwardStrategy(StrategySLBMinimumForwardStrategyForGetRiskOutput strategySLBMinimumForwardStrategy) {
    this.strategySLBMinimumForwardStrategy = strategySLBMinimumForwardStrategy;
    return this;
  }

   /**
   * Get strategySLBMinimumForwardStrategy
   * @return strategySLBMinimumForwardStrategy
  **/
  @Valid
  @Schema(description = "")
  public StrategySLBMinimumForwardStrategyForGetRiskOutput getStrategySLBMinimumForwardStrategy() {
    return strategySLBMinimumForwardStrategy;
  }

  public void setStrategySLBMinimumForwardStrategy(StrategySLBMinimumForwardStrategyForGetRiskOutput strategySLBMinimumForwardStrategy) {
    this.strategySLBMinimumForwardStrategy = strategySLBMinimumForwardStrategy;
  }

  public ReferenceDataForGetRiskOutput strategySecurityGroupIngressMinimumACL(StrategySecurityGroupIngressMinimumACLForGetRiskOutput strategySecurityGroupIngressMinimumACL) {
    this.strategySecurityGroupIngressMinimumACL = strategySecurityGroupIngressMinimumACL;
    return this;
  }

   /**
   * Get strategySecurityGroupIngressMinimumACL
   * @return strategySecurityGroupIngressMinimumACL
  **/
  @Valid
  @Schema(description = "")
  public StrategySecurityGroupIngressMinimumACLForGetRiskOutput getStrategySecurityGroupIngressMinimumACL() {
    return strategySecurityGroupIngressMinimumACL;
  }

  public void setStrategySecurityGroupIngressMinimumACL(StrategySecurityGroupIngressMinimumACLForGetRiskOutput strategySecurityGroupIngressMinimumACL) {
    this.strategySecurityGroupIngressMinimumACL = strategySecurityGroupIngressMinimumACL;
  }

  public ReferenceDataForGetRiskOutput strategyVMDefendBurstSolution(StrategyVMDefendBurstSolutionForGetRiskOutput strategyVMDefendBurstSolution) {
    this.strategyVMDefendBurstSolution = strategyVMDefendBurstSolution;
    return this;
  }

   /**
   * Get strategyVMDefendBurstSolution
   * @return strategyVMDefendBurstSolution
  **/
  @Valid
  @Schema(description = "")
  public StrategyVMDefendBurstSolutionForGetRiskOutput getStrategyVMDefendBurstSolution() {
    return strategyVMDefendBurstSolution;
  }

  public void setStrategyVMDefendBurstSolution(StrategyVMDefendBurstSolutionForGetRiskOutput strategyVMDefendBurstSolution) {
    this.strategyVMDefendBurstSolution = strategyVMDefendBurstSolution;
  }

  public ReferenceDataForGetRiskOutput strategyVMIdentityAuthSSHKeyPair(StrategyVMIdentityAuthSSHKeyPairForGetRiskOutput strategyVMIdentityAuthSSHKeyPair) {
    this.strategyVMIdentityAuthSSHKeyPair = strategyVMIdentityAuthSSHKeyPair;
    return this;
  }

   /**
   * Get strategyVMIdentityAuthSSHKeyPair
   * @return strategyVMIdentityAuthSSHKeyPair
  **/
  @Valid
  @Schema(description = "")
  public StrategyVMIdentityAuthSSHKeyPairForGetRiskOutput getStrategyVMIdentityAuthSSHKeyPair() {
    return strategyVMIdentityAuthSSHKeyPair;
  }

  public void setStrategyVMIdentityAuthSSHKeyPair(StrategyVMIdentityAuthSSHKeyPairForGetRiskOutput strategyVMIdentityAuthSSHKeyPair) {
    this.strategyVMIdentityAuthSSHKeyPair = strategyVMIdentityAuthSSHKeyPair;
  }

  public ReferenceDataForGetRiskOutput strategyVMSecurityGroupRuleLimitPortAccess(StrategyVMSecurityGroupRuleLimitPortAccessForGetRiskOutput strategyVMSecurityGroupRuleLimitPortAccess) {
    this.strategyVMSecurityGroupRuleLimitPortAccess = strategyVMSecurityGroupRuleLimitPortAccess;
    return this;
  }

   /**
   * Get strategyVMSecurityGroupRuleLimitPortAccess
   * @return strategyVMSecurityGroupRuleLimitPortAccess
  **/
  @Valid
  @Schema(description = "")
  public StrategyVMSecurityGroupRuleLimitPortAccessForGetRiskOutput getStrategyVMSecurityGroupRuleLimitPortAccess() {
    return strategyVMSecurityGroupRuleLimitPortAccess;
  }

  public void setStrategyVMSecurityGroupRuleLimitPortAccess(StrategyVMSecurityGroupRuleLimitPortAccessForGetRiskOutput strategyVMSecurityGroupRuleLimitPortAccess) {
    this.strategyVMSecurityGroupRuleLimitPortAccess = strategyVMSecurityGroupRuleLimitPortAccess;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReferenceDataForGetRiskOutput referenceDataForGetRiskOutput = (ReferenceDataForGetRiskOutput) o;
    return Objects.equals(this.strategyDBIngressMinimumACL, referenceDataForGetRiskOutput.strategyDBIngressMinimumACL) &&
        Objects.equals(this.strategyOSSBucketLimitAnonymousACL, referenceDataForGetRiskOutput.strategyOSSBucketLimitAnonymousACL) &&
        Objects.equals(this.strategyOSSBucketServerEncrypt, referenceDataForGetRiskOutput.strategyOSSBucketServerEncrypt) &&
        Objects.equals(this.strategyOSSBucketVersionBakRecovery, referenceDataForGetRiskOutput.strategyOSSBucketVersionBakRecovery) &&
        Objects.equals(this.strategySLBACLOpen, referenceDataForGetRiskOutput.strategySLBACLOpen) &&
        Objects.equals(this.strategySLBMinimumForwardStrategy, referenceDataForGetRiskOutput.strategySLBMinimumForwardStrategy) &&
        Objects.equals(this.strategySecurityGroupIngressMinimumACL, referenceDataForGetRiskOutput.strategySecurityGroupIngressMinimumACL) &&
        Objects.equals(this.strategyVMDefendBurstSolution, referenceDataForGetRiskOutput.strategyVMDefendBurstSolution) &&
        Objects.equals(this.strategyVMIdentityAuthSSHKeyPair, referenceDataForGetRiskOutput.strategyVMIdentityAuthSSHKeyPair) &&
        Objects.equals(this.strategyVMSecurityGroupRuleLimitPortAccess, referenceDataForGetRiskOutput.strategyVMSecurityGroupRuleLimitPortAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(strategyDBIngressMinimumACL, strategyOSSBucketLimitAnonymousACL, strategyOSSBucketServerEncrypt, strategyOSSBucketVersionBakRecovery, strategySLBACLOpen, strategySLBMinimumForwardStrategy, strategySecurityGroupIngressMinimumACL, strategyVMDefendBurstSolution, strategyVMIdentityAuthSSHKeyPair, strategyVMSecurityGroupRuleLimitPortAccess);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReferenceDataForGetRiskOutput {\n");
    
    sb.append("    strategyDBIngressMinimumACL: ").append(toIndentedString(strategyDBIngressMinimumACL)).append("\n");
    sb.append("    strategyOSSBucketLimitAnonymousACL: ").append(toIndentedString(strategyOSSBucketLimitAnonymousACL)).append("\n");
    sb.append("    strategyOSSBucketServerEncrypt: ").append(toIndentedString(strategyOSSBucketServerEncrypt)).append("\n");
    sb.append("    strategyOSSBucketVersionBakRecovery: ").append(toIndentedString(strategyOSSBucketVersionBakRecovery)).append("\n");
    sb.append("    strategySLBACLOpen: ").append(toIndentedString(strategySLBACLOpen)).append("\n");
    sb.append("    strategySLBMinimumForwardStrategy: ").append(toIndentedString(strategySLBMinimumForwardStrategy)).append("\n");
    sb.append("    strategySecurityGroupIngressMinimumACL: ").append(toIndentedString(strategySecurityGroupIngressMinimumACL)).append("\n");
    sb.append("    strategyVMDefendBurstSolution: ").append(toIndentedString(strategyVMDefendBurstSolution)).append("\n");
    sb.append("    strategyVMIdentityAuthSSHKeyPair: ").append(toIndentedString(strategyVMIdentityAuthSSHKeyPair)).append("\n");
    sb.append("    strategyVMSecurityGroupRuleLimitPortAccess: ").append(toIndentedString(strategyVMSecurityGroupRuleLimitPortAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
