/*
 * vke
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vke.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ImageSpecForExecContainerImageCommitmentInput
 */



public class ImageSpecForExecContainerImageCommitmentInput {
  @SerializedName("Author")
  private String author = null;

  @SerializedName("Changes")
  private List<String> changes = null;

  @SerializedName("ImageName")
  private String imageName = null;

  @SerializedName("Message")
  private String message = null;

  public ImageSpecForExecContainerImageCommitmentInput author(String author) {
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @Schema(description = "")
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }

  public ImageSpecForExecContainerImageCommitmentInput changes(List<String> changes) {
    this.changes = changes;
    return this;
  }

  public ImageSpecForExecContainerImageCommitmentInput addChangesItem(String changesItem) {
    if (this.changes == null) {
      this.changes = new ArrayList<String>();
    }
    this.changes.add(changesItem);
    return this;
  }

   /**
   * Get changes
   * @return changes
  **/
  @Schema(description = "")
  public List<String> getChanges() {
    return changes;
  }

  public void setChanges(List<String> changes) {
    this.changes = changes;
  }

  public ImageSpecForExecContainerImageCommitmentInput imageName(String imageName) {
    this.imageName = imageName;
    return this;
  }

   /**
   * Get imageName
   * @return imageName
  **/
  @Schema(description = "")
  public String getImageName() {
    return imageName;
  }

  public void setImageName(String imageName) {
    this.imageName = imageName;
  }

  public ImageSpecForExecContainerImageCommitmentInput message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageSpecForExecContainerImageCommitmentInput imageSpecForExecContainerImageCommitmentInput = (ImageSpecForExecContainerImageCommitmentInput) o;
    return Objects.equals(this.author, imageSpecForExecContainerImageCommitmentInput.author) &&
        Objects.equals(this.changes, imageSpecForExecContainerImageCommitmentInput.changes) &&
        Objects.equals(this.imageName, imageSpecForExecContainerImageCommitmentInput.imageName) &&
        Objects.equals(this.message, imageSpecForExecContainerImageCommitmentInput.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, changes, imageName, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageSpecForExecContainerImageCommitmentInput {\n");
    
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    imageName: ").append(toIndentedString(imageName)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
