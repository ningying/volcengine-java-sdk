/*
 * vpc
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vpc.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vpc.model.EgressFilterRuleForDescribeTrafficMirrorFiltersOutput;
import com.volcengine.vpc.model.IngressFilterRuleForDescribeTrafficMirrorFiltersOutput;
import com.volcengine.vpc.model.TagForDescribeTrafficMirrorFiltersOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput
 */



public class TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput {
  @SerializedName("CreatedAt")
  private String createdAt = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("EgressFilterRules")
  private List<EgressFilterRuleForDescribeTrafficMirrorFiltersOutput> egressFilterRules = null;

  @SerializedName("IngressFilterRules")
  private List<IngressFilterRuleForDescribeTrafficMirrorFiltersOutput> ingressFilterRules = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("Status")
  private String status = null;

  @SerializedName("Tags")
  private List<TagForDescribeTrafficMirrorFiltersOutput> tags = null;

  @SerializedName("TrafficMirrorFilterId")
  private String trafficMirrorFilterId = null;

  @SerializedName("TrafficMirrorFilterName")
  private String trafficMirrorFilterName = null;

  public TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(description = "")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput egressFilterRules(List<EgressFilterRuleForDescribeTrafficMirrorFiltersOutput> egressFilterRules) {
    this.egressFilterRules = egressFilterRules;
    return this;
  }

  public TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput addEgressFilterRulesItem(EgressFilterRuleForDescribeTrafficMirrorFiltersOutput egressFilterRulesItem) {
    if (this.egressFilterRules == null) {
      this.egressFilterRules = new ArrayList<EgressFilterRuleForDescribeTrafficMirrorFiltersOutput>();
    }
    this.egressFilterRules.add(egressFilterRulesItem);
    return this;
  }

   /**
   * Get egressFilterRules
   * @return egressFilterRules
  **/
  @Valid
  @Schema(description = "")
  public List<EgressFilterRuleForDescribeTrafficMirrorFiltersOutput> getEgressFilterRules() {
    return egressFilterRules;
  }

  public void setEgressFilterRules(List<EgressFilterRuleForDescribeTrafficMirrorFiltersOutput> egressFilterRules) {
    this.egressFilterRules = egressFilterRules;
  }

  public TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput ingressFilterRules(List<IngressFilterRuleForDescribeTrafficMirrorFiltersOutput> ingressFilterRules) {
    this.ingressFilterRules = ingressFilterRules;
    return this;
  }

  public TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput addIngressFilterRulesItem(IngressFilterRuleForDescribeTrafficMirrorFiltersOutput ingressFilterRulesItem) {
    if (this.ingressFilterRules == null) {
      this.ingressFilterRules = new ArrayList<IngressFilterRuleForDescribeTrafficMirrorFiltersOutput>();
    }
    this.ingressFilterRules.add(ingressFilterRulesItem);
    return this;
  }

   /**
   * Get ingressFilterRules
   * @return ingressFilterRules
  **/
  @Valid
  @Schema(description = "")
  public List<IngressFilterRuleForDescribeTrafficMirrorFiltersOutput> getIngressFilterRules() {
    return ingressFilterRules;
  }

  public void setIngressFilterRules(List<IngressFilterRuleForDescribeTrafficMirrorFiltersOutput> ingressFilterRules) {
    this.ingressFilterRules = ingressFilterRules;
  }

  public TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput tags(List<TagForDescribeTrafficMirrorFiltersOutput> tags) {
    this.tags = tags;
    return this;
  }

  public TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput addTagsItem(TagForDescribeTrafficMirrorFiltersOutput tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<TagForDescribeTrafficMirrorFiltersOutput>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Valid
  @Schema(description = "")
  public List<TagForDescribeTrafficMirrorFiltersOutput> getTags() {
    return tags;
  }

  public void setTags(List<TagForDescribeTrafficMirrorFiltersOutput> tags) {
    this.tags = tags;
  }

  public TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput trafficMirrorFilterId(String trafficMirrorFilterId) {
    this.trafficMirrorFilterId = trafficMirrorFilterId;
    return this;
  }

   /**
   * Get trafficMirrorFilterId
   * @return trafficMirrorFilterId
  **/
  @Schema(description = "")
  public String getTrafficMirrorFilterId() {
    return trafficMirrorFilterId;
  }

  public void setTrafficMirrorFilterId(String trafficMirrorFilterId) {
    this.trafficMirrorFilterId = trafficMirrorFilterId;
  }

  public TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput trafficMirrorFilterName(String trafficMirrorFilterName) {
    this.trafficMirrorFilterName = trafficMirrorFilterName;
    return this;
  }

   /**
   * Get trafficMirrorFilterName
   * @return trafficMirrorFilterName
  **/
  @Schema(description = "")
  public String getTrafficMirrorFilterName() {
    return trafficMirrorFilterName;
  }

  public void setTrafficMirrorFilterName(String trafficMirrorFilterName) {
    this.trafficMirrorFilterName = trafficMirrorFilterName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput trafficMirrorFilterForDescribeTrafficMirrorFiltersOutput = (TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput) o;
    return Objects.equals(this.createdAt, trafficMirrorFilterForDescribeTrafficMirrorFiltersOutput.createdAt) &&
        Objects.equals(this.description, trafficMirrorFilterForDescribeTrafficMirrorFiltersOutput.description) &&
        Objects.equals(this.egressFilterRules, trafficMirrorFilterForDescribeTrafficMirrorFiltersOutput.egressFilterRules) &&
        Objects.equals(this.ingressFilterRules, trafficMirrorFilterForDescribeTrafficMirrorFiltersOutput.ingressFilterRules) &&
        Objects.equals(this.projectName, trafficMirrorFilterForDescribeTrafficMirrorFiltersOutput.projectName) &&
        Objects.equals(this.status, trafficMirrorFilterForDescribeTrafficMirrorFiltersOutput.status) &&
        Objects.equals(this.tags, trafficMirrorFilterForDescribeTrafficMirrorFiltersOutput.tags) &&
        Objects.equals(this.trafficMirrorFilterId, trafficMirrorFilterForDescribeTrafficMirrorFiltersOutput.trafficMirrorFilterId) &&
        Objects.equals(this.trafficMirrorFilterName, trafficMirrorFilterForDescribeTrafficMirrorFiltersOutput.trafficMirrorFilterName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, description, egressFilterRules, ingressFilterRules, projectName, status, tags, trafficMirrorFilterId, trafficMirrorFilterName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput {\n");
    
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    egressFilterRules: ").append(toIndentedString(egressFilterRules)).append("\n");
    sb.append("    ingressFilterRules: ").append(toIndentedString(ingressFilterRules)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    trafficMirrorFilterId: ").append(toIndentedString(trafficMirrorFilterId)).append("\n");
    sb.append("    trafficMirrorFilterName: ").append(toIndentedString(trafficMirrorFilterName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
