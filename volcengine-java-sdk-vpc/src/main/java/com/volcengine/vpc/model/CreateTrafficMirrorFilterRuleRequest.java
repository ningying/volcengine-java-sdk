/*
 * vpc
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vpc.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateTrafficMirrorFilterRuleRequest
 */



public class CreateTrafficMirrorFilterRuleRequest {
  @SerializedName("ClientToken")
  private String clientToken = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("DestinationCidrBlock")
  private String destinationCidrBlock = null;

  @SerializedName("DestinationPortRange")
  private String destinationPortRange = null;

  /**
   * Gets or Sets policy
   */
  @JsonAdapter(PolicyEnum.Adapter.class)
  public enum PolicyEnum {
    @SerializedName("accept")
    ACCEPT("accept"),
    @SerializedName("reject")
    REJECT("reject");

    private String value;

    PolicyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PolicyEnum fromValue(String input) {
      for (PolicyEnum b : PolicyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public PolicyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PolicyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Policy")
  private PolicyEnum policy = null;

  @SerializedName("Priority")
  private Integer priority = null;

  /**
   * Gets or Sets protocol
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    @SerializedName("tcp")
    TCP("tcp"),
    @SerializedName("udp")
    UDP("udp"),
    @SerializedName("icmp")
    ICMP("icmp"),
    @SerializedName("all")
    ALL("all");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProtocolEnum fromValue(String input) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ProtocolEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Protocol")
  private ProtocolEnum protocol = null;

  @SerializedName("SourceCidrBlock")
  private String sourceCidrBlock = null;

  @SerializedName("SourcePortRange")
  private String sourcePortRange = null;

  /**
   * Gets or Sets trafficDirection
   */
  @JsonAdapter(TrafficDirectionEnum.Adapter.class)
  public enum TrafficDirectionEnum {
    @SerializedName("egress")
    EGRESS("egress"),
    @SerializedName("ingress")
    INGRESS("ingress");

    private String value;

    TrafficDirectionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TrafficDirectionEnum fromValue(String input) {
      for (TrafficDirectionEnum b : TrafficDirectionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TrafficDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrafficDirectionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TrafficDirectionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TrafficDirectionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("TrafficDirection")
  private TrafficDirectionEnum trafficDirection = null;

  @SerializedName("TrafficMirrorFilterId")
  private String trafficMirrorFilterId = null;

  public CreateTrafficMirrorFilterRuleRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

   /**
   * Get clientToken
   * @return clientToken
  **/
  @Schema(description = "")
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }

  public CreateTrafficMirrorFilterRuleRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreateTrafficMirrorFilterRuleRequest destinationCidrBlock(String destinationCidrBlock) {
    this.destinationCidrBlock = destinationCidrBlock;
    return this;
  }

   /**
   * Get destinationCidrBlock
   * @return destinationCidrBlock
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getDestinationCidrBlock() {
    return destinationCidrBlock;
  }

  public void setDestinationCidrBlock(String destinationCidrBlock) {
    this.destinationCidrBlock = destinationCidrBlock;
  }

  public CreateTrafficMirrorFilterRuleRequest destinationPortRange(String destinationPortRange) {
    this.destinationPortRange = destinationPortRange;
    return this;
  }

   /**
   * Get destinationPortRange
   * @return destinationPortRange
  **/
  @Schema(description = "")
  public String getDestinationPortRange() {
    return destinationPortRange;
  }

  public void setDestinationPortRange(String destinationPortRange) {
    this.destinationPortRange = destinationPortRange;
  }

  public CreateTrafficMirrorFilterRuleRequest policy(PolicyEnum policy) {
    this.policy = policy;
    return this;
  }

   /**
   * Get policy
   * @return policy
  **/
  @NotNull
  @Schema(required = true, description = "")
  public PolicyEnum getPolicy() {
    return policy;
  }

  public void setPolicy(PolicyEnum policy) {
    this.policy = policy;
  }

  public CreateTrafficMirrorFilterRuleRequest priority(Integer priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @Schema(description = "")
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }

  public CreateTrafficMirrorFilterRuleRequest protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @NotNull
  @Schema(required = true, description = "")
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }

  public CreateTrafficMirrorFilterRuleRequest sourceCidrBlock(String sourceCidrBlock) {
    this.sourceCidrBlock = sourceCidrBlock;
    return this;
  }

   /**
   * Get sourceCidrBlock
   * @return sourceCidrBlock
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getSourceCidrBlock() {
    return sourceCidrBlock;
  }

  public void setSourceCidrBlock(String sourceCidrBlock) {
    this.sourceCidrBlock = sourceCidrBlock;
  }

  public CreateTrafficMirrorFilterRuleRequest sourcePortRange(String sourcePortRange) {
    this.sourcePortRange = sourcePortRange;
    return this;
  }

   /**
   * Get sourcePortRange
   * @return sourcePortRange
  **/
  @Schema(description = "")
  public String getSourcePortRange() {
    return sourcePortRange;
  }

  public void setSourcePortRange(String sourcePortRange) {
    this.sourcePortRange = sourcePortRange;
  }

  public CreateTrafficMirrorFilterRuleRequest trafficDirection(TrafficDirectionEnum trafficDirection) {
    this.trafficDirection = trafficDirection;
    return this;
  }

   /**
   * Get trafficDirection
   * @return trafficDirection
  **/
  @NotNull
  @Schema(required = true, description = "")
  public TrafficDirectionEnum getTrafficDirection() {
    return trafficDirection;
  }

  public void setTrafficDirection(TrafficDirectionEnum trafficDirection) {
    this.trafficDirection = trafficDirection;
  }

  public CreateTrafficMirrorFilterRuleRequest trafficMirrorFilterId(String trafficMirrorFilterId) {
    this.trafficMirrorFilterId = trafficMirrorFilterId;
    return this;
  }

   /**
   * Get trafficMirrorFilterId
   * @return trafficMirrorFilterId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getTrafficMirrorFilterId() {
    return trafficMirrorFilterId;
  }

  public void setTrafficMirrorFilterId(String trafficMirrorFilterId) {
    this.trafficMirrorFilterId = trafficMirrorFilterId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTrafficMirrorFilterRuleRequest createTrafficMirrorFilterRuleRequest = (CreateTrafficMirrorFilterRuleRequest) o;
    return Objects.equals(this.clientToken, createTrafficMirrorFilterRuleRequest.clientToken) &&
        Objects.equals(this.description, createTrafficMirrorFilterRuleRequest.description) &&
        Objects.equals(this.destinationCidrBlock, createTrafficMirrorFilterRuleRequest.destinationCidrBlock) &&
        Objects.equals(this.destinationPortRange, createTrafficMirrorFilterRuleRequest.destinationPortRange) &&
        Objects.equals(this.policy, createTrafficMirrorFilterRuleRequest.policy) &&
        Objects.equals(this.priority, createTrafficMirrorFilterRuleRequest.priority) &&
        Objects.equals(this.protocol, createTrafficMirrorFilterRuleRequest.protocol) &&
        Objects.equals(this.sourceCidrBlock, createTrafficMirrorFilterRuleRequest.sourceCidrBlock) &&
        Objects.equals(this.sourcePortRange, createTrafficMirrorFilterRuleRequest.sourcePortRange) &&
        Objects.equals(this.trafficDirection, createTrafficMirrorFilterRuleRequest.trafficDirection) &&
        Objects.equals(this.trafficMirrorFilterId, createTrafficMirrorFilterRuleRequest.trafficMirrorFilterId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, description, destinationCidrBlock, destinationPortRange, policy, priority, protocol, sourceCidrBlock, sourcePortRange, trafficDirection, trafficMirrorFilterId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTrafficMirrorFilterRuleRequest {\n");
    
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destinationCidrBlock: ").append(toIndentedString(destinationCidrBlock)).append("\n");
    sb.append("    destinationPortRange: ").append(toIndentedString(destinationPortRange)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    sourceCidrBlock: ").append(toIndentedString(sourceCidrBlock)).append("\n");
    sb.append("    sourcePortRange: ").append(toIndentedString(sourcePortRange)).append("\n");
    sb.append("    trafficDirection: ").append(toIndentedString(trafficDirection)).append("\n");
    sb.append("    trafficMirrorFilterId: ").append(toIndentedString(trafficMirrorFilterId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
