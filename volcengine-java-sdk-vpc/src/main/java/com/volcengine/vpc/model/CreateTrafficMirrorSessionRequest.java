/*
 * vpc
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vpc.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vpc.model.TagForCreateTrafficMirrorSessionInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateTrafficMirrorSessionRequest
 */



public class CreateTrafficMirrorSessionRequest {
  @SerializedName("ClientToken")
  private String clientToken = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("NetworkInterfaceId")
  private String networkInterfaceId = null;

  @SerializedName("PacketLength")
  private Integer packetLength = null;

  @SerializedName("Priority")
  private Integer priority = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("Tags")
  private List<TagForCreateTrafficMirrorSessionInput> tags = null;

  @SerializedName("TrafficMirrorFilterId")
  private String trafficMirrorFilterId = null;

  @SerializedName("TrafficMirrorSessionName")
  private String trafficMirrorSessionName = null;

  @SerializedName("TrafficMirrorTargetId")
  private String trafficMirrorTargetId = null;

  @SerializedName("VirtualNetworkId")
  private Integer virtualNetworkId = null;

  public CreateTrafficMirrorSessionRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

   /**
   * Get clientToken
   * @return clientToken
  **/
  @Schema(description = "")
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }

  public CreateTrafficMirrorSessionRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreateTrafficMirrorSessionRequest networkInterfaceId(String networkInterfaceId) {
    this.networkInterfaceId = networkInterfaceId;
    return this;
  }

   /**
   * Get networkInterfaceId
   * @return networkInterfaceId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getNetworkInterfaceId() {
    return networkInterfaceId;
  }

  public void setNetworkInterfaceId(String networkInterfaceId) {
    this.networkInterfaceId = networkInterfaceId;
  }

  public CreateTrafficMirrorSessionRequest packetLength(Integer packetLength) {
    this.packetLength = packetLength;
    return this;
  }

   /**
   * Get packetLength
   * @return packetLength
  **/
  @Schema(description = "")
  public Integer getPacketLength() {
    return packetLength;
  }

  public void setPacketLength(Integer packetLength) {
    this.packetLength = packetLength;
  }

  public CreateTrafficMirrorSessionRequest priority(Integer priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @NotNull
  @Schema(required = true, description = "")
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }

  public CreateTrafficMirrorSessionRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public CreateTrafficMirrorSessionRequest tags(List<TagForCreateTrafficMirrorSessionInput> tags) {
    this.tags = tags;
    return this;
  }

  public CreateTrafficMirrorSessionRequest addTagsItem(TagForCreateTrafficMirrorSessionInput tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<TagForCreateTrafficMirrorSessionInput>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Valid
  @Schema(description = "")
  public List<TagForCreateTrafficMirrorSessionInput> getTags() {
    return tags;
  }

  public void setTags(List<TagForCreateTrafficMirrorSessionInput> tags) {
    this.tags = tags;
  }

  public CreateTrafficMirrorSessionRequest trafficMirrorFilterId(String trafficMirrorFilterId) {
    this.trafficMirrorFilterId = trafficMirrorFilterId;
    return this;
  }

   /**
   * Get trafficMirrorFilterId
   * @return trafficMirrorFilterId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getTrafficMirrorFilterId() {
    return trafficMirrorFilterId;
  }

  public void setTrafficMirrorFilterId(String trafficMirrorFilterId) {
    this.trafficMirrorFilterId = trafficMirrorFilterId;
  }

  public CreateTrafficMirrorSessionRequest trafficMirrorSessionName(String trafficMirrorSessionName) {
    this.trafficMirrorSessionName = trafficMirrorSessionName;
    return this;
  }

   /**
   * Get trafficMirrorSessionName
   * @return trafficMirrorSessionName
  **/
  @Schema(description = "")
  public String getTrafficMirrorSessionName() {
    return trafficMirrorSessionName;
  }

  public void setTrafficMirrorSessionName(String trafficMirrorSessionName) {
    this.trafficMirrorSessionName = trafficMirrorSessionName;
  }

  public CreateTrafficMirrorSessionRequest trafficMirrorTargetId(String trafficMirrorTargetId) {
    this.trafficMirrorTargetId = trafficMirrorTargetId;
    return this;
  }

   /**
   * Get trafficMirrorTargetId
   * @return trafficMirrorTargetId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getTrafficMirrorTargetId() {
    return trafficMirrorTargetId;
  }

  public void setTrafficMirrorTargetId(String trafficMirrorTargetId) {
    this.trafficMirrorTargetId = trafficMirrorTargetId;
  }

  public CreateTrafficMirrorSessionRequest virtualNetworkId(Integer virtualNetworkId) {
    this.virtualNetworkId = virtualNetworkId;
    return this;
  }

   /**
   * Get virtualNetworkId
   * @return virtualNetworkId
  **/
  @Schema(description = "")
  public Integer getVirtualNetworkId() {
    return virtualNetworkId;
  }

  public void setVirtualNetworkId(Integer virtualNetworkId) {
    this.virtualNetworkId = virtualNetworkId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTrafficMirrorSessionRequest createTrafficMirrorSessionRequest = (CreateTrafficMirrorSessionRequest) o;
    return Objects.equals(this.clientToken, createTrafficMirrorSessionRequest.clientToken) &&
        Objects.equals(this.description, createTrafficMirrorSessionRequest.description) &&
        Objects.equals(this.networkInterfaceId, createTrafficMirrorSessionRequest.networkInterfaceId) &&
        Objects.equals(this.packetLength, createTrafficMirrorSessionRequest.packetLength) &&
        Objects.equals(this.priority, createTrafficMirrorSessionRequest.priority) &&
        Objects.equals(this.projectName, createTrafficMirrorSessionRequest.projectName) &&
        Objects.equals(this.tags, createTrafficMirrorSessionRequest.tags) &&
        Objects.equals(this.trafficMirrorFilterId, createTrafficMirrorSessionRequest.trafficMirrorFilterId) &&
        Objects.equals(this.trafficMirrorSessionName, createTrafficMirrorSessionRequest.trafficMirrorSessionName) &&
        Objects.equals(this.trafficMirrorTargetId, createTrafficMirrorSessionRequest.trafficMirrorTargetId) &&
        Objects.equals(this.virtualNetworkId, createTrafficMirrorSessionRequest.virtualNetworkId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, description, networkInterfaceId, packetLength, priority, projectName, tags, trafficMirrorFilterId, trafficMirrorSessionName, trafficMirrorTargetId, virtualNetworkId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTrafficMirrorSessionRequest {\n");
    
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    networkInterfaceId: ").append(toIndentedString(networkInterfaceId)).append("\n");
    sb.append("    packetLength: ").append(toIndentedString(packetLength)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    trafficMirrorFilterId: ").append(toIndentedString(trafficMirrorFilterId)).append("\n");
    sb.append("    trafficMirrorSessionName: ").append(toIndentedString(trafficMirrorSessionName)).append("\n");
    sb.append("    trafficMirrorTargetId: ").append(toIndentedString(trafficMirrorTargetId)).append("\n");
    sb.append("    virtualNetworkId: ").append(toIndentedString(virtualNetworkId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
