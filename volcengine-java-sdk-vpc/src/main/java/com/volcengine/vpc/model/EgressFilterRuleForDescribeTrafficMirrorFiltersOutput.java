/*
 * vpc
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vpc.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * EgressFilterRuleForDescribeTrafficMirrorFiltersOutput
 */



public class EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {
  @SerializedName("Description")
  private String description = null;

  @SerializedName("DestinationCidrBlock")
  private String destinationCidrBlock = null;

  @SerializedName("DestinationPortRange")
  private String destinationPortRange = null;

  @SerializedName("Policy")
  private String policy = null;

  @SerializedName("Priority")
  private Integer priority = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("Protocol")
  private String protocol = null;

  @SerializedName("SourceCidrBlock")
  private String sourceCidrBlock = null;

  @SerializedName("SourcePortRange")
  private String sourcePortRange = null;

  @SerializedName("Status")
  private String status = null;

  @SerializedName("TrafficDirection")
  private String trafficDirection = null;

  @SerializedName("TrafficMirrorFilterId")
  private String trafficMirrorFilterId = null;

  @SerializedName("TrafficMirrorFilterRuleId")
  private String trafficMirrorFilterRuleId = null;

  public EgressFilterRuleForDescribeTrafficMirrorFiltersOutput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public EgressFilterRuleForDescribeTrafficMirrorFiltersOutput destinationCidrBlock(String destinationCidrBlock) {
    this.destinationCidrBlock = destinationCidrBlock;
    return this;
  }

   /**
   * Get destinationCidrBlock
   * @return destinationCidrBlock
  **/
  @Schema(description = "")
  public String getDestinationCidrBlock() {
    return destinationCidrBlock;
  }

  public void setDestinationCidrBlock(String destinationCidrBlock) {
    this.destinationCidrBlock = destinationCidrBlock;
  }

  public EgressFilterRuleForDescribeTrafficMirrorFiltersOutput destinationPortRange(String destinationPortRange) {
    this.destinationPortRange = destinationPortRange;
    return this;
  }

   /**
   * Get destinationPortRange
   * @return destinationPortRange
  **/
  @Schema(description = "")
  public String getDestinationPortRange() {
    return destinationPortRange;
  }

  public void setDestinationPortRange(String destinationPortRange) {
    this.destinationPortRange = destinationPortRange;
  }

  public EgressFilterRuleForDescribeTrafficMirrorFiltersOutput policy(String policy) {
    this.policy = policy;
    return this;
  }

   /**
   * Get policy
   * @return policy
  **/
  @Schema(description = "")
  public String getPolicy() {
    return policy;
  }

  public void setPolicy(String policy) {
    this.policy = policy;
  }

  public EgressFilterRuleForDescribeTrafficMirrorFiltersOutput priority(Integer priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @Schema(description = "")
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }

  public EgressFilterRuleForDescribeTrafficMirrorFiltersOutput projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public EgressFilterRuleForDescribeTrafficMirrorFiltersOutput protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @Schema(description = "")
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }

  public EgressFilterRuleForDescribeTrafficMirrorFiltersOutput sourceCidrBlock(String sourceCidrBlock) {
    this.sourceCidrBlock = sourceCidrBlock;
    return this;
  }

   /**
   * Get sourceCidrBlock
   * @return sourceCidrBlock
  **/
  @Schema(description = "")
  public String getSourceCidrBlock() {
    return sourceCidrBlock;
  }

  public void setSourceCidrBlock(String sourceCidrBlock) {
    this.sourceCidrBlock = sourceCidrBlock;
  }

  public EgressFilterRuleForDescribeTrafficMirrorFiltersOutput sourcePortRange(String sourcePortRange) {
    this.sourcePortRange = sourcePortRange;
    return this;
  }

   /**
   * Get sourcePortRange
   * @return sourcePortRange
  **/
  @Schema(description = "")
  public String getSourcePortRange() {
    return sourcePortRange;
  }

  public void setSourcePortRange(String sourcePortRange) {
    this.sourcePortRange = sourcePortRange;
  }

  public EgressFilterRuleForDescribeTrafficMirrorFiltersOutput status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public EgressFilterRuleForDescribeTrafficMirrorFiltersOutput trafficDirection(String trafficDirection) {
    this.trafficDirection = trafficDirection;
    return this;
  }

   /**
   * Get trafficDirection
   * @return trafficDirection
  **/
  @Schema(description = "")
  public String getTrafficDirection() {
    return trafficDirection;
  }

  public void setTrafficDirection(String trafficDirection) {
    this.trafficDirection = trafficDirection;
  }

  public EgressFilterRuleForDescribeTrafficMirrorFiltersOutput trafficMirrorFilterId(String trafficMirrorFilterId) {
    this.trafficMirrorFilterId = trafficMirrorFilterId;
    return this;
  }

   /**
   * Get trafficMirrorFilterId
   * @return trafficMirrorFilterId
  **/
  @Schema(description = "")
  public String getTrafficMirrorFilterId() {
    return trafficMirrorFilterId;
  }

  public void setTrafficMirrorFilterId(String trafficMirrorFilterId) {
    this.trafficMirrorFilterId = trafficMirrorFilterId;
  }

  public EgressFilterRuleForDescribeTrafficMirrorFiltersOutput trafficMirrorFilterRuleId(String trafficMirrorFilterRuleId) {
    this.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId;
    return this;
  }

   /**
   * Get trafficMirrorFilterRuleId
   * @return trafficMirrorFilterRuleId
  **/
  @Schema(description = "")
  public String getTrafficMirrorFilterRuleId() {
    return trafficMirrorFilterRuleId;
  }

  public void setTrafficMirrorFilterRuleId(String trafficMirrorFilterRuleId) {
    this.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EgressFilterRuleForDescribeTrafficMirrorFiltersOutput egressFilterRuleForDescribeTrafficMirrorFiltersOutput = (EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) o;
    return Objects.equals(this.description, egressFilterRuleForDescribeTrafficMirrorFiltersOutput.description) &&
        Objects.equals(this.destinationCidrBlock, egressFilterRuleForDescribeTrafficMirrorFiltersOutput.destinationCidrBlock) &&
        Objects.equals(this.destinationPortRange, egressFilterRuleForDescribeTrafficMirrorFiltersOutput.destinationPortRange) &&
        Objects.equals(this.policy, egressFilterRuleForDescribeTrafficMirrorFiltersOutput.policy) &&
        Objects.equals(this.priority, egressFilterRuleForDescribeTrafficMirrorFiltersOutput.priority) &&
        Objects.equals(this.projectName, egressFilterRuleForDescribeTrafficMirrorFiltersOutput.projectName) &&
        Objects.equals(this.protocol, egressFilterRuleForDescribeTrafficMirrorFiltersOutput.protocol) &&
        Objects.equals(this.sourceCidrBlock, egressFilterRuleForDescribeTrafficMirrorFiltersOutput.sourceCidrBlock) &&
        Objects.equals(this.sourcePortRange, egressFilterRuleForDescribeTrafficMirrorFiltersOutput.sourcePortRange) &&
        Objects.equals(this.status, egressFilterRuleForDescribeTrafficMirrorFiltersOutput.status) &&
        Objects.equals(this.trafficDirection, egressFilterRuleForDescribeTrafficMirrorFiltersOutput.trafficDirection) &&
        Objects.equals(this.trafficMirrorFilterId, egressFilterRuleForDescribeTrafficMirrorFiltersOutput.trafficMirrorFilterId) &&
        Objects.equals(this.trafficMirrorFilterRuleId, egressFilterRuleForDescribeTrafficMirrorFiltersOutput.trafficMirrorFilterRuleId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, destinationCidrBlock, destinationPortRange, policy, priority, projectName, protocol, sourceCidrBlock, sourcePortRange, status, trafficDirection, trafficMirrorFilterId, trafficMirrorFilterRuleId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destinationCidrBlock: ").append(toIndentedString(destinationCidrBlock)).append("\n");
    sb.append("    destinationPortRange: ").append(toIndentedString(destinationPortRange)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    sourceCidrBlock: ").append(toIndentedString(sourceCidrBlock)).append("\n");
    sb.append("    sourcePortRange: ").append(toIndentedString(sourcePortRange)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trafficDirection: ").append(toIndentedString(trafficDirection)).append("\n");
    sb.append("    trafficMirrorFilterId: ").append(toIndentedString(trafficMirrorFilterId)).append("\n");
    sb.append("    trafficMirrorFilterRuleId: ").append(toIndentedString(trafficMirrorFilterRuleId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
