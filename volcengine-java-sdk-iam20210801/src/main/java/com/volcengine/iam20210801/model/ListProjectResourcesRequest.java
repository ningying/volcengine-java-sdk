/*
 * iam20210801
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.iam20210801.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ListProjectResourcesRequest
 */



public class ListProjectResourcesRequest {
  @SerializedName("Limit")
  private Integer limit = null;

  @SerializedName("Offset")
  private Integer offset = null;

  /**
   * Gets or Sets orderBy
   */
  @JsonAdapter(OrderByEnum.Adapter.class)
  public enum OrderByEnum {
    @SerializedName("CreatedTime")
    CREATEDTIME("CreatedTime"),
    @SerializedName("UpdatedTime")
    UPDATEDTIME("UpdatedTime");

    private String value;

    OrderByEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OrderByEnum fromValue(String input) {
      for (OrderByEnum b : OrderByEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OrderByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderByEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OrderByEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OrderByEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("OrderBy")
  private OrderByEnum orderBy = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("Query")
  private String query = null;

  @SerializedName("ResourceRegion")
  private String resourceRegion = null;

  @SerializedName("ResourceType")
  private String resourceType = null;

  @SerializedName("ServiceName")
  private String serviceName = null;

  @SerializedName("Sort")
  private Integer sort = null;

  @SerializedName("WithSubProjectResource")
  private Integer withSubProjectResource = null;

  public ListProjectResourcesRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @Schema(description = "")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public ListProjectResourcesRequest offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @Schema(description = "")
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }

  public ListProjectResourcesRequest orderBy(OrderByEnum orderBy) {
    this.orderBy = orderBy;
    return this;
  }

   /**
   * Get orderBy
   * @return orderBy
  **/
  @Schema(description = "")
  public OrderByEnum getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(OrderByEnum orderBy) {
    this.orderBy = orderBy;
  }

  public ListProjectResourcesRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public ListProjectResourcesRequest query(String query) {
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @Schema(description = "")
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }

  public ListProjectResourcesRequest resourceRegion(String resourceRegion) {
    this.resourceRegion = resourceRegion;
    return this;
  }

   /**
   * Get resourceRegion
   * @return resourceRegion
  **/
  @Schema(description = "")
  public String getResourceRegion() {
    return resourceRegion;
  }

  public void setResourceRegion(String resourceRegion) {
    this.resourceRegion = resourceRegion;
  }

  public ListProjectResourcesRequest resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

   /**
   * Get resourceType
   * @return resourceType
  **/
  @Schema(description = "")
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }

  public ListProjectResourcesRequest serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

   /**
   * Get serviceName
   * @return serviceName
  **/
  @Schema(description = "")
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }

  public ListProjectResourcesRequest sort(Integer sort) {
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @Schema(description = "")
  public Integer getSort() {
    return sort;
  }

  public void setSort(Integer sort) {
    this.sort = sort;
  }

  public ListProjectResourcesRequest withSubProjectResource(Integer withSubProjectResource) {
    this.withSubProjectResource = withSubProjectResource;
    return this;
  }

   /**
   * Get withSubProjectResource
   * @return withSubProjectResource
  **/
  @Schema(description = "")
  public Integer getWithSubProjectResource() {
    return withSubProjectResource;
  }

  public void setWithSubProjectResource(Integer withSubProjectResource) {
    this.withSubProjectResource = withSubProjectResource;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListProjectResourcesRequest listProjectResourcesRequest = (ListProjectResourcesRequest) o;
    return Objects.equals(this.limit, listProjectResourcesRequest.limit) &&
        Objects.equals(this.offset, listProjectResourcesRequest.offset) &&
        Objects.equals(this.orderBy, listProjectResourcesRequest.orderBy) &&
        Objects.equals(this.projectName, listProjectResourcesRequest.projectName) &&
        Objects.equals(this.query, listProjectResourcesRequest.query) &&
        Objects.equals(this.resourceRegion, listProjectResourcesRequest.resourceRegion) &&
        Objects.equals(this.resourceType, listProjectResourcesRequest.resourceType) &&
        Objects.equals(this.serviceName, listProjectResourcesRequest.serviceName) &&
        Objects.equals(this.sort, listProjectResourcesRequest.sort) &&
        Objects.equals(this.withSubProjectResource, listProjectResourcesRequest.withSubProjectResource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(limit, offset, orderBy, projectName, query, resourceRegion, resourceType, serviceName, sort, withSubProjectResource);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListProjectResourcesRequest {\n");
    
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    resourceRegion: ").append(toIndentedString(resourceRegion)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    withSubProjectResource: ").append(toIndentedString(withSubProjectResource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
