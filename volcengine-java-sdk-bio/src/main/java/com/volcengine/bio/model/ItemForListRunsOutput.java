/*
 * bio
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.bio.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.bio.model.TaskStatusForListRunsOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ItemForListRunsOutput
 */



public class ItemForListRunsOutput {
  @SerializedName("DataEntityRowID")
  private String dataEntityRowID = null;

  @SerializedName("Duration")
  private Integer duration = null;

  @SerializedName("EngineRunID")
  private String engineRunID = null;

  @SerializedName("EngineWorkflowName")
  private String engineWorkflowName = null;

  @SerializedName("FinishTime")
  private Integer finishTime = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("Inputs")
  private String inputs = null;

  @SerializedName("Log")
  private String log = null;

  @SerializedName("Message")
  private String message = null;

  @SerializedName("Outputs")
  private String outputs = null;

  @SerializedName("StartTime")
  private Integer startTime = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("Succeeded")
    SUCCEEDED("Succeeded"),
    @SerializedName("Failed")
    FAILED("Failed"),
    @SerializedName("Running")
    RUNNING("Running"),
    @SerializedName("Pending")
    PENDING("Pending"),
    @SerializedName("Cancelling")
    CANCELLING("Cancelling"),
    @SerializedName("Cancelled")
    CANCELLED("Cancelled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Status")
  private StatusEnum status = null;

  @SerializedName("SubmissionID")
  private String submissionID = null;

  @SerializedName("TaskStatus")
  private TaskStatusForListRunsOutput taskStatus = null;

  public ItemForListRunsOutput dataEntityRowID(String dataEntityRowID) {
    this.dataEntityRowID = dataEntityRowID;
    return this;
  }

   /**
   * Get dataEntityRowID
   * @return dataEntityRowID
  **/
  @Schema(description = "")
  public String getDataEntityRowID() {
    return dataEntityRowID;
  }

  public void setDataEntityRowID(String dataEntityRowID) {
    this.dataEntityRowID = dataEntityRowID;
  }

  public ItemForListRunsOutput duration(Integer duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @Schema(description = "")
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }

  public ItemForListRunsOutput engineRunID(String engineRunID) {
    this.engineRunID = engineRunID;
    return this;
  }

   /**
   * Get engineRunID
   * @return engineRunID
  **/
  @Schema(description = "")
  public String getEngineRunID() {
    return engineRunID;
  }

  public void setEngineRunID(String engineRunID) {
    this.engineRunID = engineRunID;
  }

  public ItemForListRunsOutput engineWorkflowName(String engineWorkflowName) {
    this.engineWorkflowName = engineWorkflowName;
    return this;
  }

   /**
   * Get engineWorkflowName
   * @return engineWorkflowName
  **/
  @Schema(description = "")
  public String getEngineWorkflowName() {
    return engineWorkflowName;
  }

  public void setEngineWorkflowName(String engineWorkflowName) {
    this.engineWorkflowName = engineWorkflowName;
  }

  public ItemForListRunsOutput finishTime(Integer finishTime) {
    this.finishTime = finishTime;
    return this;
  }

   /**
   * Get finishTime
   * @return finishTime
  **/
  @Schema(description = "")
  public Integer getFinishTime() {
    return finishTime;
  }

  public void setFinishTime(Integer finishTime) {
    this.finishTime = finishTime;
  }

  public ItemForListRunsOutput ID(String ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @Schema(description = "")
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }

  public ItemForListRunsOutput inputs(String inputs) {
    this.inputs = inputs;
    return this;
  }

   /**
   * Get inputs
   * @return inputs
  **/
  @Schema(description = "")
  public String getInputs() {
    return inputs;
  }

  public void setInputs(String inputs) {
    this.inputs = inputs;
  }

  public ItemForListRunsOutput log(String log) {
    this.log = log;
    return this;
  }

   /**
   * Get log
   * @return log
  **/
  @Schema(description = "")
  public String getLog() {
    return log;
  }

  public void setLog(String log) {
    this.log = log;
  }

  public ItemForListRunsOutput message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public ItemForListRunsOutput outputs(String outputs) {
    this.outputs = outputs;
    return this;
  }

   /**
   * Get outputs
   * @return outputs
  **/
  @Schema(description = "")
  public String getOutputs() {
    return outputs;
  }

  public void setOutputs(String outputs) {
    this.outputs = outputs;
  }

  public ItemForListRunsOutput startTime(Integer startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @Schema(description = "")
  public Integer getStartTime() {
    return startTime;
  }

  public void setStartTime(Integer startTime) {
    this.startTime = startTime;
  }

  public ItemForListRunsOutput status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ItemForListRunsOutput submissionID(String submissionID) {
    this.submissionID = submissionID;
    return this;
  }

   /**
   * Get submissionID
   * @return submissionID
  **/
  @Schema(description = "")
  public String getSubmissionID() {
    return submissionID;
  }

  public void setSubmissionID(String submissionID) {
    this.submissionID = submissionID;
  }

  public ItemForListRunsOutput taskStatus(TaskStatusForListRunsOutput taskStatus) {
    this.taskStatus = taskStatus;
    return this;
  }

   /**
   * Get taskStatus
   * @return taskStatus
  **/
  @Valid
  @Schema(description = "")
  public TaskStatusForListRunsOutput getTaskStatus() {
    return taskStatus;
  }

  public void setTaskStatus(TaskStatusForListRunsOutput taskStatus) {
    this.taskStatus = taskStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemForListRunsOutput itemForListRunsOutput = (ItemForListRunsOutput) o;
    return Objects.equals(this.dataEntityRowID, itemForListRunsOutput.dataEntityRowID) &&
        Objects.equals(this.duration, itemForListRunsOutput.duration) &&
        Objects.equals(this.engineRunID, itemForListRunsOutput.engineRunID) &&
        Objects.equals(this.engineWorkflowName, itemForListRunsOutput.engineWorkflowName) &&
        Objects.equals(this.finishTime, itemForListRunsOutput.finishTime) &&
        Objects.equals(this.ID, itemForListRunsOutput.ID) &&
        Objects.equals(this.inputs, itemForListRunsOutput.inputs) &&
        Objects.equals(this.log, itemForListRunsOutput.log) &&
        Objects.equals(this.message, itemForListRunsOutput.message) &&
        Objects.equals(this.outputs, itemForListRunsOutput.outputs) &&
        Objects.equals(this.startTime, itemForListRunsOutput.startTime) &&
        Objects.equals(this.status, itemForListRunsOutput.status) &&
        Objects.equals(this.submissionID, itemForListRunsOutput.submissionID) &&
        Objects.equals(this.taskStatus, itemForListRunsOutput.taskStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataEntityRowID, duration, engineRunID, engineWorkflowName, finishTime, ID, inputs, log, message, outputs, startTime, status, submissionID, taskStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemForListRunsOutput {\n");
    
    sb.append("    dataEntityRowID: ").append(toIndentedString(dataEntityRowID)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    engineRunID: ").append(toIndentedString(engineRunID)).append("\n");
    sb.append("    engineWorkflowName: ").append(toIndentedString(engineWorkflowName)).append("\n");
    sb.append("    finishTime: ").append(toIndentedString(finishTime)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    log: ").append(toIndentedString(log)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submissionID: ").append(toIndentedString(submissionID)).append("\n");
    sb.append("    taskStatus: ").append(toIndentedString(taskStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
