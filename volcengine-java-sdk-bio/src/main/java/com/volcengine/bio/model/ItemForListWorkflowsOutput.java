/*
 * bio
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.bio.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.bio.model.InputForListWorkflowsOutput;
import com.volcengine.bio.model.OutputForListWorkflowsOutput;
import com.volcengine.bio.model.StatusForListWorkflowsOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ItemForListWorkflowsOutput
 */



public class ItemForListWorkflowsOutput {
  @SerializedName("CreateTime")
  private Integer createTime = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("Graph")
  private String graph = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("Inputs")
  private List<InputForListWorkflowsOutput> inputs = null;

  @SerializedName("Language")
  private String language = null;

  @SerializedName("MainWorkflowPath")
  private String mainWorkflowPath = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("Outputs")
  private List<OutputForListWorkflowsOutput> outputs = null;

  @SerializedName("OwnerName")
  private String ownerName = null;

  @SerializedName("Source")
  private String source = null;

  /**
   * Gets or Sets sourceType
   */
  @JsonAdapter(SourceTypeEnum.Adapter.class)
  public enum SourceTypeEnum {
    @SerializedName("git")
    GIT("git"),
    @SerializedName("dockstore")
    DOCKSTORE("dockstore"),
    @SerializedName("file")
    FILE("file"),
    @SerializedName("dev")
    DEV("dev");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SourceTypeEnum fromValue(String input) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SourceTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("SourceType")
  private SourceTypeEnum sourceType = null;

  @SerializedName("Status")
  private StatusForListWorkflowsOutput status = null;

  @SerializedName("Tag")
  private String tag = null;

  @SerializedName("Token")
  private String token = null;

  @SerializedName("UpdateTime")
  private String updateTime = null;

  public ItemForListWorkflowsOutput createTime(Integer createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @Schema(description = "")
  public Integer getCreateTime() {
    return createTime;
  }

  public void setCreateTime(Integer createTime) {
    this.createTime = createTime;
  }

  public ItemForListWorkflowsOutput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ItemForListWorkflowsOutput graph(String graph) {
    this.graph = graph;
    return this;
  }

   /**
   * Get graph
   * @return graph
  **/
  @Schema(description = "")
  public String getGraph() {
    return graph;
  }

  public void setGraph(String graph) {
    this.graph = graph;
  }

  public ItemForListWorkflowsOutput ID(String ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @Schema(description = "")
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }

  public ItemForListWorkflowsOutput inputs(List<InputForListWorkflowsOutput> inputs) {
    this.inputs = inputs;
    return this;
  }

  public ItemForListWorkflowsOutput addInputsItem(InputForListWorkflowsOutput inputsItem) {
    if (this.inputs == null) {
      this.inputs = new ArrayList<InputForListWorkflowsOutput>();
    }
    this.inputs.add(inputsItem);
    return this;
  }

   /**
   * Get inputs
   * @return inputs
  **/
  @Valid
  @Schema(description = "")
  public List<InputForListWorkflowsOutput> getInputs() {
    return inputs;
  }

  public void setInputs(List<InputForListWorkflowsOutput> inputs) {
    this.inputs = inputs;
  }

  public ItemForListWorkflowsOutput language(String language) {
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @Schema(description = "")
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public ItemForListWorkflowsOutput mainWorkflowPath(String mainWorkflowPath) {
    this.mainWorkflowPath = mainWorkflowPath;
    return this;
  }

   /**
   * Get mainWorkflowPath
   * @return mainWorkflowPath
  **/
  @Schema(description = "")
  public String getMainWorkflowPath() {
    return mainWorkflowPath;
  }

  public void setMainWorkflowPath(String mainWorkflowPath) {
    this.mainWorkflowPath = mainWorkflowPath;
  }

  public ItemForListWorkflowsOutput name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ItemForListWorkflowsOutput outputs(List<OutputForListWorkflowsOutput> outputs) {
    this.outputs = outputs;
    return this;
  }

  public ItemForListWorkflowsOutput addOutputsItem(OutputForListWorkflowsOutput outputsItem) {
    if (this.outputs == null) {
      this.outputs = new ArrayList<OutputForListWorkflowsOutput>();
    }
    this.outputs.add(outputsItem);
    return this;
  }

   /**
   * Get outputs
   * @return outputs
  **/
  @Valid
  @Schema(description = "")
  public List<OutputForListWorkflowsOutput> getOutputs() {
    return outputs;
  }

  public void setOutputs(List<OutputForListWorkflowsOutput> outputs) {
    this.outputs = outputs;
  }

  public ItemForListWorkflowsOutput ownerName(String ownerName) {
    this.ownerName = ownerName;
    return this;
  }

   /**
   * Get ownerName
   * @return ownerName
  **/
  @Schema(description = "")
  public String getOwnerName() {
    return ownerName;
  }

  public void setOwnerName(String ownerName) {
    this.ownerName = ownerName;
  }

  public ItemForListWorkflowsOutput source(String source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @Schema(description = "")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public ItemForListWorkflowsOutput sourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
    return this;
  }

   /**
   * Get sourceType
   * @return sourceType
  **/
  @Schema(description = "")
  public SourceTypeEnum getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }

  public ItemForListWorkflowsOutput status(StatusForListWorkflowsOutput status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Valid
  @Schema(description = "")
  public StatusForListWorkflowsOutput getStatus() {
    return status;
  }

  public void setStatus(StatusForListWorkflowsOutput status) {
    this.status = status;
  }

  public ItemForListWorkflowsOutput tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @Schema(description = "")
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public ItemForListWorkflowsOutput token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @Schema(description = "")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public ItemForListWorkflowsOutput updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemForListWorkflowsOutput itemForListWorkflowsOutput = (ItemForListWorkflowsOutput) o;
    return Objects.equals(this.createTime, itemForListWorkflowsOutput.createTime) &&
        Objects.equals(this.description, itemForListWorkflowsOutput.description) &&
        Objects.equals(this.graph, itemForListWorkflowsOutput.graph) &&
        Objects.equals(this.ID, itemForListWorkflowsOutput.ID) &&
        Objects.equals(this.inputs, itemForListWorkflowsOutput.inputs) &&
        Objects.equals(this.language, itemForListWorkflowsOutput.language) &&
        Objects.equals(this.mainWorkflowPath, itemForListWorkflowsOutput.mainWorkflowPath) &&
        Objects.equals(this.name, itemForListWorkflowsOutput.name) &&
        Objects.equals(this.outputs, itemForListWorkflowsOutput.outputs) &&
        Objects.equals(this.ownerName, itemForListWorkflowsOutput.ownerName) &&
        Objects.equals(this.source, itemForListWorkflowsOutput.source) &&
        Objects.equals(this.sourceType, itemForListWorkflowsOutput.sourceType) &&
        Objects.equals(this.status, itemForListWorkflowsOutput.status) &&
        Objects.equals(this.tag, itemForListWorkflowsOutput.tag) &&
        Objects.equals(this.token, itemForListWorkflowsOutput.token) &&
        Objects.equals(this.updateTime, itemForListWorkflowsOutput.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, graph, ID, inputs, language, mainWorkflowPath, name, outputs, ownerName, source, sourceType, status, tag, token, updateTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemForListWorkflowsOutput {\n");
    
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    graph: ").append(toIndentedString(graph)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    mainWorkflowPath: ").append(toIndentedString(mainWorkflowPath)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
