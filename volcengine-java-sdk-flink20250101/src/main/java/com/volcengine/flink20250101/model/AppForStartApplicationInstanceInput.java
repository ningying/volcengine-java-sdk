/*
 * flink20250101
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.flink20250101.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.flink20250101.model.DependencyForStartApplicationInstanceInput;
import com.volcengine.flink20250101.model.DeployRequestForStartApplicationInstanceInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * AppForStartApplicationInstanceInput
 */



public class AppForStartApplicationInstanceInput {
  @SerializedName("AccountId")
  private String accountId = null;

  @SerializedName("Args")
  private String args = null;

  @SerializedName("Conf")
  private String conf = null;

  @SerializedName("Dependency")
  private DependencyForStartApplicationInstanceInput dependency = null;

  @SerializedName("DeployRequest")
  private DeployRequestForStartApplicationInstanceInput deployRequest = null;

  /**
   * Gets or Sets engineVersion
   */
  @JsonAdapter(EngineVersionEnum.Adapter.class)
  public enum EngineVersionEnum {
    @SerializedName("FLINK_VERSION_1_11")
    FLINK_VERSION_1_11("FLINK_VERSION_1_11"),
    @SerializedName("FLINK_VERSION_1_16")
    FLINK_VERSION_1_16("FLINK_VERSION_1_16");

    private String value;

    EngineVersionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EngineVersionEnum fromValue(String input) {
      for (EngineVersionEnum b : EngineVersionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EngineVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EngineVersionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public EngineVersionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return EngineVersionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("EngineVersion")
  private EngineVersionEnum engineVersion = null;

  @SerializedName("Jar")
  private String jar = null;

  @SerializedName("JobName")
  private String jobName = null;

  /**
   * Gets or Sets jobType
   */
  @JsonAdapter(JobTypeEnum.Adapter.class)
  public enum JobTypeEnum {
    @SerializedName("FLINK_STREAMING_JAR")
    FLINK_STREAMING_JAR("FLINK_STREAMING_JAR"),
    @SerializedName("FLINK_STREAMING_SQL")
    FLINK_STREAMING_SQL("FLINK_STREAMING_SQL"),
    @SerializedName("FLINK_BATCH_SQL")
    FLINK_BATCH_SQL("FLINK_BATCH_SQL"),
    @SerializedName("FLINK_BATCH_JAR")
    FLINK_BATCH_JAR("FLINK_BATCH_JAR");

    private String value;

    JobTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static JobTypeEnum fromValue(String input) {
      for (JobTypeEnum b : JobTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<JobTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public JobTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return JobTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("JobType")
  private JobTypeEnum jobType = null;

  @SerializedName("MainClass")
  private String mainClass = null;

  @SerializedName("ProjectId")
  private String projectId = null;

  @SerializedName("SqlText")
  private String sqlText = null;

  @SerializedName("UniqueKey")
  private String uniqueKey = null;

  @SerializedName("UserId")
  private String userId = null;

  public AppForStartApplicationInstanceInput accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @Schema(description = "")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public AppForStartApplicationInstanceInput args(String args) {
    this.args = args;
    return this;
  }

   /**
   * Get args
   * @return args
  **/
  @Schema(description = "")
  public String getArgs() {
    return args;
  }

  public void setArgs(String args) {
    this.args = args;
  }

  public AppForStartApplicationInstanceInput conf(String conf) {
    this.conf = conf;
    return this;
  }

   /**
   * Get conf
   * @return conf
  **/
  @Schema(description = "")
  public String getConf() {
    return conf;
  }

  public void setConf(String conf) {
    this.conf = conf;
  }

  public AppForStartApplicationInstanceInput dependency(DependencyForStartApplicationInstanceInput dependency) {
    this.dependency = dependency;
    return this;
  }

   /**
   * Get dependency
   * @return dependency
  **/
  @Valid
  @Schema(description = "")
  public DependencyForStartApplicationInstanceInput getDependency() {
    return dependency;
  }

  public void setDependency(DependencyForStartApplicationInstanceInput dependency) {
    this.dependency = dependency;
  }

  public AppForStartApplicationInstanceInput deployRequest(DeployRequestForStartApplicationInstanceInput deployRequest) {
    this.deployRequest = deployRequest;
    return this;
  }

   /**
   * Get deployRequest
   * @return deployRequest
  **/
  @Valid
  @Schema(description = "")
  public DeployRequestForStartApplicationInstanceInput getDeployRequest() {
    return deployRequest;
  }

  public void setDeployRequest(DeployRequestForStartApplicationInstanceInput deployRequest) {
    this.deployRequest = deployRequest;
  }

  public AppForStartApplicationInstanceInput engineVersion(EngineVersionEnum engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

   /**
   * Get engineVersion
   * @return engineVersion
  **/
  @Schema(description = "")
  public EngineVersionEnum getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(EngineVersionEnum engineVersion) {
    this.engineVersion = engineVersion;
  }

  public AppForStartApplicationInstanceInput jar(String jar) {
    this.jar = jar;
    return this;
  }

   /**
   * Get jar
   * @return jar
  **/
  @Schema(description = "")
  public String getJar() {
    return jar;
  }

  public void setJar(String jar) {
    this.jar = jar;
  }

  public AppForStartApplicationInstanceInput jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

   /**
   * Get jobName
   * @return jobName
  **/
  @Schema(description = "")
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }

  public AppForStartApplicationInstanceInput jobType(JobTypeEnum jobType) {
    this.jobType = jobType;
    return this;
  }

   /**
   * Get jobType
   * @return jobType
  **/
  @Schema(description = "")
  public JobTypeEnum getJobType() {
    return jobType;
  }

  public void setJobType(JobTypeEnum jobType) {
    this.jobType = jobType;
  }

  public AppForStartApplicationInstanceInput mainClass(String mainClass) {
    this.mainClass = mainClass;
    return this;
  }

   /**
   * Get mainClass
   * @return mainClass
  **/
  @Schema(description = "")
  public String getMainClass() {
    return mainClass;
  }

  public void setMainClass(String mainClass) {
    this.mainClass = mainClass;
  }

  public AppForStartApplicationInstanceInput projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @Schema(description = "")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }

  public AppForStartApplicationInstanceInput sqlText(String sqlText) {
    this.sqlText = sqlText;
    return this;
  }

   /**
   * Get sqlText
   * @return sqlText
  **/
  @Schema(description = "")
  public String getSqlText() {
    return sqlText;
  }

  public void setSqlText(String sqlText) {
    this.sqlText = sqlText;
  }

  public AppForStartApplicationInstanceInput uniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
    return this;
  }

   /**
   * Get uniqueKey
   * @return uniqueKey
  **/
  @Schema(description = "")
  public String getUniqueKey() {
    return uniqueKey;
  }

  public void setUniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
  }

  public AppForStartApplicationInstanceInput userId(String userId) {
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @Schema(description = "")
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppForStartApplicationInstanceInput appForStartApplicationInstanceInput = (AppForStartApplicationInstanceInput) o;
    return Objects.equals(this.accountId, appForStartApplicationInstanceInput.accountId) &&
        Objects.equals(this.args, appForStartApplicationInstanceInput.args) &&
        Objects.equals(this.conf, appForStartApplicationInstanceInput.conf) &&
        Objects.equals(this.dependency, appForStartApplicationInstanceInput.dependency) &&
        Objects.equals(this.deployRequest, appForStartApplicationInstanceInput.deployRequest) &&
        Objects.equals(this.engineVersion, appForStartApplicationInstanceInput.engineVersion) &&
        Objects.equals(this.jar, appForStartApplicationInstanceInput.jar) &&
        Objects.equals(this.jobName, appForStartApplicationInstanceInput.jobName) &&
        Objects.equals(this.jobType, appForStartApplicationInstanceInput.jobType) &&
        Objects.equals(this.mainClass, appForStartApplicationInstanceInput.mainClass) &&
        Objects.equals(this.projectId, appForStartApplicationInstanceInput.projectId) &&
        Objects.equals(this.sqlText, appForStartApplicationInstanceInput.sqlText) &&
        Objects.equals(this.uniqueKey, appForStartApplicationInstanceInput.uniqueKey) &&
        Objects.equals(this.userId, appForStartApplicationInstanceInput.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, args, conf, dependency, deployRequest, engineVersion, jar, jobName, jobType, mainClass, projectId, sqlText, uniqueKey, userId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppForStartApplicationInstanceInput {\n");
    
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    conf: ").append(toIndentedString(conf)).append("\n");
    sb.append("    dependency: ").append(toIndentedString(dependency)).append("\n");
    sb.append("    deployRequest: ").append(toIndentedString(deployRequest)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    jar: ").append(toIndentedString(jar)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    mainClass: ").append(toIndentedString(mainClass)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    sqlText: ").append(toIndentedString(sqlText)).append("\n");
    sb.append("    uniqueKey: ").append(toIndentedString(uniqueKey)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
