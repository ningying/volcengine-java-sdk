/*
 * escloud
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.escloud.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * SubInstanceForDescribeInstancesOutput
 */



public class SubInstanceForDescribeInstancesOutput {
  @SerializedName("SubInstanceId")
  private String subInstanceId = null;

  /**
   * Gets or Sets subInstanceStatus
   */
  @JsonAdapter(SubInstanceStatusEnum.Adapter.class)
  public enum SubInstanceStatusEnum {
    @SerializedName("AVAILABLE")
    AVAILABLE("AVAILABLE"),
    @SerializedName("RELEASED")
    RELEASED("RELEASED");

    private String value;

    SubInstanceStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SubInstanceStatusEnum fromValue(String input) {
      for (SubInstanceStatusEnum b : SubInstanceStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SubInstanceStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubInstanceStatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SubInstanceStatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SubInstanceStatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("SubInstanceStatus")
  private SubInstanceStatusEnum subInstanceStatus = null;

  /**
   * Gets or Sets subInstanceType
   */
  @JsonAdapter(SubInstanceTypeEnum.Adapter.class)
  public enum SubInstanceTypeEnum {
    @SerializedName("Sql")
    SQL("Sql"),
    @SerializedName("Krypton")
    KRYPTON("Krypton");

    private String value;

    SubInstanceTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SubInstanceTypeEnum fromValue(String input) {
      for (SubInstanceTypeEnum b : SubInstanceTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SubInstanceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubInstanceTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SubInstanceTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SubInstanceTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("SubInstanceType")
  private SubInstanceTypeEnum subInstanceType = null;

  public SubInstanceForDescribeInstancesOutput subInstanceId(String subInstanceId) {
    this.subInstanceId = subInstanceId;
    return this;
  }

   /**
   * Get subInstanceId
   * @return subInstanceId
  **/
  @Schema(description = "")
  public String getSubInstanceId() {
    return subInstanceId;
  }

  public void setSubInstanceId(String subInstanceId) {
    this.subInstanceId = subInstanceId;
  }

  public SubInstanceForDescribeInstancesOutput subInstanceStatus(SubInstanceStatusEnum subInstanceStatus) {
    this.subInstanceStatus = subInstanceStatus;
    return this;
  }

   /**
   * Get subInstanceStatus
   * @return subInstanceStatus
  **/
  @Schema(description = "")
  public SubInstanceStatusEnum getSubInstanceStatus() {
    return subInstanceStatus;
  }

  public void setSubInstanceStatus(SubInstanceStatusEnum subInstanceStatus) {
    this.subInstanceStatus = subInstanceStatus;
  }

  public SubInstanceForDescribeInstancesOutput subInstanceType(SubInstanceTypeEnum subInstanceType) {
    this.subInstanceType = subInstanceType;
    return this;
  }

   /**
   * Get subInstanceType
   * @return subInstanceType
  **/
  @Schema(description = "")
  public SubInstanceTypeEnum getSubInstanceType() {
    return subInstanceType;
  }

  public void setSubInstanceType(SubInstanceTypeEnum subInstanceType) {
    this.subInstanceType = subInstanceType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubInstanceForDescribeInstancesOutput subInstanceForDescribeInstancesOutput = (SubInstanceForDescribeInstancesOutput) o;
    return Objects.equals(this.subInstanceId, subInstanceForDescribeInstancesOutput.subInstanceId) &&
        Objects.equals(this.subInstanceStatus, subInstanceForDescribeInstancesOutput.subInstanceStatus) &&
        Objects.equals(this.subInstanceType, subInstanceForDescribeInstancesOutput.subInstanceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subInstanceId, subInstanceStatus, subInstanceType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubInstanceForDescribeInstancesOutput {\n");
    
    sb.append("    subInstanceId: ").append(toIndentedString(subInstanceId)).append("\n");
    sb.append("    subInstanceStatus: ").append(toIndentedString(subInstanceStatus)).append("\n");
    sb.append("    subInstanceType: ").append(toIndentedString(subInstanceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
