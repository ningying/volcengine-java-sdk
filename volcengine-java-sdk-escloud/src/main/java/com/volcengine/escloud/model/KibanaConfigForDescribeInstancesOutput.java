/*
 * escloud
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.escloud.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * KibanaConfigForDescribeInstancesOutput
 */



public class KibanaConfigForDescribeInstancesOutput {
  @SerializedName("CookieTTL")
  private Long cookieTTL = null;

  @SerializedName("KibanaBasePath")
  private String kibanaBasePath = null;

  @SerializedName("RequestTimeout")
  private Long requestTimeout = null;

  @SerializedName("SessionKeepAlive")
  private Boolean sessionKeepAlive = null;

  @SerializedName("SessionTTL")
  private Long sessionTTL = null;

  public KibanaConfigForDescribeInstancesOutput cookieTTL(Long cookieTTL) {
    this.cookieTTL = cookieTTL;
    return this;
  }

   /**
   * Get cookieTTL
   * @return cookieTTL
  **/
  @Schema(description = "")
  public Long getCookieTTL() {
    return cookieTTL;
  }

  public void setCookieTTL(Long cookieTTL) {
    this.cookieTTL = cookieTTL;
  }

  public KibanaConfigForDescribeInstancesOutput kibanaBasePath(String kibanaBasePath) {
    this.kibanaBasePath = kibanaBasePath;
    return this;
  }

   /**
   * Get kibanaBasePath
   * @return kibanaBasePath
  **/
  @Schema(description = "")
  public String getKibanaBasePath() {
    return kibanaBasePath;
  }

  public void setKibanaBasePath(String kibanaBasePath) {
    this.kibanaBasePath = kibanaBasePath;
  }

  public KibanaConfigForDescribeInstancesOutput requestTimeout(Long requestTimeout) {
    this.requestTimeout = requestTimeout;
    return this;
  }

   /**
   * Get requestTimeout
   * minimum: 30000
   * maximum: 120000
   * @return requestTimeout
  **/
 @Min(30000) @Max(120000)  @Schema(description = "")
  public Long getRequestTimeout() {
    return requestTimeout;
  }

  public void setRequestTimeout(Long requestTimeout) {
    this.requestTimeout = requestTimeout;
  }

  public KibanaConfigForDescribeInstancesOutput sessionKeepAlive(Boolean sessionKeepAlive) {
    this.sessionKeepAlive = sessionKeepAlive;
    return this;
  }

   /**
   * Get sessionKeepAlive
   * @return sessionKeepAlive
  **/
  @Schema(description = "")
  public Boolean isSessionKeepAlive() {
    return sessionKeepAlive;
  }

  public void setSessionKeepAlive(Boolean sessionKeepAlive) {
    this.sessionKeepAlive = sessionKeepAlive;
  }

  public KibanaConfigForDescribeInstancesOutput sessionTTL(Long sessionTTL) {
    this.sessionTTL = sessionTTL;
    return this;
  }

   /**
   * Get sessionTTL
   * minimum: 30000
   * @return sessionTTL
  **/
 @Min(30000)  @Schema(description = "")
  public Long getSessionTTL() {
    return sessionTTL;
  }

  public void setSessionTTL(Long sessionTTL) {
    this.sessionTTL = sessionTTL;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KibanaConfigForDescribeInstancesOutput kibanaConfigForDescribeInstancesOutput = (KibanaConfigForDescribeInstancesOutput) o;
    return Objects.equals(this.cookieTTL, kibanaConfigForDescribeInstancesOutput.cookieTTL) &&
        Objects.equals(this.kibanaBasePath, kibanaConfigForDescribeInstancesOutput.kibanaBasePath) &&
        Objects.equals(this.requestTimeout, kibanaConfigForDescribeInstancesOutput.requestTimeout) &&
        Objects.equals(this.sessionKeepAlive, kibanaConfigForDescribeInstancesOutput.sessionKeepAlive) &&
        Objects.equals(this.sessionTTL, kibanaConfigForDescribeInstancesOutput.sessionTTL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cookieTTL, kibanaBasePath, requestTimeout, sessionKeepAlive, sessionTTL);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KibanaConfigForDescribeInstancesOutput {\n");
    
    sb.append("    cookieTTL: ").append(toIndentedString(cookieTTL)).append("\n");
    sb.append("    kibanaBasePath: ").append(toIndentedString(kibanaBasePath)).append("\n");
    sb.append("    requestTimeout: ").append(toIndentedString(requestTimeout)).append("\n");
    sb.append("    sessionKeepAlive: ").append(toIndentedString(sessionKeepAlive)).append("\n");
    sb.append("    sessionTTL: ").append(toIndentedString(sessionTTL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
