/*
 * cr
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.cr.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.cr.model.ChartAttributeForListTagsOutput;
import com.volcengine.cr.model.ImageAttributeForListTagsOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ItemForListTagsOutput
 */



public class ItemForListTagsOutput {
  @SerializedName("ChartAttribute")
  private ChartAttributeForListTagsOutput chartAttribute = null;

  @SerializedName("Digest")
  private String digest = null;

  @SerializedName("ImageAttributes")
  private List<ImageAttributeForListTagsOutput> imageAttributes = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("PushTime")
  private String pushTime = null;

  @SerializedName("Size")
  private Long size = null;

  @SerializedName("Type")
  private String type = null;

  public ItemForListTagsOutput chartAttribute(ChartAttributeForListTagsOutput chartAttribute) {
    this.chartAttribute = chartAttribute;
    return this;
  }

   /**
   * Get chartAttribute
   * @return chartAttribute
  **/
  @Valid
  @Schema(description = "")
  public ChartAttributeForListTagsOutput getChartAttribute() {
    return chartAttribute;
  }

  public void setChartAttribute(ChartAttributeForListTagsOutput chartAttribute) {
    this.chartAttribute = chartAttribute;
  }

  public ItemForListTagsOutput digest(String digest) {
    this.digest = digest;
    return this;
  }

   /**
   * Get digest
   * @return digest
  **/
  @Schema(description = "")
  public String getDigest() {
    return digest;
  }

  public void setDigest(String digest) {
    this.digest = digest;
  }

  public ItemForListTagsOutput imageAttributes(List<ImageAttributeForListTagsOutput> imageAttributes) {
    this.imageAttributes = imageAttributes;
    return this;
  }

  public ItemForListTagsOutput addImageAttributesItem(ImageAttributeForListTagsOutput imageAttributesItem) {
    if (this.imageAttributes == null) {
      this.imageAttributes = new ArrayList<ImageAttributeForListTagsOutput>();
    }
    this.imageAttributes.add(imageAttributesItem);
    return this;
  }

   /**
   * Get imageAttributes
   * @return imageAttributes
  **/
  @Valid
  @Schema(description = "")
  public List<ImageAttributeForListTagsOutput> getImageAttributes() {
    return imageAttributes;
  }

  public void setImageAttributes(List<ImageAttributeForListTagsOutput> imageAttributes) {
    this.imageAttributes = imageAttributes;
  }

  public ItemForListTagsOutput name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ItemForListTagsOutput pushTime(String pushTime) {
    this.pushTime = pushTime;
    return this;
  }

   /**
   * Get pushTime
   * @return pushTime
  **/
  @Schema(description = "")
  public String getPushTime() {
    return pushTime;
  }

  public void setPushTime(String pushTime) {
    this.pushTime = pushTime;
  }

  public ItemForListTagsOutput size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @Schema(description = "")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public ItemForListTagsOutput type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemForListTagsOutput itemForListTagsOutput = (ItemForListTagsOutput) o;
    return Objects.equals(this.chartAttribute, itemForListTagsOutput.chartAttribute) &&
        Objects.equals(this.digest, itemForListTagsOutput.digest) &&
        Objects.equals(this.imageAttributes, itemForListTagsOutput.imageAttributes) &&
        Objects.equals(this.name, itemForListTagsOutput.name) &&
        Objects.equals(this.pushTime, itemForListTagsOutput.pushTime) &&
        Objects.equals(this.size, itemForListTagsOutput.size) &&
        Objects.equals(this.type, itemForListTagsOutput.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chartAttribute, digest, imageAttributes, name, pushTime, size, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemForListTagsOutput {\n");
    
    sb.append("    chartAttribute: ").append(toIndentedString(chartAttribute)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    imageAttributes: ").append(toIndentedString(imageAttributes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pushTime: ").append(toIndentedString(pushTime)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
