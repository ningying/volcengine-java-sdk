/*
 * cr
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.cr.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * FilterForListNamespacesInput
 */



public class FilterForListNamespacesInput {
  @SerializedName("InProject")
  private Boolean inProject = null;

  @SerializedName("Names")
  private List<String> names = null;

  @SerializedName("Projects")
  private List<String> projects = null;

  public FilterForListNamespacesInput inProject(Boolean inProject) {
    this.inProject = inProject;
    return this;
  }

   /**
   * Get inProject
   * @return inProject
  **/
  @Schema(description = "")
  public Boolean isInProject() {
    return inProject;
  }

  public void setInProject(Boolean inProject) {
    this.inProject = inProject;
  }

  public FilterForListNamespacesInput names(List<String> names) {
    this.names = names;
    return this;
  }

  public FilterForListNamespacesInput addNamesItem(String namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<String>();
    }
    this.names.add(namesItem);
    return this;
  }

   /**
   * Get names
   * @return names
  **/
  @Schema(description = "")
  public List<String> getNames() {
    return names;
  }

  public void setNames(List<String> names) {
    this.names = names;
  }

  public FilterForListNamespacesInput projects(List<String> projects) {
    this.projects = projects;
    return this;
  }

  public FilterForListNamespacesInput addProjectsItem(String projectsItem) {
    if (this.projects == null) {
      this.projects = new ArrayList<String>();
    }
    this.projects.add(projectsItem);
    return this;
  }

   /**
   * Get projects
   * @return projects
  **/
  @Schema(description = "")
  public List<String> getProjects() {
    return projects;
  }

  public void setProjects(List<String> projects) {
    this.projects = projects;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterForListNamespacesInput filterForListNamespacesInput = (FilterForListNamespacesInput) o;
    return Objects.equals(this.inProject, filterForListNamespacesInput.inProject) &&
        Objects.equals(this.names, filterForListNamespacesInput.names) &&
        Objects.equals(this.projects, filterForListNamespacesInput.projects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inProject, names, projects);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterForListNamespacesInput {\n");
    
    sb.append("    inProject: ").append(toIndentedString(inProject)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
