/*
 * emr
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.emr.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.emr.model.DataDiskForListNodeGroupsOutput;
import com.volcengine.emr.model.SystemDiskForListNodeGroupsOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ItemForListNodeGroupsOutput
 */



public class ItemForListNodeGroupsOutput {
  @SerializedName("ChargeType")
  private String chargeType = null;

  @SerializedName("CreateTime")
  private Long createTime = null;

  @SerializedName("DataDisks")
  private List<DataDiskForListNodeGroupsOutput> dataDisks = null;

  @SerializedName("EcsInstanceTypes")
  private List<String> ecsInstanceTypes = null;

  @SerializedName("LayoutComponentNames")
  private List<String> layoutComponentNames = null;

  @SerializedName("NodeGroupId")
  private String nodeGroupId = null;

  @SerializedName("NodeGroupName")
  private String nodeGroupName = null;

  @SerializedName("NodeGroupState")
  private String nodeGroupState = null;

  @SerializedName("NodeGroupType")
  private String nodeGroupType = null;

  @SerializedName("SubnetIds")
  private List<String> subnetIds = null;

  @SerializedName("SystemDisk")
  private SystemDiskForListNodeGroupsOutput systemDisk = null;

  @SerializedName("TerminateTime")
  private String terminateTime = null;

  @SerializedName("WithPublicIp")
  private String withPublicIp = null;

  @SerializedName("ZoneId")
  private String zoneId = null;

  public ItemForListNodeGroupsOutput chargeType(String chargeType) {
    this.chargeType = chargeType;
    return this;
  }

   /**
   * Get chargeType
   * @return chargeType
  **/
  @Schema(description = "")
  public String getChargeType() {
    return chargeType;
  }

  public void setChargeType(String chargeType) {
    this.chargeType = chargeType;
  }

  public ItemForListNodeGroupsOutput createTime(Long createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @Schema(description = "")
  public Long getCreateTime() {
    return createTime;
  }

  public void setCreateTime(Long createTime) {
    this.createTime = createTime;
  }

  public ItemForListNodeGroupsOutput dataDisks(List<DataDiskForListNodeGroupsOutput> dataDisks) {
    this.dataDisks = dataDisks;
    return this;
  }

  public ItemForListNodeGroupsOutput addDataDisksItem(DataDiskForListNodeGroupsOutput dataDisksItem) {
    if (this.dataDisks == null) {
      this.dataDisks = new ArrayList<DataDiskForListNodeGroupsOutput>();
    }
    this.dataDisks.add(dataDisksItem);
    return this;
  }

   /**
   * Get dataDisks
   * @return dataDisks
  **/
  @Valid
  @Schema(description = "")
  public List<DataDiskForListNodeGroupsOutput> getDataDisks() {
    return dataDisks;
  }

  public void setDataDisks(List<DataDiskForListNodeGroupsOutput> dataDisks) {
    this.dataDisks = dataDisks;
  }

  public ItemForListNodeGroupsOutput ecsInstanceTypes(List<String> ecsInstanceTypes) {
    this.ecsInstanceTypes = ecsInstanceTypes;
    return this;
  }

  public ItemForListNodeGroupsOutput addEcsInstanceTypesItem(String ecsInstanceTypesItem) {
    if (this.ecsInstanceTypes == null) {
      this.ecsInstanceTypes = new ArrayList<String>();
    }
    this.ecsInstanceTypes.add(ecsInstanceTypesItem);
    return this;
  }

   /**
   * Get ecsInstanceTypes
   * @return ecsInstanceTypes
  **/
  @Schema(description = "")
  public List<String> getEcsInstanceTypes() {
    return ecsInstanceTypes;
  }

  public void setEcsInstanceTypes(List<String> ecsInstanceTypes) {
    this.ecsInstanceTypes = ecsInstanceTypes;
  }

  public ItemForListNodeGroupsOutput layoutComponentNames(List<String> layoutComponentNames) {
    this.layoutComponentNames = layoutComponentNames;
    return this;
  }

  public ItemForListNodeGroupsOutput addLayoutComponentNamesItem(String layoutComponentNamesItem) {
    if (this.layoutComponentNames == null) {
      this.layoutComponentNames = new ArrayList<String>();
    }
    this.layoutComponentNames.add(layoutComponentNamesItem);
    return this;
  }

   /**
   * Get layoutComponentNames
   * @return layoutComponentNames
  **/
  @Schema(description = "")
  public List<String> getLayoutComponentNames() {
    return layoutComponentNames;
  }

  public void setLayoutComponentNames(List<String> layoutComponentNames) {
    this.layoutComponentNames = layoutComponentNames;
  }

  public ItemForListNodeGroupsOutput nodeGroupId(String nodeGroupId) {
    this.nodeGroupId = nodeGroupId;
    return this;
  }

   /**
   * Get nodeGroupId
   * @return nodeGroupId
  **/
  @Schema(description = "")
  public String getNodeGroupId() {
    return nodeGroupId;
  }

  public void setNodeGroupId(String nodeGroupId) {
    this.nodeGroupId = nodeGroupId;
  }

  public ItemForListNodeGroupsOutput nodeGroupName(String nodeGroupName) {
    this.nodeGroupName = nodeGroupName;
    return this;
  }

   /**
   * Get nodeGroupName
   * @return nodeGroupName
  **/
  @Schema(description = "")
  public String getNodeGroupName() {
    return nodeGroupName;
  }

  public void setNodeGroupName(String nodeGroupName) {
    this.nodeGroupName = nodeGroupName;
  }

  public ItemForListNodeGroupsOutput nodeGroupState(String nodeGroupState) {
    this.nodeGroupState = nodeGroupState;
    return this;
  }

   /**
   * Get nodeGroupState
   * @return nodeGroupState
  **/
  @Schema(description = "")
  public String getNodeGroupState() {
    return nodeGroupState;
  }

  public void setNodeGroupState(String nodeGroupState) {
    this.nodeGroupState = nodeGroupState;
  }

  public ItemForListNodeGroupsOutput nodeGroupType(String nodeGroupType) {
    this.nodeGroupType = nodeGroupType;
    return this;
  }

   /**
   * Get nodeGroupType
   * @return nodeGroupType
  **/
  @Schema(description = "")
  public String getNodeGroupType() {
    return nodeGroupType;
  }

  public void setNodeGroupType(String nodeGroupType) {
    this.nodeGroupType = nodeGroupType;
  }

  public ItemForListNodeGroupsOutput subnetIds(List<String> subnetIds) {
    this.subnetIds = subnetIds;
    return this;
  }

  public ItemForListNodeGroupsOutput addSubnetIdsItem(String subnetIdsItem) {
    if (this.subnetIds == null) {
      this.subnetIds = new ArrayList<String>();
    }
    this.subnetIds.add(subnetIdsItem);
    return this;
  }

   /**
   * Get subnetIds
   * @return subnetIds
  **/
  @Schema(description = "")
  public List<String> getSubnetIds() {
    return subnetIds;
  }

  public void setSubnetIds(List<String> subnetIds) {
    this.subnetIds = subnetIds;
  }

  public ItemForListNodeGroupsOutput systemDisk(SystemDiskForListNodeGroupsOutput systemDisk) {
    this.systemDisk = systemDisk;
    return this;
  }

   /**
   * Get systemDisk
   * @return systemDisk
  **/
  @Valid
  @Schema(description = "")
  public SystemDiskForListNodeGroupsOutput getSystemDisk() {
    return systemDisk;
  }

  public void setSystemDisk(SystemDiskForListNodeGroupsOutput systemDisk) {
    this.systemDisk = systemDisk;
  }

  public ItemForListNodeGroupsOutput terminateTime(String terminateTime) {
    this.terminateTime = terminateTime;
    return this;
  }

   /**
   * Get terminateTime
   * @return terminateTime
  **/
  @Schema(description = "")
  public String getTerminateTime() {
    return terminateTime;
  }

  public void setTerminateTime(String terminateTime) {
    this.terminateTime = terminateTime;
  }

  public ItemForListNodeGroupsOutput withPublicIp(String withPublicIp) {
    this.withPublicIp = withPublicIp;
    return this;
  }

   /**
   * Get withPublicIp
   * @return withPublicIp
  **/
  @Schema(description = "")
  public String getWithPublicIp() {
    return withPublicIp;
  }

  public void setWithPublicIp(String withPublicIp) {
    this.withPublicIp = withPublicIp;
  }

  public ItemForListNodeGroupsOutput zoneId(String zoneId) {
    this.zoneId = zoneId;
    return this;
  }

   /**
   * Get zoneId
   * @return zoneId
  **/
  @Schema(description = "")
  public String getZoneId() {
    return zoneId;
  }

  public void setZoneId(String zoneId) {
    this.zoneId = zoneId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemForListNodeGroupsOutput itemForListNodeGroupsOutput = (ItemForListNodeGroupsOutput) o;
    return Objects.equals(this.chargeType, itemForListNodeGroupsOutput.chargeType) &&
        Objects.equals(this.createTime, itemForListNodeGroupsOutput.createTime) &&
        Objects.equals(this.dataDisks, itemForListNodeGroupsOutput.dataDisks) &&
        Objects.equals(this.ecsInstanceTypes, itemForListNodeGroupsOutput.ecsInstanceTypes) &&
        Objects.equals(this.layoutComponentNames, itemForListNodeGroupsOutput.layoutComponentNames) &&
        Objects.equals(this.nodeGroupId, itemForListNodeGroupsOutput.nodeGroupId) &&
        Objects.equals(this.nodeGroupName, itemForListNodeGroupsOutput.nodeGroupName) &&
        Objects.equals(this.nodeGroupState, itemForListNodeGroupsOutput.nodeGroupState) &&
        Objects.equals(this.nodeGroupType, itemForListNodeGroupsOutput.nodeGroupType) &&
        Objects.equals(this.subnetIds, itemForListNodeGroupsOutput.subnetIds) &&
        Objects.equals(this.systemDisk, itemForListNodeGroupsOutput.systemDisk) &&
        Objects.equals(this.terminateTime, itemForListNodeGroupsOutput.terminateTime) &&
        Objects.equals(this.withPublicIp, itemForListNodeGroupsOutput.withPublicIp) &&
        Objects.equals(this.zoneId, itemForListNodeGroupsOutput.zoneId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargeType, createTime, dataDisks, ecsInstanceTypes, layoutComponentNames, nodeGroupId, nodeGroupName, nodeGroupState, nodeGroupType, subnetIds, systemDisk, terminateTime, withPublicIp, zoneId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemForListNodeGroupsOutput {\n");
    
    sb.append("    chargeType: ").append(toIndentedString(chargeType)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    dataDisks: ").append(toIndentedString(dataDisks)).append("\n");
    sb.append("    ecsInstanceTypes: ").append(toIndentedString(ecsInstanceTypes)).append("\n");
    sb.append("    layoutComponentNames: ").append(toIndentedString(layoutComponentNames)).append("\n");
    sb.append("    nodeGroupId: ").append(toIndentedString(nodeGroupId)).append("\n");
    sb.append("    nodeGroupName: ").append(toIndentedString(nodeGroupName)).append("\n");
    sb.append("    nodeGroupState: ").append(toIndentedString(nodeGroupState)).append("\n");
    sb.append("    nodeGroupType: ").append(toIndentedString(nodeGroupType)).append("\n");
    sb.append("    subnetIds: ").append(toIndentedString(subnetIds)).append("\n");
    sb.append("    systemDisk: ").append(toIndentedString(systemDisk)).append("\n");
    sb.append("    terminateTime: ").append(toIndentedString(terminateTime)).append("\n");
    sb.append("    withPublicIp: ").append(toIndentedString(withPublicIp)).append("\n");
    sb.append("    zoneId: ").append(toIndentedString(zoneId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
