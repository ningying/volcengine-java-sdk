/*
 * emr
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.emr.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.emr.model.DataDiskForCreateClusterInput;
import com.volcengine.emr.model.SystemDiskForCreateClusterInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * NodeGroupAttributeForCreateClusterInput
 */



public class NodeGroupAttributeForCreateClusterInput {
  @SerializedName("Bandwidth")
  private Integer bandwidth = null;

  /**
   * Gets or Sets chargeType
   */
  @JsonAdapter(ChargeTypeEnum.Adapter.class)
  public enum ChargeTypeEnum {
    @SerializedName("PRE")
    PRE("PRE"),
    @SerializedName("POST")
    POST("POST");

    private String value;

    ChargeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ChargeTypeEnum fromValue(String input) {
      for (ChargeTypeEnum b : ChargeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ChargeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargeTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ChargeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ChargeTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ChargeType")
  private ChargeTypeEnum chargeType = null;

  @SerializedName("DataDisks")
  private List<DataDiskForCreateClusterInput> dataDisks = null;

  @SerializedName("EcsInstanceTypes")
  private List<String> ecsInstanceTypes = null;

  @SerializedName("EcsKeyPairName")
  private String ecsKeyPairName = null;

  @SerializedName("EcsPassword")
  private String ecsPassword = null;

  @SerializedName("NodeCount")
  private Integer nodeCount = null;

  @SerializedName("NodeGroupName")
  private String nodeGroupName = null;

  /**
   * Gets or Sets nodeGroupType
   */
  @JsonAdapter(NodeGroupTypeEnum.Adapter.class)
  public enum NodeGroupTypeEnum {
    @SerializedName("MASTER")
    MASTER("MASTER"),
    @SerializedName("CORE")
    CORE("CORE"),
    @SerializedName("TASK")
    TASK("TASK");

    private String value;

    NodeGroupTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static NodeGroupTypeEnum fromValue(String input) {
      for (NodeGroupTypeEnum b : NodeGroupTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<NodeGroupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NodeGroupTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public NodeGroupTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return NodeGroupTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("NodeGroupType")
  private NodeGroupTypeEnum nodeGroupType = null;

  @SerializedName("SubnetIds")
  private List<String> subnetIds = null;

  @SerializedName("SystemDisk")
  private SystemDiskForCreateClusterInput systemDisk = null;

  @SerializedName("WithPublicIp")
  private Boolean withPublicIp = null;

  @SerializedName("ZoneId")
  private String zoneId = null;

  public NodeGroupAttributeForCreateClusterInput bandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

   /**
   * Get bandwidth
   * @return bandwidth
  **/
  @Schema(description = "")
  public Integer getBandwidth() {
    return bandwidth;
  }

  public void setBandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
  }

  public NodeGroupAttributeForCreateClusterInput chargeType(ChargeTypeEnum chargeType) {
    this.chargeType = chargeType;
    return this;
  }

   /**
   * Get chargeType
   * @return chargeType
  **/
  @Schema(description = "")
  public ChargeTypeEnum getChargeType() {
    return chargeType;
  }

  public void setChargeType(ChargeTypeEnum chargeType) {
    this.chargeType = chargeType;
  }

  public NodeGroupAttributeForCreateClusterInput dataDisks(List<DataDiskForCreateClusterInput> dataDisks) {
    this.dataDisks = dataDisks;
    return this;
  }

  public NodeGroupAttributeForCreateClusterInput addDataDisksItem(DataDiskForCreateClusterInput dataDisksItem) {
    if (this.dataDisks == null) {
      this.dataDisks = new ArrayList<DataDiskForCreateClusterInput>();
    }
    this.dataDisks.add(dataDisksItem);
    return this;
  }

   /**
   * Get dataDisks
   * @return dataDisks
  **/
  @Valid
  @Schema(description = "")
  public List<DataDiskForCreateClusterInput> getDataDisks() {
    return dataDisks;
  }

  public void setDataDisks(List<DataDiskForCreateClusterInput> dataDisks) {
    this.dataDisks = dataDisks;
  }

  public NodeGroupAttributeForCreateClusterInput ecsInstanceTypes(List<String> ecsInstanceTypes) {
    this.ecsInstanceTypes = ecsInstanceTypes;
    return this;
  }

  public NodeGroupAttributeForCreateClusterInput addEcsInstanceTypesItem(String ecsInstanceTypesItem) {
    if (this.ecsInstanceTypes == null) {
      this.ecsInstanceTypes = new ArrayList<String>();
    }
    this.ecsInstanceTypes.add(ecsInstanceTypesItem);
    return this;
  }

   /**
   * Get ecsInstanceTypes
   * @return ecsInstanceTypes
  **/
  @Schema(description = "")
  public List<String> getEcsInstanceTypes() {
    return ecsInstanceTypes;
  }

  public void setEcsInstanceTypes(List<String> ecsInstanceTypes) {
    this.ecsInstanceTypes = ecsInstanceTypes;
  }

  public NodeGroupAttributeForCreateClusterInput ecsKeyPairName(String ecsKeyPairName) {
    this.ecsKeyPairName = ecsKeyPairName;
    return this;
  }

   /**
   * Get ecsKeyPairName
   * @return ecsKeyPairName
  **/
  @Schema(description = "")
  public String getEcsKeyPairName() {
    return ecsKeyPairName;
  }

  public void setEcsKeyPairName(String ecsKeyPairName) {
    this.ecsKeyPairName = ecsKeyPairName;
  }

  public NodeGroupAttributeForCreateClusterInput ecsPassword(String ecsPassword) {
    this.ecsPassword = ecsPassword;
    return this;
  }

   /**
   * Get ecsPassword
   * @return ecsPassword
  **/
  @Schema(description = "")
  public String getEcsPassword() {
    return ecsPassword;
  }

  public void setEcsPassword(String ecsPassword) {
    this.ecsPassword = ecsPassword;
  }

  public NodeGroupAttributeForCreateClusterInput nodeCount(Integer nodeCount) {
    this.nodeCount = nodeCount;
    return this;
  }

   /**
   * Get nodeCount
   * @return nodeCount
  **/
  @Schema(description = "")
  public Integer getNodeCount() {
    return nodeCount;
  }

  public void setNodeCount(Integer nodeCount) {
    this.nodeCount = nodeCount;
  }

  public NodeGroupAttributeForCreateClusterInput nodeGroupName(String nodeGroupName) {
    this.nodeGroupName = nodeGroupName;
    return this;
  }

   /**
   * Get nodeGroupName
   * @return nodeGroupName
  **/
  @Schema(description = "")
  public String getNodeGroupName() {
    return nodeGroupName;
  }

  public void setNodeGroupName(String nodeGroupName) {
    this.nodeGroupName = nodeGroupName;
  }

  public NodeGroupAttributeForCreateClusterInput nodeGroupType(NodeGroupTypeEnum nodeGroupType) {
    this.nodeGroupType = nodeGroupType;
    return this;
  }

   /**
   * Get nodeGroupType
   * @return nodeGroupType
  **/
  @Schema(description = "")
  public NodeGroupTypeEnum getNodeGroupType() {
    return nodeGroupType;
  }

  public void setNodeGroupType(NodeGroupTypeEnum nodeGroupType) {
    this.nodeGroupType = nodeGroupType;
  }

  public NodeGroupAttributeForCreateClusterInput subnetIds(List<String> subnetIds) {
    this.subnetIds = subnetIds;
    return this;
  }

  public NodeGroupAttributeForCreateClusterInput addSubnetIdsItem(String subnetIdsItem) {
    if (this.subnetIds == null) {
      this.subnetIds = new ArrayList<String>();
    }
    this.subnetIds.add(subnetIdsItem);
    return this;
  }

   /**
   * Get subnetIds
   * @return subnetIds
  **/
  @Schema(description = "")
  public List<String> getSubnetIds() {
    return subnetIds;
  }

  public void setSubnetIds(List<String> subnetIds) {
    this.subnetIds = subnetIds;
  }

  public NodeGroupAttributeForCreateClusterInput systemDisk(SystemDiskForCreateClusterInput systemDisk) {
    this.systemDisk = systemDisk;
    return this;
  }

   /**
   * Get systemDisk
   * @return systemDisk
  **/
  @Valid
  @Schema(description = "")
  public SystemDiskForCreateClusterInput getSystemDisk() {
    return systemDisk;
  }

  public void setSystemDisk(SystemDiskForCreateClusterInput systemDisk) {
    this.systemDisk = systemDisk;
  }

  public NodeGroupAttributeForCreateClusterInput withPublicIp(Boolean withPublicIp) {
    this.withPublicIp = withPublicIp;
    return this;
  }

   /**
   * Get withPublicIp
   * @return withPublicIp
  **/
  @Schema(description = "")
  public Boolean isWithPublicIp() {
    return withPublicIp;
  }

  public void setWithPublicIp(Boolean withPublicIp) {
    this.withPublicIp = withPublicIp;
  }

  public NodeGroupAttributeForCreateClusterInput zoneId(String zoneId) {
    this.zoneId = zoneId;
    return this;
  }

   /**
   * Get zoneId
   * @return zoneId
  **/
  @Schema(description = "")
  public String getZoneId() {
    return zoneId;
  }

  public void setZoneId(String zoneId) {
    this.zoneId = zoneId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeGroupAttributeForCreateClusterInput nodeGroupAttributeForCreateClusterInput = (NodeGroupAttributeForCreateClusterInput) o;
    return Objects.equals(this.bandwidth, nodeGroupAttributeForCreateClusterInput.bandwidth) &&
        Objects.equals(this.chargeType, nodeGroupAttributeForCreateClusterInput.chargeType) &&
        Objects.equals(this.dataDisks, nodeGroupAttributeForCreateClusterInput.dataDisks) &&
        Objects.equals(this.ecsInstanceTypes, nodeGroupAttributeForCreateClusterInput.ecsInstanceTypes) &&
        Objects.equals(this.ecsKeyPairName, nodeGroupAttributeForCreateClusterInput.ecsKeyPairName) &&
        Objects.equals(this.ecsPassword, nodeGroupAttributeForCreateClusterInput.ecsPassword) &&
        Objects.equals(this.nodeCount, nodeGroupAttributeForCreateClusterInput.nodeCount) &&
        Objects.equals(this.nodeGroupName, nodeGroupAttributeForCreateClusterInput.nodeGroupName) &&
        Objects.equals(this.nodeGroupType, nodeGroupAttributeForCreateClusterInput.nodeGroupType) &&
        Objects.equals(this.subnetIds, nodeGroupAttributeForCreateClusterInput.subnetIds) &&
        Objects.equals(this.systemDisk, nodeGroupAttributeForCreateClusterInput.systemDisk) &&
        Objects.equals(this.withPublicIp, nodeGroupAttributeForCreateClusterInput.withPublicIp) &&
        Objects.equals(this.zoneId, nodeGroupAttributeForCreateClusterInput.zoneId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidth, chargeType, dataDisks, ecsInstanceTypes, ecsKeyPairName, ecsPassword, nodeCount, nodeGroupName, nodeGroupType, subnetIds, systemDisk, withPublicIp, zoneId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeGroupAttributeForCreateClusterInput {\n");
    
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    chargeType: ").append(toIndentedString(chargeType)).append("\n");
    sb.append("    dataDisks: ").append(toIndentedString(dataDisks)).append("\n");
    sb.append("    ecsInstanceTypes: ").append(toIndentedString(ecsInstanceTypes)).append("\n");
    sb.append("    ecsKeyPairName: ").append(toIndentedString(ecsKeyPairName)).append("\n");
    sb.append("    ecsPassword: ").append(toIndentedString(ecsPassword)).append("\n");
    sb.append("    nodeCount: ").append(toIndentedString(nodeCount)).append("\n");
    sb.append("    nodeGroupName: ").append(toIndentedString(nodeGroupName)).append("\n");
    sb.append("    nodeGroupType: ").append(toIndentedString(nodeGroupType)).append("\n");
    sb.append("    subnetIds: ").append(toIndentedString(subnetIds)).append("\n");
    sb.append("    systemDisk: ").append(toIndentedString(systemDisk)).append("\n");
    sb.append("    withPublicIp: ").append(toIndentedString(withPublicIp)).append("\n");
    sb.append("    zoneId: ").append(toIndentedString(zoneId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
