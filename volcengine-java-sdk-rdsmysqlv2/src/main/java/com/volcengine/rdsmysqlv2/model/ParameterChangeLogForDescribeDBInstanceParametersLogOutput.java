/*
 * rds_mysql_v2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.rdsmysqlv2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ParameterChangeLogForDescribeDBInstanceParametersLogOutput
 */



public class ParameterChangeLogForDescribeDBInstanceParametersLogOutput {
  @SerializedName("CustomNodeIds")
  private List<String> customNodeIds = null;

  @SerializedName("ModifyTime")
  private String modifyTime = null;

  @SerializedName("NewParameterValue")
  private String newParameterValue = null;

  @SerializedName("OldParameterValue")
  private String oldParameterValue = null;

  /**
   * Gets or Sets paramApplyScope
   */
  @JsonAdapter(ParamApplyScopeEnum.Adapter.class)
  public enum ParamApplyScopeEnum {
    @SerializedName("AllNode")
    ALLNODE("AllNode"),
    @SerializedName("OnlyMasterSlaveNode")
    ONLYMASTERSLAVENODE("OnlyMasterSlaveNode"),
    @SerializedName("OnlyReadOnlyNode")
    ONLYREADONLYNODE("OnlyReadOnlyNode"),
    @SerializedName("CustomNode")
    CUSTOMNODE("CustomNode");

    private String value;

    ParamApplyScopeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ParamApplyScopeEnum fromValue(String input) {
      for (ParamApplyScopeEnum b : ParamApplyScopeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ParamApplyScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParamApplyScopeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ParamApplyScopeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ParamApplyScopeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ParamApplyScope")
  private ParamApplyScopeEnum paramApplyScope = null;

  @SerializedName("ParameterName")
  private String parameterName = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("Applied")
    APPLIED("Applied"),
    @SerializedName("Invalid")
    INVALID("Invalid"),
    @SerializedName("Syncing")
    SYNCING("Syncing");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Status")
  private StatusEnum status = null;

  public ParameterChangeLogForDescribeDBInstanceParametersLogOutput customNodeIds(List<String> customNodeIds) {
    this.customNodeIds = customNodeIds;
    return this;
  }

  public ParameterChangeLogForDescribeDBInstanceParametersLogOutput addCustomNodeIdsItem(String customNodeIdsItem) {
    if (this.customNodeIds == null) {
      this.customNodeIds = new ArrayList<String>();
    }
    this.customNodeIds.add(customNodeIdsItem);
    return this;
  }

   /**
   * Get customNodeIds
   * @return customNodeIds
  **/
  @Schema(description = "")
  public List<String> getCustomNodeIds() {
    return customNodeIds;
  }

  public void setCustomNodeIds(List<String> customNodeIds) {
    this.customNodeIds = customNodeIds;
  }

  public ParameterChangeLogForDescribeDBInstanceParametersLogOutput modifyTime(String modifyTime) {
    this.modifyTime = modifyTime;
    return this;
  }

   /**
   * Get modifyTime
   * @return modifyTime
  **/
  @Schema(description = "")
  public String getModifyTime() {
    return modifyTime;
  }

  public void setModifyTime(String modifyTime) {
    this.modifyTime = modifyTime;
  }

  public ParameterChangeLogForDescribeDBInstanceParametersLogOutput newParameterValue(String newParameterValue) {
    this.newParameterValue = newParameterValue;
    return this;
  }

   /**
   * Get newParameterValue
   * @return newParameterValue
  **/
  @Schema(description = "")
  public String getNewParameterValue() {
    return newParameterValue;
  }

  public void setNewParameterValue(String newParameterValue) {
    this.newParameterValue = newParameterValue;
  }

  public ParameterChangeLogForDescribeDBInstanceParametersLogOutput oldParameterValue(String oldParameterValue) {
    this.oldParameterValue = oldParameterValue;
    return this;
  }

   /**
   * Get oldParameterValue
   * @return oldParameterValue
  **/
  @Schema(description = "")
  public String getOldParameterValue() {
    return oldParameterValue;
  }

  public void setOldParameterValue(String oldParameterValue) {
    this.oldParameterValue = oldParameterValue;
  }

  public ParameterChangeLogForDescribeDBInstanceParametersLogOutput paramApplyScope(ParamApplyScopeEnum paramApplyScope) {
    this.paramApplyScope = paramApplyScope;
    return this;
  }

   /**
   * Get paramApplyScope
   * @return paramApplyScope
  **/
  @Schema(description = "")
  public ParamApplyScopeEnum getParamApplyScope() {
    return paramApplyScope;
  }

  public void setParamApplyScope(ParamApplyScopeEnum paramApplyScope) {
    this.paramApplyScope = paramApplyScope;
  }

  public ParameterChangeLogForDescribeDBInstanceParametersLogOutput parameterName(String parameterName) {
    this.parameterName = parameterName;
    return this;
  }

   /**
   * Get parameterName
   * @return parameterName
  **/
  @Schema(description = "")
  public String getParameterName() {
    return parameterName;
  }

  public void setParameterName(String parameterName) {
    this.parameterName = parameterName;
  }

  public ParameterChangeLogForDescribeDBInstanceParametersLogOutput status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParameterChangeLogForDescribeDBInstanceParametersLogOutput parameterChangeLogForDescribeDBInstanceParametersLogOutput = (ParameterChangeLogForDescribeDBInstanceParametersLogOutput) o;
    return Objects.equals(this.customNodeIds, parameterChangeLogForDescribeDBInstanceParametersLogOutput.customNodeIds) &&
        Objects.equals(this.modifyTime, parameterChangeLogForDescribeDBInstanceParametersLogOutput.modifyTime) &&
        Objects.equals(this.newParameterValue, parameterChangeLogForDescribeDBInstanceParametersLogOutput.newParameterValue) &&
        Objects.equals(this.oldParameterValue, parameterChangeLogForDescribeDBInstanceParametersLogOutput.oldParameterValue) &&
        Objects.equals(this.paramApplyScope, parameterChangeLogForDescribeDBInstanceParametersLogOutput.paramApplyScope) &&
        Objects.equals(this.parameterName, parameterChangeLogForDescribeDBInstanceParametersLogOutput.parameterName) &&
        Objects.equals(this.status, parameterChangeLogForDescribeDBInstanceParametersLogOutput.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customNodeIds, modifyTime, newParameterValue, oldParameterValue, paramApplyScope, parameterName, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParameterChangeLogForDescribeDBInstanceParametersLogOutput {\n");
    
    sb.append("    customNodeIds: ").append(toIndentedString(customNodeIds)).append("\n");
    sb.append("    modifyTime: ").append(toIndentedString(modifyTime)).append("\n");
    sb.append("    newParameterValue: ").append(toIndentedString(newParameterValue)).append("\n");
    sb.append("    oldParameterValue: ").append(toIndentedString(oldParameterValue)).append("\n");
    sb.append("    paramApplyScope: ").append(toIndentedString(paramApplyScope)).append("\n");
    sb.append("    parameterName: ").append(toIndentedString(parameterName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
