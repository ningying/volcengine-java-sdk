/*
 * rds_mysql_v2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.rdsmysqlv2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.rdsmysqlv2.model.DiagnosticsItemForDescribeDiagnosticsInfosOutput;
import com.volcengine.rdsmysqlv2.model.EcsInfoForDescribeDiagnosticsInfosOutput;
import com.volcengine.rdsmysqlv2.model.EndpointInfoForDescribeDiagnosticsInfosOutput;
import com.volcengine.rdsmysqlv2.model.PublicAddressInfoForDescribeDiagnosticsInfosOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DiagnosticsInfoForDescribeDiagnosticsInfosOutput
 */



public class DiagnosticsInfoForDescribeDiagnosticsInfosOutput {
  @SerializedName("DiagnosticsItems")
  private List<DiagnosticsItemForDescribeDiagnosticsInfosOutput> diagnosticsItems = null;

  @SerializedName("DiagnosticsRecordId")
  private String diagnosticsRecordId = null;

  @SerializedName("DiagnosticsResult")
  private String diagnosticsResult = null;

  @SerializedName("EcsInfo")
  private EcsInfoForDescribeDiagnosticsInfosOutput ecsInfo = null;

  @SerializedName("EndpointInfo")
  private EndpointInfoForDescribeDiagnosticsInfosOutput endpointInfo = null;

  @SerializedName("InstanceId")
  private String instanceId = null;

  @SerializedName("PublicAddressInfo")
  private PublicAddressInfoForDescribeDiagnosticsInfosOutput publicAddressInfo = null;

  public DiagnosticsInfoForDescribeDiagnosticsInfosOutput diagnosticsItems(List<DiagnosticsItemForDescribeDiagnosticsInfosOutput> diagnosticsItems) {
    this.diagnosticsItems = diagnosticsItems;
    return this;
  }

  public DiagnosticsInfoForDescribeDiagnosticsInfosOutput addDiagnosticsItemsItem(DiagnosticsItemForDescribeDiagnosticsInfosOutput diagnosticsItemsItem) {
    if (this.diagnosticsItems == null) {
      this.diagnosticsItems = new ArrayList<DiagnosticsItemForDescribeDiagnosticsInfosOutput>();
    }
    this.diagnosticsItems.add(diagnosticsItemsItem);
    return this;
  }

   /**
   * Get diagnosticsItems
   * @return diagnosticsItems
  **/
  @Valid
  @Schema(description = "")
  public List<DiagnosticsItemForDescribeDiagnosticsInfosOutput> getDiagnosticsItems() {
    return diagnosticsItems;
  }

  public void setDiagnosticsItems(List<DiagnosticsItemForDescribeDiagnosticsInfosOutput> diagnosticsItems) {
    this.diagnosticsItems = diagnosticsItems;
  }

  public DiagnosticsInfoForDescribeDiagnosticsInfosOutput diagnosticsRecordId(String diagnosticsRecordId) {
    this.diagnosticsRecordId = diagnosticsRecordId;
    return this;
  }

   /**
   * Get diagnosticsRecordId
   * @return diagnosticsRecordId
  **/
  @Schema(description = "")
  public String getDiagnosticsRecordId() {
    return diagnosticsRecordId;
  }

  public void setDiagnosticsRecordId(String diagnosticsRecordId) {
    this.diagnosticsRecordId = diagnosticsRecordId;
  }

  public DiagnosticsInfoForDescribeDiagnosticsInfosOutput diagnosticsResult(String diagnosticsResult) {
    this.diagnosticsResult = diagnosticsResult;
    return this;
  }

   /**
   * Get diagnosticsResult
   * @return diagnosticsResult
  **/
  @Schema(description = "")
  public String getDiagnosticsResult() {
    return diagnosticsResult;
  }

  public void setDiagnosticsResult(String diagnosticsResult) {
    this.diagnosticsResult = diagnosticsResult;
  }

  public DiagnosticsInfoForDescribeDiagnosticsInfosOutput ecsInfo(EcsInfoForDescribeDiagnosticsInfosOutput ecsInfo) {
    this.ecsInfo = ecsInfo;
    return this;
  }

   /**
   * Get ecsInfo
   * @return ecsInfo
  **/
  @Valid
  @Schema(description = "")
  public EcsInfoForDescribeDiagnosticsInfosOutput getEcsInfo() {
    return ecsInfo;
  }

  public void setEcsInfo(EcsInfoForDescribeDiagnosticsInfosOutput ecsInfo) {
    this.ecsInfo = ecsInfo;
  }

  public DiagnosticsInfoForDescribeDiagnosticsInfosOutput endpointInfo(EndpointInfoForDescribeDiagnosticsInfosOutput endpointInfo) {
    this.endpointInfo = endpointInfo;
    return this;
  }

   /**
   * Get endpointInfo
   * @return endpointInfo
  **/
  @Valid
  @Schema(description = "")
  public EndpointInfoForDescribeDiagnosticsInfosOutput getEndpointInfo() {
    return endpointInfo;
  }

  public void setEndpointInfo(EndpointInfoForDescribeDiagnosticsInfosOutput endpointInfo) {
    this.endpointInfo = endpointInfo;
  }

  public DiagnosticsInfoForDescribeDiagnosticsInfosOutput instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Get instanceId
   * @return instanceId
  **/
  @Schema(description = "")
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }

  public DiagnosticsInfoForDescribeDiagnosticsInfosOutput publicAddressInfo(PublicAddressInfoForDescribeDiagnosticsInfosOutput publicAddressInfo) {
    this.publicAddressInfo = publicAddressInfo;
    return this;
  }

   /**
   * Get publicAddressInfo
   * @return publicAddressInfo
  **/
  @Valid
  @Schema(description = "")
  public PublicAddressInfoForDescribeDiagnosticsInfosOutput getPublicAddressInfo() {
    return publicAddressInfo;
  }

  public void setPublicAddressInfo(PublicAddressInfoForDescribeDiagnosticsInfosOutput publicAddressInfo) {
    this.publicAddressInfo = publicAddressInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnosticsInfoForDescribeDiagnosticsInfosOutput diagnosticsInfoForDescribeDiagnosticsInfosOutput = (DiagnosticsInfoForDescribeDiagnosticsInfosOutput) o;
    return Objects.equals(this.diagnosticsItems, diagnosticsInfoForDescribeDiagnosticsInfosOutput.diagnosticsItems) &&
        Objects.equals(this.diagnosticsRecordId, diagnosticsInfoForDescribeDiagnosticsInfosOutput.diagnosticsRecordId) &&
        Objects.equals(this.diagnosticsResult, diagnosticsInfoForDescribeDiagnosticsInfosOutput.diagnosticsResult) &&
        Objects.equals(this.ecsInfo, diagnosticsInfoForDescribeDiagnosticsInfosOutput.ecsInfo) &&
        Objects.equals(this.endpointInfo, diagnosticsInfoForDescribeDiagnosticsInfosOutput.endpointInfo) &&
        Objects.equals(this.instanceId, diagnosticsInfoForDescribeDiagnosticsInfosOutput.instanceId) &&
        Objects.equals(this.publicAddressInfo, diagnosticsInfoForDescribeDiagnosticsInfosOutput.publicAddressInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diagnosticsItems, diagnosticsRecordId, diagnosticsResult, ecsInfo, endpointInfo, instanceId, publicAddressInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnosticsInfoForDescribeDiagnosticsInfosOutput {\n");
    
    sb.append("    diagnosticsItems: ").append(toIndentedString(diagnosticsItems)).append("\n");
    sb.append("    diagnosticsRecordId: ").append(toIndentedString(diagnosticsRecordId)).append("\n");
    sb.append("    diagnosticsResult: ").append(toIndentedString(diagnosticsResult)).append("\n");
    sb.append("    ecsInfo: ").append(toIndentedString(ecsInfo)).append("\n");
    sb.append("    endpointInfo: ").append(toIndentedString(endpointInfo)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    publicAddressInfo: ").append(toIndentedString(publicAddressInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
