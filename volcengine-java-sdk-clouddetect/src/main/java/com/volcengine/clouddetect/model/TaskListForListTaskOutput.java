/*
 * cloud_detect
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.clouddetect.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.clouddetect.model.LabelForListTaskOutput;
import com.volcengine.clouddetect.model.PeriodConfigForListTaskOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * TaskListForListTaskOutput
 */



public class TaskListForListTaskOutput {
  @SerializedName("Address")
  private String address = null;

  @SerializedName("CreateTime")
  private Long createTime = null;

  @SerializedName("EnableShuffle")
  private Boolean enableShuffle = null;

  @SerializedName("FinishTime")
  private Long finishTime = null;

  @SerializedName("HTTPMethod")
  private Integer htTPMethod = null;

  @SerializedName("ID")
  private Long ID = null;

  @SerializedName("IntervalSeconds")
  private Integer intervalSeconds = null;

  @SerializedName("Labels")
  private List<LabelForListTaskOutput> labels = null;

  @SerializedName("LineIDList")
  private List<Long> lineIDList = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("Owner")
  private String owner = null;

  @SerializedName("PeriodConfig")
  private PeriodConfigForListTaskOutput periodConfig = null;

  @SerializedName("RunnerIDList")
  private List<Long> runnerIDList = null;

  @SerializedName("Status")
  private Integer status = null;

  @SerializedName("SubTaskType")
  private Integer subTaskType = null;

  @SerializedName("TaskGroupID")
  private Long taskGroupID = null;

  @SerializedName("TaskGroupName")
  private String taskGroupName = null;

  @SerializedName("TaskType")
  private Integer taskType = null;

  @SerializedName("UpdateTime")
  private Long updateTime = null;

  public TaskListForListTaskOutput address(String address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @Schema(description = "")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public TaskListForListTaskOutput createTime(Long createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @Schema(description = "")
  public Long getCreateTime() {
    return createTime;
  }

  public void setCreateTime(Long createTime) {
    this.createTime = createTime;
  }

  public TaskListForListTaskOutput enableShuffle(Boolean enableShuffle) {
    this.enableShuffle = enableShuffle;
    return this;
  }

   /**
   * Get enableShuffle
   * @return enableShuffle
  **/
  @Schema(description = "")
  public Boolean isEnableShuffle() {
    return enableShuffle;
  }

  public void setEnableShuffle(Boolean enableShuffle) {
    this.enableShuffle = enableShuffle;
  }

  public TaskListForListTaskOutput finishTime(Long finishTime) {
    this.finishTime = finishTime;
    return this;
  }

   /**
   * Get finishTime
   * @return finishTime
  **/
  @Schema(description = "")
  public Long getFinishTime() {
    return finishTime;
  }

  public void setFinishTime(Long finishTime) {
    this.finishTime = finishTime;
  }

  public TaskListForListTaskOutput htTPMethod(Integer htTPMethod) {
    this.htTPMethod = htTPMethod;
    return this;
  }

   /**
   * Get htTPMethod
   * @return htTPMethod
  **/
  @Schema(description = "")
  public Integer getHtTPMethod() {
    return htTPMethod;
  }

  public void setHtTPMethod(Integer htTPMethod) {
    this.htTPMethod = htTPMethod;
  }

  public TaskListForListTaskOutput ID(Long ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @Schema(description = "")
  public Long getID() {
    return ID;
  }

  public void setID(Long ID) {
    this.ID = ID;
  }

  public TaskListForListTaskOutput intervalSeconds(Integer intervalSeconds) {
    this.intervalSeconds = intervalSeconds;
    return this;
  }

   /**
   * Get intervalSeconds
   * @return intervalSeconds
  **/
  @Schema(description = "")
  public Integer getIntervalSeconds() {
    return intervalSeconds;
  }

  public void setIntervalSeconds(Integer intervalSeconds) {
    this.intervalSeconds = intervalSeconds;
  }

  public TaskListForListTaskOutput labels(List<LabelForListTaskOutput> labels) {
    this.labels = labels;
    return this;
  }

  public TaskListForListTaskOutput addLabelsItem(LabelForListTaskOutput labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<LabelForListTaskOutput>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @Valid
  @Schema(description = "")
  public List<LabelForListTaskOutput> getLabels() {
    return labels;
  }

  public void setLabels(List<LabelForListTaskOutput> labels) {
    this.labels = labels;
  }

  public TaskListForListTaskOutput lineIDList(List<Long> lineIDList) {
    this.lineIDList = lineIDList;
    return this;
  }

  public TaskListForListTaskOutput addLineIDListItem(Long lineIDListItem) {
    if (this.lineIDList == null) {
      this.lineIDList = new ArrayList<Long>();
    }
    this.lineIDList.add(lineIDListItem);
    return this;
  }

   /**
   * Get lineIDList
   * @return lineIDList
  **/
  @Schema(description = "")
  public List<Long> getLineIDList() {
    return lineIDList;
  }

  public void setLineIDList(List<Long> lineIDList) {
    this.lineIDList = lineIDList;
  }

  public TaskListForListTaskOutput name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TaskListForListTaskOutput owner(String owner) {
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @Schema(description = "")
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }

  public TaskListForListTaskOutput periodConfig(PeriodConfigForListTaskOutput periodConfig) {
    this.periodConfig = periodConfig;
    return this;
  }

   /**
   * Get periodConfig
   * @return periodConfig
  **/
  @Valid
  @Schema(description = "")
  public PeriodConfigForListTaskOutput getPeriodConfig() {
    return periodConfig;
  }

  public void setPeriodConfig(PeriodConfigForListTaskOutput periodConfig) {
    this.periodConfig = periodConfig;
  }

  public TaskListForListTaskOutput runnerIDList(List<Long> runnerIDList) {
    this.runnerIDList = runnerIDList;
    return this;
  }

  public TaskListForListTaskOutput addRunnerIDListItem(Long runnerIDListItem) {
    if (this.runnerIDList == null) {
      this.runnerIDList = new ArrayList<Long>();
    }
    this.runnerIDList.add(runnerIDListItem);
    return this;
  }

   /**
   * Get runnerIDList
   * @return runnerIDList
  **/
  @Schema(description = "")
  public List<Long> getRunnerIDList() {
    return runnerIDList;
  }

  public void setRunnerIDList(List<Long> runnerIDList) {
    this.runnerIDList = runnerIDList;
  }

  public TaskListForListTaskOutput status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  public TaskListForListTaskOutput subTaskType(Integer subTaskType) {
    this.subTaskType = subTaskType;
    return this;
  }

   /**
   * Get subTaskType
   * @return subTaskType
  **/
  @Schema(description = "")
  public Integer getSubTaskType() {
    return subTaskType;
  }

  public void setSubTaskType(Integer subTaskType) {
    this.subTaskType = subTaskType;
  }

  public TaskListForListTaskOutput taskGroupID(Long taskGroupID) {
    this.taskGroupID = taskGroupID;
    return this;
  }

   /**
   * Get taskGroupID
   * @return taskGroupID
  **/
  @Schema(description = "")
  public Long getTaskGroupID() {
    return taskGroupID;
  }

  public void setTaskGroupID(Long taskGroupID) {
    this.taskGroupID = taskGroupID;
  }

  public TaskListForListTaskOutput taskGroupName(String taskGroupName) {
    this.taskGroupName = taskGroupName;
    return this;
  }

   /**
   * Get taskGroupName
   * @return taskGroupName
  **/
  @Schema(description = "")
  public String getTaskGroupName() {
    return taskGroupName;
  }

  public void setTaskGroupName(String taskGroupName) {
    this.taskGroupName = taskGroupName;
  }

  public TaskListForListTaskOutput taskType(Integer taskType) {
    this.taskType = taskType;
    return this;
  }

   /**
   * Get taskType
   * @return taskType
  **/
  @Schema(description = "")
  public Integer getTaskType() {
    return taskType;
  }

  public void setTaskType(Integer taskType) {
    this.taskType = taskType;
  }

  public TaskListForListTaskOutput updateTime(Long updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public Long getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(Long updateTime) {
    this.updateTime = updateTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskListForListTaskOutput taskListForListTaskOutput = (TaskListForListTaskOutput) o;
    return Objects.equals(this.address, taskListForListTaskOutput.address) &&
        Objects.equals(this.createTime, taskListForListTaskOutput.createTime) &&
        Objects.equals(this.enableShuffle, taskListForListTaskOutput.enableShuffle) &&
        Objects.equals(this.finishTime, taskListForListTaskOutput.finishTime) &&
        Objects.equals(this.htTPMethod, taskListForListTaskOutput.htTPMethod) &&
        Objects.equals(this.ID, taskListForListTaskOutput.ID) &&
        Objects.equals(this.intervalSeconds, taskListForListTaskOutput.intervalSeconds) &&
        Objects.equals(this.labels, taskListForListTaskOutput.labels) &&
        Objects.equals(this.lineIDList, taskListForListTaskOutput.lineIDList) &&
        Objects.equals(this.name, taskListForListTaskOutput.name) &&
        Objects.equals(this.owner, taskListForListTaskOutput.owner) &&
        Objects.equals(this.periodConfig, taskListForListTaskOutput.periodConfig) &&
        Objects.equals(this.runnerIDList, taskListForListTaskOutput.runnerIDList) &&
        Objects.equals(this.status, taskListForListTaskOutput.status) &&
        Objects.equals(this.subTaskType, taskListForListTaskOutput.subTaskType) &&
        Objects.equals(this.taskGroupID, taskListForListTaskOutput.taskGroupID) &&
        Objects.equals(this.taskGroupName, taskListForListTaskOutput.taskGroupName) &&
        Objects.equals(this.taskType, taskListForListTaskOutput.taskType) &&
        Objects.equals(this.updateTime, taskListForListTaskOutput.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, createTime, enableShuffle, finishTime, htTPMethod, ID, intervalSeconds, labels, lineIDList, name, owner, periodConfig, runnerIDList, status, subTaskType, taskGroupID, taskGroupName, taskType, updateTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskListForListTaskOutput {\n");
    
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    enableShuffle: ").append(toIndentedString(enableShuffle)).append("\n");
    sb.append("    finishTime: ").append(toIndentedString(finishTime)).append("\n");
    sb.append("    htTPMethod: ").append(toIndentedString(htTPMethod)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    intervalSeconds: ").append(toIndentedString(intervalSeconds)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lineIDList: ").append(toIndentedString(lineIDList)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    periodConfig: ").append(toIndentedString(periodConfig)).append("\n");
    sb.append("    runnerIDList: ").append(toIndentedString(runnerIDList)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subTaskType: ").append(toIndentedString(subTaskType)).append("\n");
    sb.append("    taskGroupID: ").append(toIndentedString(taskGroupID)).append("\n");
    sb.append("    taskGroupName: ").append(toIndentedString(taskGroupName)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
