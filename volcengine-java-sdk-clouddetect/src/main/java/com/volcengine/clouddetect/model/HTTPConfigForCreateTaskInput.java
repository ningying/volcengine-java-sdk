/*
 * cloud_detect
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.clouddetect.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.clouddetect.model.CustomHostConfigForCreateTaskInput;
import com.volcengine.clouddetect.model.HTTPHeaderForCreateTaskInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * HTTPConfigForCreateTaskInput
 */



public class HTTPConfigForCreateTaskInput {
  @SerializedName("BodyType")
  private Integer bodyType = null;

  @SerializedName("CustomHostConfig")
  private CustomHostConfigForCreateTaskInput customHostConfig = null;

  @SerializedName("DNSServer")
  private String dnSServer = null;

  @SerializedName("DNSType")
  private String dnSType = null;

  @SerializedName("HTTPHeaders")
  private List<HTTPHeaderForCreateTaskInput> htTPHeaders = null;

  @SerializedName("HTTPMethod")
  private Integer htTPMethod = null;

  @SerializedName("HTTPVersion")
  private String htTPVersion = null;

  @SerializedName("IgnoreCertificate")
  private Boolean ignoreCertificate = null;

  @SerializedName("MaxBodySize")
  private Long maxBodySize = null;

  @SerializedName("ProxyURL")
  private String proxyURL = null;

  @SerializedName("Redirect")
  private Boolean redirect = null;

  @SerializedName("RequestBody")
  private String requestBody = null;

  @SerializedName("Timeout")
  private Integer timeout = null;

  public HTTPConfigForCreateTaskInput bodyType(Integer bodyType) {
    this.bodyType = bodyType;
    return this;
  }

   /**
   * Get bodyType
   * @return bodyType
  **/
  @Schema(description = "")
  public Integer getBodyType() {
    return bodyType;
  }

  public void setBodyType(Integer bodyType) {
    this.bodyType = bodyType;
  }

  public HTTPConfigForCreateTaskInput customHostConfig(CustomHostConfigForCreateTaskInput customHostConfig) {
    this.customHostConfig = customHostConfig;
    return this;
  }

   /**
   * Get customHostConfig
   * @return customHostConfig
  **/
  @Valid
  @Schema(description = "")
  public CustomHostConfigForCreateTaskInput getCustomHostConfig() {
    return customHostConfig;
  }

  public void setCustomHostConfig(CustomHostConfigForCreateTaskInput customHostConfig) {
    this.customHostConfig = customHostConfig;
  }

  public HTTPConfigForCreateTaskInput dnSServer(String dnSServer) {
    this.dnSServer = dnSServer;
    return this;
  }

   /**
   * Get dnSServer
   * @return dnSServer
  **/
  @Schema(description = "")
  public String getDnSServer() {
    return dnSServer;
  }

  public void setDnSServer(String dnSServer) {
    this.dnSServer = dnSServer;
  }

  public HTTPConfigForCreateTaskInput dnSType(String dnSType) {
    this.dnSType = dnSType;
    return this;
  }

   /**
   * Get dnSType
   * @return dnSType
  **/
  @Schema(description = "")
  public String getDnSType() {
    return dnSType;
  }

  public void setDnSType(String dnSType) {
    this.dnSType = dnSType;
  }

  public HTTPConfigForCreateTaskInput htTPHeaders(List<HTTPHeaderForCreateTaskInput> htTPHeaders) {
    this.htTPHeaders = htTPHeaders;
    return this;
  }

  public HTTPConfigForCreateTaskInput addHtTPHeadersItem(HTTPHeaderForCreateTaskInput htTPHeadersItem) {
    if (this.htTPHeaders == null) {
      this.htTPHeaders = new ArrayList<HTTPHeaderForCreateTaskInput>();
    }
    this.htTPHeaders.add(htTPHeadersItem);
    return this;
  }

   /**
   * Get htTPHeaders
   * @return htTPHeaders
  **/
  @Valid
  @Schema(description = "")
  public List<HTTPHeaderForCreateTaskInput> getHtTPHeaders() {
    return htTPHeaders;
  }

  public void setHtTPHeaders(List<HTTPHeaderForCreateTaskInput> htTPHeaders) {
    this.htTPHeaders = htTPHeaders;
  }

  public HTTPConfigForCreateTaskInput htTPMethod(Integer htTPMethod) {
    this.htTPMethod = htTPMethod;
    return this;
  }

   /**
   * Get htTPMethod
   * @return htTPMethod
  **/
  @Schema(description = "")
  public Integer getHtTPMethod() {
    return htTPMethod;
  }

  public void setHtTPMethod(Integer htTPMethod) {
    this.htTPMethod = htTPMethod;
  }

  public HTTPConfigForCreateTaskInput htTPVersion(String htTPVersion) {
    this.htTPVersion = htTPVersion;
    return this;
  }

   /**
   * Get htTPVersion
   * @return htTPVersion
  **/
  @Schema(description = "")
  public String getHtTPVersion() {
    return htTPVersion;
  }

  public void setHtTPVersion(String htTPVersion) {
    this.htTPVersion = htTPVersion;
  }

  public HTTPConfigForCreateTaskInput ignoreCertificate(Boolean ignoreCertificate) {
    this.ignoreCertificate = ignoreCertificate;
    return this;
  }

   /**
   * Get ignoreCertificate
   * @return ignoreCertificate
  **/
  @Schema(description = "")
  public Boolean isIgnoreCertificate() {
    return ignoreCertificate;
  }

  public void setIgnoreCertificate(Boolean ignoreCertificate) {
    this.ignoreCertificate = ignoreCertificate;
  }

  public HTTPConfigForCreateTaskInput maxBodySize(Long maxBodySize) {
    this.maxBodySize = maxBodySize;
    return this;
  }

   /**
   * Get maxBodySize
   * @return maxBodySize
  **/
  @Schema(description = "")
  public Long getMaxBodySize() {
    return maxBodySize;
  }

  public void setMaxBodySize(Long maxBodySize) {
    this.maxBodySize = maxBodySize;
  }

  public HTTPConfigForCreateTaskInput proxyURL(String proxyURL) {
    this.proxyURL = proxyURL;
    return this;
  }

   /**
   * Get proxyURL
   * @return proxyURL
  **/
  @Schema(description = "")
  public String getProxyURL() {
    return proxyURL;
  }

  public void setProxyURL(String proxyURL) {
    this.proxyURL = proxyURL;
  }

  public HTTPConfigForCreateTaskInput redirect(Boolean redirect) {
    this.redirect = redirect;
    return this;
  }

   /**
   * Get redirect
   * @return redirect
  **/
  @Schema(description = "")
  public Boolean isRedirect() {
    return redirect;
  }

  public void setRedirect(Boolean redirect) {
    this.redirect = redirect;
  }

  public HTTPConfigForCreateTaskInput requestBody(String requestBody) {
    this.requestBody = requestBody;
    return this;
  }

   /**
   * Get requestBody
   * @return requestBody
  **/
  @Schema(description = "")
  public String getRequestBody() {
    return requestBody;
  }

  public void setRequestBody(String requestBody) {
    this.requestBody = requestBody;
  }

  public HTTPConfigForCreateTaskInput timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * Get timeout
   * @return timeout
  **/
  @Schema(description = "")
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HTTPConfigForCreateTaskInput htTPConfigForCreateTaskInput = (HTTPConfigForCreateTaskInput) o;
    return Objects.equals(this.bodyType, htTPConfigForCreateTaskInput.bodyType) &&
        Objects.equals(this.customHostConfig, htTPConfigForCreateTaskInput.customHostConfig) &&
        Objects.equals(this.dnSServer, htTPConfigForCreateTaskInput.dnSServer) &&
        Objects.equals(this.dnSType, htTPConfigForCreateTaskInput.dnSType) &&
        Objects.equals(this.htTPHeaders, htTPConfigForCreateTaskInput.htTPHeaders) &&
        Objects.equals(this.htTPMethod, htTPConfigForCreateTaskInput.htTPMethod) &&
        Objects.equals(this.htTPVersion, htTPConfigForCreateTaskInput.htTPVersion) &&
        Objects.equals(this.ignoreCertificate, htTPConfigForCreateTaskInput.ignoreCertificate) &&
        Objects.equals(this.maxBodySize, htTPConfigForCreateTaskInput.maxBodySize) &&
        Objects.equals(this.proxyURL, htTPConfigForCreateTaskInput.proxyURL) &&
        Objects.equals(this.redirect, htTPConfigForCreateTaskInput.redirect) &&
        Objects.equals(this.requestBody, htTPConfigForCreateTaskInput.requestBody) &&
        Objects.equals(this.timeout, htTPConfigForCreateTaskInput.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bodyType, customHostConfig, dnSServer, dnSType, htTPHeaders, htTPMethod, htTPVersion, ignoreCertificate, maxBodySize, proxyURL, redirect, requestBody, timeout);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HTTPConfigForCreateTaskInput {\n");
    
    sb.append("    bodyType: ").append(toIndentedString(bodyType)).append("\n");
    sb.append("    customHostConfig: ").append(toIndentedString(customHostConfig)).append("\n");
    sb.append("    dnSServer: ").append(toIndentedString(dnSServer)).append("\n");
    sb.append("    dnSType: ").append(toIndentedString(dnSType)).append("\n");
    sb.append("    htTPHeaders: ").append(toIndentedString(htTPHeaders)).append("\n");
    sb.append("    htTPMethod: ").append(toIndentedString(htTPMethod)).append("\n");
    sb.append("    htTPVersion: ").append(toIndentedString(htTPVersion)).append("\n");
    sb.append("    ignoreCertificate: ").append(toIndentedString(ignoreCertificate)).append("\n");
    sb.append("    maxBodySize: ").append(toIndentedString(maxBodySize)).append("\n");
    sb.append("    proxyURL: ").append(toIndentedString(proxyURL)).append("\n");
    sb.append("    redirect: ").append(toIndentedString(redirect)).append("\n");
    sb.append("    requestBody: ").append(toIndentedString(requestBody)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
