/*
 * translate20250301
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.translate20250301.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.translate20250301.model.PointForTranslateImageOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * TextBlockForTranslateImageOutput
 */



public class TextBlockForTranslateImageOutput {
  @SerializedName("BackColor")
  private List<Integer> backColor = null;

  @SerializedName("DetectedLanguage")
  private String detectedLanguage = null;

  @SerializedName("ForeColor")
  private List<Integer> foreColor = null;

  @SerializedName("Points")
  private List<PointForTranslateImageOutput> points = null;

  @SerializedName("Text")
  private String text = null;

  @SerializedName("Translation")
  private String translation = null;

  public TextBlockForTranslateImageOutput backColor(List<Integer> backColor) {
    this.backColor = backColor;
    return this;
  }

  public TextBlockForTranslateImageOutput addBackColorItem(Integer backColorItem) {
    if (this.backColor == null) {
      this.backColor = new ArrayList<Integer>();
    }
    this.backColor.add(backColorItem);
    return this;
  }

   /**
   * Get backColor
   * @return backColor
  **/
  @Schema(description = "")
  public List<Integer> getBackColor() {
    return backColor;
  }

  public void setBackColor(List<Integer> backColor) {
    this.backColor = backColor;
  }

  public TextBlockForTranslateImageOutput detectedLanguage(String detectedLanguage) {
    this.detectedLanguage = detectedLanguage;
    return this;
  }

   /**
   * Get detectedLanguage
   * @return detectedLanguage
  **/
  @Schema(description = "")
  public String getDetectedLanguage() {
    return detectedLanguage;
  }

  public void setDetectedLanguage(String detectedLanguage) {
    this.detectedLanguage = detectedLanguage;
  }

  public TextBlockForTranslateImageOutput foreColor(List<Integer> foreColor) {
    this.foreColor = foreColor;
    return this;
  }

  public TextBlockForTranslateImageOutput addForeColorItem(Integer foreColorItem) {
    if (this.foreColor == null) {
      this.foreColor = new ArrayList<Integer>();
    }
    this.foreColor.add(foreColorItem);
    return this;
  }

   /**
   * Get foreColor
   * @return foreColor
  **/
  @Schema(description = "")
  public List<Integer> getForeColor() {
    return foreColor;
  }

  public void setForeColor(List<Integer> foreColor) {
    this.foreColor = foreColor;
  }

  public TextBlockForTranslateImageOutput points(List<PointForTranslateImageOutput> points) {
    this.points = points;
    return this;
  }

  public TextBlockForTranslateImageOutput addPointsItem(PointForTranslateImageOutput pointsItem) {
    if (this.points == null) {
      this.points = new ArrayList<PointForTranslateImageOutput>();
    }
    this.points.add(pointsItem);
    return this;
  }

   /**
   * Get points
   * @return points
  **/
  @Valid
  @Schema(description = "")
  public List<PointForTranslateImageOutput> getPoints() {
    return points;
  }

  public void setPoints(List<PointForTranslateImageOutput> points) {
    this.points = points;
  }

  public TextBlockForTranslateImageOutput text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @Schema(description = "")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public TextBlockForTranslateImageOutput translation(String translation) {
    this.translation = translation;
    return this;
  }

   /**
   * Get translation
   * @return translation
  **/
  @Schema(description = "")
  public String getTranslation() {
    return translation;
  }

  public void setTranslation(String translation) {
    this.translation = translation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextBlockForTranslateImageOutput textBlockForTranslateImageOutput = (TextBlockForTranslateImageOutput) o;
    return Objects.equals(this.backColor, textBlockForTranslateImageOutput.backColor) &&
        Objects.equals(this.detectedLanguage, textBlockForTranslateImageOutput.detectedLanguage) &&
        Objects.equals(this.foreColor, textBlockForTranslateImageOutput.foreColor) &&
        Objects.equals(this.points, textBlockForTranslateImageOutput.points) &&
        Objects.equals(this.text, textBlockForTranslateImageOutput.text) &&
        Objects.equals(this.translation, textBlockForTranslateImageOutput.translation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backColor, detectedLanguage, foreColor, points, text, translation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextBlockForTranslateImageOutput {\n");
    
    sb.append("    backColor: ").append(toIndentedString(backColor)).append("\n");
    sb.append("    detectedLanguage: ").append(toIndentedString(detectedLanguage)).append("\n");
    sb.append("    foreColor: ").append(toIndentedString(foreColor)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    translation: ").append(toIndentedString(translation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
