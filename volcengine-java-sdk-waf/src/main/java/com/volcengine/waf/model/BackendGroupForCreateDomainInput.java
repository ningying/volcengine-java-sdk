/*
 * waf
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.waf.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.waf.model.BackendForCreateDomainInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * BackendGroupForCreateDomainInput
 */



public class BackendGroupForCreateDomainInput {
  @SerializedName("AccessPort")
  private List<Integer> accessPort = null;

  @SerializedName("Backends")
  private List<BackendForCreateDomainInput> backends = null;

  @SerializedName("Name")
  private String name = null;

  public BackendGroupForCreateDomainInput accessPort(List<Integer> accessPort) {
    this.accessPort = accessPort;
    return this;
  }

  public BackendGroupForCreateDomainInput addAccessPortItem(Integer accessPortItem) {
    if (this.accessPort == null) {
      this.accessPort = new ArrayList<Integer>();
    }
    this.accessPort.add(accessPortItem);
    return this;
  }

   /**
   * Get accessPort
   * @return accessPort
  **/
  @Schema(description = "")
  public List<Integer> getAccessPort() {
    return accessPort;
  }

  public void setAccessPort(List<Integer> accessPort) {
    this.accessPort = accessPort;
  }

  public BackendGroupForCreateDomainInput backends(List<BackendForCreateDomainInput> backends) {
    this.backends = backends;
    return this;
  }

  public BackendGroupForCreateDomainInput addBackendsItem(BackendForCreateDomainInput backendsItem) {
    if (this.backends == null) {
      this.backends = new ArrayList<BackendForCreateDomainInput>();
    }
    this.backends.add(backendsItem);
    return this;
  }

   /**
   * Get backends
   * @return backends
  **/
  @Valid
  @Schema(description = "")
  public List<BackendForCreateDomainInput> getBackends() {
    return backends;
  }

  public void setBackends(List<BackendForCreateDomainInput> backends) {
    this.backends = backends;
  }

  public BackendGroupForCreateDomainInput name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackendGroupForCreateDomainInput backendGroupForCreateDomainInput = (BackendGroupForCreateDomainInput) o;
    return Objects.equals(this.accessPort, backendGroupForCreateDomainInput.accessPort) &&
        Objects.equals(this.backends, backendGroupForCreateDomainInput.backends) &&
        Objects.equals(this.name, backendGroupForCreateDomainInput.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessPort, backends, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackendGroupForCreateDomainInput {\n");
    
    sb.append("    accessPort: ").append(toIndentedString(accessPort)).append("\n");
    sb.append("    backends: ").append(toIndentedString(backends)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
